
spawacze_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  08004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  8 .bss          00000350  20000028  20000028  00020028  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000378  20000378  00020028  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c1af  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000033fa  00000000  00000000  0003c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00013312  00000000  00000000  0003f601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00052918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  00053a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002153a  00000000  00000000  00054ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebda  00000000  00000000  00075ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbaaa  00000000  00000000  00094bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  001606cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c7c 	.word	0x08004c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08004c7c 	.word	0x08004c7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b510      	push	{r4, lr}
 80004c2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
 80004c6:	7818      	ldrb	r0, [r3, #0]
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d0:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_InitTick+0x44>)
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 fbe8 	bl	8000cac <HAL_SYSTICK_Config>
 80004dc:	b968      	cbnz	r0, 80004fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004de:	2c0f      	cmp	r4, #15
 80004e0:	d901      	bls.n	80004e6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
 80004e4:	e00a      	b.n	80004fc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e6:	2200      	movs	r2, #0
 80004e8:	4621      	mov	r1, r4
 80004ea:	f04f 30ff 	mov.w	r0, #4294967295
 80004ee:	f000 fb9b 	bl	8000c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <HAL_InitTick+0x40>)
 80004f4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80004f6:	2000      	movs	r0, #0
 80004f8:	e000      	b.n	80004fc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
}
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	20000024 	.word	0x20000024

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 fb6d 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f004 f998 	bl	8004864 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	6811      	ldr	r1, [r2, #0]
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_IncTick+0x14>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000004c 	.word	0x2000004c
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000004c 	.word	0x2000004c

08000560 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000560:	4b4a      	ldr	r3, [pc, #296]	; (800068c <ADC_Init+0x12c>)
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000568:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	6841      	ldr	r1, [r0, #4]
 800056e:	430a      	orrs	r2, r1
 8000570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000572:	6802      	ldr	r2, [r0, #0]
 8000574:	6853      	ldr	r3, [r2, #4]
 8000576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800057a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800057c:	6802      	ldr	r2, [r0, #0]
 800057e:	6853      	ldr	r3, [r2, #4]
 8000580:	6901      	ldr	r1, [r0, #16]
 8000582:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000586:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000588:	6802      	ldr	r2, [r0, #0]
 800058a:	6853      	ldr	r3, [r2, #4]
 800058c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000590:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000592:	6802      	ldr	r2, [r0, #0]
 8000594:	6853      	ldr	r3, [r2, #4]
 8000596:	6881      	ldr	r1, [r0, #8]
 8000598:	430b      	orrs	r3, r1
 800059a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800059c:	6802      	ldr	r2, [r0, #0]
 800059e:	6893      	ldr	r3, [r2, #8]
 80005a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005a4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005a6:	6802      	ldr	r2, [r0, #0]
 80005a8:	6893      	ldr	r3, [r2, #8]
 80005aa:	68c1      	ldr	r1, [r0, #12]
 80005ac:	430b      	orrs	r3, r1
 80005ae:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005b0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80005b2:	4b37      	ldr	r3, [pc, #220]	; (8000690 <ADC_Init+0x130>)
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d057      	beq.n	8000668 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005b8:	6802      	ldr	r2, [r0, #0]
 80005ba:	6893      	ldr	r3, [r2, #8]
 80005bc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80005c0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005c2:	6802      	ldr	r2, [r0, #0]
 80005c4:	6893      	ldr	r3, [r2, #8]
 80005c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005cc:	6802      	ldr	r2, [r0, #0]
 80005ce:	6893      	ldr	r3, [r2, #8]
 80005d0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80005d4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80005d6:	6802      	ldr	r2, [r0, #0]
 80005d8:	6893      	ldr	r3, [r2, #8]
 80005da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80005dc:	430b      	orrs	r3, r1
 80005de:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80005e0:	6802      	ldr	r2, [r0, #0]
 80005e2:	6893      	ldr	r3, [r2, #8]
 80005e4:	f023 0302 	bic.w	r3, r3, #2
 80005e8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80005ea:	6802      	ldr	r2, [r0, #0]
 80005ec:	6893      	ldr	r3, [r2, #8]
 80005ee:	7e01      	ldrb	r1, [r0, #24]
 80005f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80005f4:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80005f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d03f      	beq.n	800067e <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80005fe:	6802      	ldr	r2, [r0, #0]
 8000600:	6853      	ldr	r3, [r2, #4]
 8000602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000606:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000608:	6802      	ldr	r2, [r0, #0]
 800060a:	6853      	ldr	r3, [r2, #4]
 800060c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000610:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000612:	6801      	ldr	r1, [r0, #0]
 8000614:	684b      	ldr	r3, [r1, #4]
 8000616:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000618:	3a01      	subs	r2, #1
 800061a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800061e:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000620:	6802      	ldr	r2, [r0, #0]
 8000622:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000624:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000628:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800062a:	6801      	ldr	r1, [r0, #0]
 800062c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800062e:	69c2      	ldr	r2, [r0, #28]
 8000630:	3a01      	subs	r2, #1
 8000632:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000636:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	6893      	ldr	r3, [r2, #8]
 800063c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000640:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000642:	6802      	ldr	r2, [r0, #0]
 8000644:	6893      	ldr	r3, [r2, #8]
 8000646:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800064a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800064e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000650:	6802      	ldr	r2, [r0, #0]
 8000652:	6893      	ldr	r3, [r2, #8]
 8000654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000658:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800065a:	6802      	ldr	r2, [r0, #0]
 800065c:	6893      	ldr	r3, [r2, #8]
 800065e:	6941      	ldr	r1, [r0, #20]
 8000660:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8000664:	6093      	str	r3, [r2, #8]
}
 8000666:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000668:	6802      	ldr	r2, [r0, #0]
 800066a:	6893      	ldr	r3, [r2, #8]
 800066c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000670:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000672:	6802      	ldr	r2, [r0, #0]
 8000674:	6893      	ldr	r3, [r2, #8]
 8000676:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800067a:	6093      	str	r3, [r2, #8]
 800067c:	e7b0      	b.n	80005e0 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800067e:	6802      	ldr	r2, [r0, #0]
 8000680:	6853      	ldr	r3, [r2, #4]
 8000682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000686:	6053      	str	r3, [r2, #4]
 8000688:	e7ca      	b.n	8000620 <ADC_Init+0xc0>
 800068a:	bf00      	nop
 800068c:	40012300 	.word	0x40012300
 8000690:	0f000001 	.word	0x0f000001

08000694 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000694:	b338      	cbz	r0, 80006e6 <HAL_ADC_Init+0x52>
{
 8000696:	b510      	push	{r4, lr}
 8000698:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800069a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800069c:	b143      	cbz	r3, 80006b0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800069e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a0:	f013 0f10 	tst.w	r3, #16
 80006a4:	d00b      	beq.n	80006be <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80006a6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006a8:	2300      	movs	r3, #0
 80006aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80006ae:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80006b0:	f003 fe38 	bl	8004324 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80006b4:	2300      	movs	r3, #0
 80006b6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80006b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80006bc:	e7ef      	b.n	800069e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80006be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006c4:	f023 0302 	bic.w	r3, r3, #2
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80006ce:	4620      	mov	r0, r4
 80006d0:	f7ff ff46 	bl	8000560 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80006d4:	2000      	movs	r0, #0
 80006d6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006da:	f023 0303 	bic.w	r3, r3, #3
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6423      	str	r3, [r4, #64]	; 0x40
 80006e4:	e7e0      	b.n	80006a8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80006e6:	2001      	movs	r0, #1
}
 80006e8:	4770      	bx	lr
	...

080006ec <HAL_ADC_Start_DMA>:
{
 80006ec:	b510      	push	{r4, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80006f2:	2200      	movs	r2, #0
 80006f4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80006f6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80006fa:	2a01      	cmp	r2, #1
 80006fc:	f000 80ae 	beq.w	800085c <HAL_ADC_Start_DMA+0x170>
 8000700:	4604      	mov	r4, r0
 8000702:	2201      	movs	r2, #1
 8000704:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000708:	6802      	ldr	r2, [r0, #0]
 800070a:	6890      	ldr	r0, [r2, #8]
 800070c:	f010 0f01 	tst.w	r0, #1
 8000710:	d113      	bne.n	800073a <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8000712:	6890      	ldr	r0, [r2, #8]
 8000714:	f040 0001 	orr.w	r0, r0, #1
 8000718:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800071a:	4a53      	ldr	r2, [pc, #332]	; (8000868 <HAL_ADC_Start_DMA+0x17c>)
 800071c:	6810      	ldr	r0, [r2, #0]
 800071e:	4a53      	ldr	r2, [pc, #332]	; (800086c <HAL_ADC_Start_DMA+0x180>)
 8000720:	fba2 2000 	umull	r2, r0, r2, r0
 8000724:	0c80      	lsrs	r0, r0, #18
 8000726:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800072a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800072c:	e002      	b.n	8000734 <HAL_ADC_Start_DMA+0x48>
      counter--;
 800072e:	9801      	ldr	r0, [sp, #4]
 8000730:	3801      	subs	r0, #1
 8000732:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8000734:	9801      	ldr	r0, [sp, #4]
 8000736:	2800      	cmp	r0, #0
 8000738:	d1f9      	bne.n	800072e <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800073a:	6822      	ldr	r2, [r4, #0]
 800073c:	6890      	ldr	r0, [r2, #8]
 800073e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8000742:	d003      	beq.n	800074c <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000744:	6890      	ldr	r0, [r2, #8]
 8000746:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800074a:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800074c:	6822      	ldr	r2, [r4, #0]
 800074e:	6890      	ldr	r0, [r2, #8]
 8000750:	f010 0f01 	tst.w	r0, #1
 8000754:	d077      	beq.n	8000846 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 8000756:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000758:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800075c:	f020 0001 	bic.w	r0, r0, #1
 8000760:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000764:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000766:	6852      	ldr	r2, [r2, #4]
 8000768:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800076c:	d005      	beq.n	800077a <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800076e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000770:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000778:	6422      	str	r2, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800077a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800077c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000780:	d036      	beq.n	80007f0 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000782:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000784:	f022 0206 	bic.w	r2, r2, #6
 8000788:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800078a:	2200      	movs	r2, #0
 800078c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000790:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000792:	4837      	ldr	r0, [pc, #220]	; (8000870 <HAL_ADC_Start_DMA+0x184>)
 8000794:	63d0      	str	r0, [r2, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000796:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000798:	4836      	ldr	r0, [pc, #216]	; (8000874 <HAL_ADC_Start_DMA+0x188>)
 800079a:	6410      	str	r0, [r2, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800079c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800079e:	4836      	ldr	r0, [pc, #216]	; (8000878 <HAL_ADC_Start_DMA+0x18c>)
 80007a0:	64d0      	str	r0, [r2, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007a2:	6822      	ldr	r2, [r4, #0]
 80007a4:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80007a8:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007aa:	6820      	ldr	r0, [r4, #0]
 80007ac:	6842      	ldr	r2, [r0, #4]
 80007ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80007b2:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80007b4:	6820      	ldr	r0, [r4, #0]
 80007b6:	6882      	ldr	r2, [r0, #8]
 80007b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007bc:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007be:	6820      	ldr	r0, [r4, #0]
 80007c0:	460a      	mov	r2, r1
 80007c2:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 80007c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80007c8:	f000 fb6c 	bl	8000ea4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <HAL_ADC_Start_DMA+0x190>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f013 0f1f 	tst.w	r3, #31
 80007d4:	d127      	bne.n	8000826 <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	4a29      	ldr	r2, [pc, #164]	; (8000880 <HAL_ADC_Start_DMA+0x194>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d011      	beq.n	8000802 <HAL_ADC_Start_DMA+0x116>
 80007de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d007      	beq.n	80007f6 <HAL_ADC_Start_DMA+0x10a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007e6:	4a27      	ldr	r2, [pc, #156]	; (8000884 <HAL_ADC_Start_DMA+0x198>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d014      	beq.n	8000816 <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 80007ec:	2000      	movs	r0, #0
 80007ee:	e033      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6462      	str	r2, [r4, #68]	; 0x44
 80007f4:	e7c9      	b.n	800078a <HAL_ADC_Start_DMA+0x9e>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80007fa:	6852      	ldr	r2, [r2, #4]
 80007fc:	f012 0f1f 	tst.w	r2, #31
 8000800:	d1f1      	bne.n	80007e6 <HAL_ADC_Start_DMA+0xfa>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000802:	689a      	ldr	r2, [r3, #8]
 8000804:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000808:	d12a      	bne.n	8000860 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000812:	2000      	movs	r0, #0
 8000814:	e020      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000816:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800081a:	6852      	ldr	r2, [r2, #4]
 800081c:	f012 0f10 	tst.w	r2, #16
 8000820:	d0ef      	beq.n	8000802 <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 8000822:	2000      	movs	r0, #0
 8000824:	e018      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <HAL_ADC_Start_DMA+0x194>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d001      	beq.n	8000832 <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 800082e:	2000      	movs	r0, #0
 8000830:	e012      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000838:	d114      	bne.n	8000864 <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	e008      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800084e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000856:	2000      	movs	r0, #0
}
 8000858:	b002      	add	sp, #8
 800085a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800085c:	2002      	movs	r0, #2
 800085e:	e7fb      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8000860:	2000      	movs	r0, #0
 8000862:	e7f9      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
 8000864:	2000      	movs	r0, #0
 8000866:	e7f7      	b.n	8000858 <HAL_ADC_Start_DMA+0x16c>
 8000868:	20000024 	.word	0x20000024
 800086c:	431bde83 	.word	0x431bde83
 8000870:	080009ff 	.word	0x080009ff
 8000874:	0800088d 	.word	0x0800088d
 8000878:	080009e9 	.word	0x080009e9
 800087c:	40012300 	.word	0x40012300
 8000880:	40012000 	.word	0x40012000
 8000884:	40012200 	.word	0x40012200

08000888 <HAL_ADC_ConvCpltCallback>:
}
 8000888:	4770      	bx	lr

0800088a <HAL_ADC_ConvHalfCpltCallback>:
}
 800088a:	4770      	bx	lr

0800088c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800088c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800088e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000890:	f7ff fffb 	bl	800088a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000894:	bd08      	pop	{r3, pc}

08000896 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8000896:	4770      	bx	lr

08000898 <HAL_ADC_ErrorCallback>:
}
 8000898:	4770      	bx	lr

0800089a <HAL_ADC_IRQHandler>:
{
 800089a:	b538      	push	{r3, r4, r5, lr}
 800089c:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800089e:	6802      	ldr	r2, [r0, #0]
 80008a0:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80008a2:	6853      	ldr	r3, [r2, #4]
  if(tmp1 && tmp2)
 80008a4:	f011 0f02 	tst.w	r1, #2
 80008a8:	d02f      	beq.n	800090a <HAL_ADC_IRQHandler+0x70>
 80008aa:	f003 0320 	and.w	r3, r3, #32
 80008ae:	b363      	cbz	r3, 800090a <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008b2:	f013 0f10 	tst.w	r3, #16
 80008b6:	d103      	bne.n	80008c0 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008c0:	6893      	ldr	r3, [r2, #8]
 80008c2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80008c6:	d119      	bne.n	80008fc <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008c8:	7e23      	ldrb	r3, [r4, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ca:	b9bb      	cbnz	r3, 80008fc <HAL_ADC_IRQHandler+0x62>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008ce:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80008d2:	d003      	beq.n	80008dc <HAL_ADC_IRQHandler+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008d4:	6893      	ldr	r3, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80008da:	d10f      	bne.n	80008fc <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008dc:	6853      	ldr	r3, [r2, #4]
 80008de:	f023 0320 	bic.w	r3, r3, #32
 80008e2:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80008e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ea:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80008f2:	d103      	bne.n	80008fc <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff ffc3 	bl	8000888 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	f06f 0212 	mvn.w	r2, #18
 8000908:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if(tmp1 && tmp2)
 8000914:	f011 0f04 	tst.w	r1, #4
 8000918:	d036      	beq.n	8000988 <HAL_ADC_IRQHandler+0xee>
 800091a:	2a00      	cmp	r2, #0
 800091c:	d034      	beq.n	8000988 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800091e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000920:	f012 0f10 	tst.w	r2, #16
 8000924:	d103      	bne.n	800092e <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000926:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800092c:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000934:	d121      	bne.n	800097a <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000938:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800093c:	d003      	beq.n	8000946 <HAL_ADC_IRQHandler+0xac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800093e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000940:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000944:	d119      	bne.n	800097a <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000946:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000948:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800094c:	d115      	bne.n	800097a <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800094e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000950:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000954:	d111      	bne.n	800097a <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000956:	7e22      	ldrb	r2, [r4, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000958:	b97a      	cbnz	r2, 800097a <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000960:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000968:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800096a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800096c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000970:	d103      	bne.n	800097a <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800097a:	4620      	mov	r0, r4
 800097c:	f000 f940 	bl	8000c00 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	f06f 020c 	mvn.w	r2, #12
 8000986:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000988:	6822      	ldr	r2, [r4, #0]
 800098a:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800098c:	6853      	ldr	r3, [r2, #4]
 800098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if(tmp1 && tmp2)
 8000992:	f011 0f01 	tst.w	r1, #1
 8000996:	d004      	beq.n	80009a2 <HAL_ADC_IRQHandler+0x108>
 8000998:	b11b      	cbz	r3, 80009a2 <HAL_ADC_IRQHandler+0x108>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f013 0f01 	tst.w	r3, #1
 80009a0:	d109      	bne.n	80009b6 <HAL_ADC_IRQHandler+0x11c>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80009a6:	6853      	ldr	r3, [r2, #4]
 80009a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  if(tmp1 && tmp2)
 80009ac:	f011 0f20 	tst.w	r1, #32
 80009b0:	d000      	beq.n	80009b4 <HAL_ADC_IRQHandler+0x11a>
 80009b2:	b963      	cbnz	r3, 80009ce <HAL_ADC_IRQHandler+0x134>
}
 80009b4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80009b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009bc:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80009be:	4620      	mov	r0, r4
 80009c0:	f7ff ff69 	bl	8000896 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	f06f 0201 	mvn.w	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e7e9      	b.n	80009a2 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009d6:	f06f 0520 	mvn.w	r5, #32
 80009da:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 80009dc:	4620      	mov	r0, r4
 80009de:	f7ff ff5b 	bl	8000898 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	601d      	str	r5, [r3, #0]
}
 80009e6:	e7e5      	b.n	80009b4 <HAL_ADC_IRQHandler+0x11a>

080009e8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80009e8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80009f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80009f8:	f7ff ff4e 	bl	8000898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009fc:	bd08      	pop	{r3, pc}

080009fe <ADC_DMAConvCplt>:
{
 80009fe:	b508      	push	{r3, lr}
 8000a00:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a02:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000a06:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000a0a:	d125      	bne.n	8000a58 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a12:	6403      	str	r3, [r0, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a14:	6803      	ldr	r3, [r0, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000a1c:	d119      	bne.n	8000a52 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a1e:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a20:	b9ba      	cbnz	r2, 8000a52 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a24:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000a28:	d003      	beq.n	8000a32 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000a2a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a2c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000a30:	d10f      	bne.n	8000a52 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	f022 0220 	bic.w	r2, r2, #32
 8000a38:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a40:	6403      	str	r3, [r0, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a44:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000a48:	d103      	bne.n	8000a52 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000a52:	f7ff ff19 	bl	8000888 <HAL_ADC_ConvCpltCallback>
}
 8000a56:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000a58:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000a5a:	f012 0f10 	tst.w	r2, #16
 8000a5e:	d104      	bne.n	8000a6a <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a60:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a64:	4618      	mov	r0, r3
 8000a66:	4790      	blx	r2
}
 8000a68:	e7f5      	b.n	8000a56 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8000a6a:	f7ff ff15 	bl	8000898 <HAL_ADC_ErrorCallback>
 8000a6e:	e7f2      	b.n	8000a56 <ADC_DMAConvCplt+0x58>

08000a70 <HAL_ADC_ConfigChannel>:
{
 8000a70:	b430      	push	{r4, r5}
 8000a72:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000a78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	f000 80b7 	beq.w	8000bf0 <HAL_ADC_ConfigChannel+0x180>
 8000a82:	2301      	movs	r3, #1
 8000a84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a88:	680b      	ldr	r3, [r1, #0]
 8000a8a:	2b09      	cmp	r3, #9
 8000a8c:	d93e      	bls.n	8000b0c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a8e:	6805      	ldr	r5, [r0, #0]
 8000a90:	68ea      	ldr	r2, [r5, #12]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a98:	3b1e      	subs	r3, #30
 8000a9a:	2407      	movs	r4, #7
 8000a9c:	fa04 f303 	lsl.w	r3, r4, r3
 8000aa0:	ea22 0303 	bic.w	r3, r2, r3
 8000aa4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000aa6:	6805      	ldr	r5, [r0, #0]
 8000aa8:	68ea      	ldr	r2, [r5, #12]
 8000aaa:	688c      	ldr	r4, [r1, #8]
 8000aac:	880b      	ldrh	r3, [r1, #0]
 8000aae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ab2:	3b1e      	subs	r3, #30
 8000ab4:	fa04 f303 	lsl.w	r3, r4, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8000abc:	684b      	ldr	r3, [r1, #4]
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d83a      	bhi.n	8000b38 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ac2:	6805      	ldr	r5, [r0, #0]
 8000ac4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ac6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aca:	3b05      	subs	r3, #5
 8000acc:	241f      	movs	r4, #31
 8000ace:	fa04 f303 	lsl.w	r3, r4, r3
 8000ad2:	ea22 0303 	bic.w	r3, r2, r3
 8000ad6:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ad8:	6805      	ldr	r5, [r0, #0]
 8000ada:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000adc:	684b      	ldr	r3, [r1, #4]
 8000ade:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ae2:	3b05      	subs	r3, #5
 8000ae4:	880c      	ldrh	r4, [r1, #0]
 8000ae6:	fa04 f303 	lsl.w	r3, r4, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000aee:	6802      	ldr	r2, [r0, #0]
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <HAL_ADC_ConfigChannel+0x184>)
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d050      	beq.n	8000b98 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000af6:	6802      	ldr	r2, [r0, #0]
 8000af8:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <HAL_ADC_ConfigChannel+0x184>)
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d055      	beq.n	8000baa <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8000afe:	2300      	movs	r3, #0
 8000b00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000b04:	4618      	mov	r0, r3
}
 8000b06:	b002      	add	sp, #8
 8000b08:	bc30      	pop	{r4, r5}
 8000b0a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000b0c:	6805      	ldr	r5, [r0, #0]
 8000b0e:	692a      	ldr	r2, [r5, #16]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b16:	2407      	movs	r4, #7
 8000b18:	fa04 f303 	lsl.w	r3, r4, r3
 8000b1c:	ea22 0303 	bic.w	r3, r2, r3
 8000b20:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b22:	6805      	ldr	r5, [r0, #0]
 8000b24:	692a      	ldr	r2, [r5, #16]
 8000b26:	688c      	ldr	r4, [r1, #8]
 8000b28:	880b      	ldrh	r3, [r1, #0]
 8000b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b2e:	fa04 f303 	lsl.w	r3, r4, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	612b      	str	r3, [r5, #16]
 8000b36:	e7c1      	b.n	8000abc <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8000b38:	2b0c      	cmp	r3, #12
 8000b3a:	d816      	bhi.n	8000b6a <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b3c:	6805      	ldr	r5, [r0, #0]
 8000b3e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000b40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b44:	3b23      	subs	r3, #35	; 0x23
 8000b46:	241f      	movs	r4, #31
 8000b48:	fa04 f303 	lsl.w	r3, r4, r3
 8000b4c:	ea22 0303 	bic.w	r3, r2, r3
 8000b50:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b52:	6805      	ldr	r5, [r0, #0]
 8000b54:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000b56:	684b      	ldr	r3, [r1, #4]
 8000b58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b5c:	3b23      	subs	r3, #35	; 0x23
 8000b5e:	880c      	ldrh	r4, [r1, #0]
 8000b60:	fa04 f303 	lsl.w	r3, r4, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	632b      	str	r3, [r5, #48]	; 0x30
 8000b68:	e7c1      	b.n	8000aee <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b6a:	6805      	ldr	r5, [r0, #0]
 8000b6c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b72:	3b41      	subs	r3, #65	; 0x41
 8000b74:	241f      	movs	r4, #31
 8000b76:	fa04 f303 	lsl.w	r3, r4, r3
 8000b7a:	ea22 0303 	bic.w	r3, r2, r3
 8000b7e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b80:	6805      	ldr	r5, [r0, #0]
 8000b82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000b84:	684b      	ldr	r3, [r1, #4]
 8000b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b8a:	3b41      	subs	r3, #65	; 0x41
 8000b8c:	880c      	ldrh	r4, [r1, #0]
 8000b8e:	fa04 f303 	lsl.w	r3, r4, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000b96:	e7aa      	b.n	8000aee <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b98:	680b      	ldr	r3, [r1, #0]
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d1ab      	bne.n	8000af6 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <HAL_ADC_ConfigChannel+0x188>)
 8000ba0:	6853      	ldr	r3, [r2, #4]
 8000ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba6:	6053      	str	r3, [r2, #4]
 8000ba8:	e7a5      	b.n	8000af6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000baa:	680b      	ldr	r3, [r1, #0]
 8000bac:	3b10      	subs	r3, #16
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d8a5      	bhi.n	8000afe <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_ADC_ConfigChannel+0x188>)
 8000bb4:	6853      	ldr	r3, [r2, #4]
 8000bb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bba:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000bbc:	680b      	ldr	r3, [r1, #0]
 8000bbe:	2b10      	cmp	r3, #16
 8000bc0:	d19d      	bne.n	8000afe <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_ADC_ConfigChannel+0x18c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8000bca:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8000bce:	f202 3283 	addw	r2, r2, #899	; 0x383
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000be0:	e002      	b.n	8000be8 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000be8:	9b01      	ldr	r3, [sp, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f9      	bne.n	8000be2 <HAL_ADC_ConfigChannel+0x172>
 8000bee:	e786      	b.n	8000afe <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	e788      	b.n	8000b06 <HAL_ADC_ConfigChannel+0x96>
 8000bf4:	40012000 	.word	0x40012000
 8000bf8:	40012300 	.word	0x40012300
 8000bfc:	20000024 	.word	0x20000024

08000c00 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000c00:	4770      	bx	lr
	...

08000c04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c0c:	041b      	lsls	r3, r3, #16
 8000c0e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	0200      	lsls	r0, r0, #8
 8000c12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c16:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c20:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c28:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_NVIC_SetPriority+0x60>)
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c32:	f1c3 0407 	rsb	r4, r3, #7
 8000c36:	2c04      	cmp	r4, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3c:	1d1d      	adds	r5, r3, #4
 8000c3e:	2d06      	cmp	r5, #6
 8000c40:	d918      	bls.n	8000c74 <HAL_NVIC_SetPriority+0x4c>
 8000c42:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 35ff 	mov.w	r5, #4294967295
 8000c48:	fa05 f404 	lsl.w	r4, r5, r4
 8000c4c:	ea21 0104 	bic.w	r1, r1, r4
 8000c50:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c52:	fa05 f303 	lsl.w	r3, r5, r3
 8000c56:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	db0b      	blt.n	8000c78 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	0109      	lsls	r1, r1, #4
 8000c62:	b2c9      	uxtb	r1, r1
 8000c64:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c6c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c70:	bc30      	pop	{r4, r5}
 8000c72:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c74:	2300      	movs	r3, #0
 8000c76:	e7e5      	b.n	8000c44 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	f000 000f 	and.w	r0, r0, #15
 8000c7c:	0109      	lsls	r1, r1, #4
 8000c7e:	b2c9      	uxtb	r1, r1
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_NVIC_SetPriority+0x64>)
 8000c82:	5419      	strb	r1, [r3, r0]
 8000c84:	e7f4      	b.n	8000c70 <HAL_NVIC_SetPriority+0x48>
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	e000ed14 	.word	0xe000ed14

08000c90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	db07      	blt.n	8000ca4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c94:	f000 021f 	and.w	r2, r0, #31
 8000c98:	0940      	lsrs	r0, r0, #5
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	4a02      	ldr	r2, [pc, #8]	; (8000ca8 <HAL_NVIC_EnableIRQ+0x18>)
 8000ca0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	3801      	subs	r0, #1
 8000cae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb2:	d20a      	bcs.n	8000cca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_SYSTICK_Config+0x24>)
 8000cb6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_SYSTICK_Config+0x28>)
 8000cba:	21f0      	movs	r1, #240	; 0xf0
 8000cbc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cd8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000cda:	6805      	ldr	r5, [r0, #0]
 8000cdc:	682c      	ldr	r4, [r5, #0]
 8000cde:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000ce2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000ce4:	6804      	ldr	r4, [r0, #0]
 8000ce6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ce8:	6883      	ldr	r3, [r0, #8]
 8000cea:	2b40      	cmp	r3, #64	; 0x40
 8000cec:	d005      	beq.n	8000cfa <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000cee:	6803      	ldr	r3, [r0, #0]
 8000cf0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000cf2:	6803      	ldr	r3, [r0, #0]
 8000cf4:	60da      	str	r2, [r3, #12]
  }
}
 8000cf6:	bc30      	pop	{r4, r5}
 8000cf8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000cfa:	6803      	ldr	r3, [r0, #0]
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000cfe:	6803      	ldr	r3, [r0, #0]
 8000d00:	60d9      	str	r1, [r3, #12]
 8000d02:	e7f8      	b.n	8000cf6 <DMA_SetConfig+0x1e>

08000d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d04:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d06:	6803      	ldr	r3, [r0, #0]
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	3910      	subs	r1, #16
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <DMA_CalcBaseAndBitshift+0x3c>)
 8000d0e:	fba2 4201 	umull	r4, r2, r2, r1
 8000d12:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d14:	4c0b      	ldr	r4, [pc, #44]	; (8000d44 <DMA_CalcBaseAndBitshift+0x40>)
 8000d16:	5ca2      	ldrb	r2, [r4, r2]
 8000d18:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d1a:	295f      	cmp	r1, #95	; 0x5f
 8000d1c:	d909      	bls.n	8000d32 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d22:	f023 0303 	bic.w	r3, r3, #3
 8000d26:	3304      	adds	r3, #4
 8000d28:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000d2a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d30:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	6583      	str	r3, [r0, #88]	; 0x58
 8000d3c:	e7f5      	b.n	8000d2a <DMA_CalcBaseAndBitshift+0x26>
 8000d3e:	bf00      	nop
 8000d40:	aaaaaaab 	.word	0xaaaaaaab
 8000d44:	08004c94 	.word	0x08004c94

08000d48 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d48:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d4a:	6982      	ldr	r2, [r0, #24]
 8000d4c:	b992      	cbnz	r2, 8000d74 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d00a      	beq.n	8000d68 <DMA_CheckFifoParam+0x20>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d002      	beq.n	8000d5c <DMA_CheckFifoParam+0x14>
 8000d56:	b10b      	cbz	r3, 8000d5c <DMA_CheckFifoParam+0x14>
 8000d58:	2000      	movs	r0, #0
 8000d5a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d62:	d128      	bne.n	8000db6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000d64:	2000      	movs	r0, #0
 8000d66:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d6e:	d024      	beq.n	8000dba <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	2000      	movs	r0, #0
 8000d72:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d74:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d78:	d009      	beq.n	8000d8e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d925      	bls.n	8000dca <DMA_CheckFifoParam+0x82>
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d125      	bne.n	8000dce <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d88:	d123      	bne.n	8000dd2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	4770      	bx	lr
    switch (tmp)
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d803      	bhi.n	8000d9a <DMA_CheckFifoParam+0x52>
 8000d92:	e8df f003 	tbb	[pc, r3]
 8000d96:	0414      	.short	0x0414
 8000d98:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000da0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000da4:	d10d      	bne.n	8000dc2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000da6:	2000      	movs	r0, #0
 8000da8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000daa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000dac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000db0:	d009      	beq.n	8000dc6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000db2:	2000      	movs	r0, #0
 8000db4:	4770      	bx	lr
        status = HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
 8000db8:	4770      	bx	lr
        status = HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4770      	bx	lr
      status = HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4770      	bx	lr
        status = HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	4770      	bx	lr
        status = HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4770      	bx	lr
      status = HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
 8000dcc:	4770      	bx	lr
    switch (tmp)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_DMA_Init>:
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff fbba 	bl	8000554 <HAL_GetTick>
  if(hdma == NULL)
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d05b      	beq.n	8000e9c <HAL_DMA_Init+0xc4>
 8000de4:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000dec:	2300      	movs	r3, #0
 8000dee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	6813      	ldr	r3, [r2, #0]
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	f012 0f01 	tst.w	r2, #1
 8000e04:	d00a      	beq.n	8000e1c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e06:	f7ff fba5 	bl	8000554 <HAL_GetTick>
 8000e0a:	1b43      	subs	r3, r0, r5
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d9f5      	bls.n	8000dfc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e10:	2320      	movs	r3, #32
 8000e12:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000e1c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e1e:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <HAL_DMA_Init+0xc8>)
 8000e20:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e22:	6861      	ldr	r1, [r4, #4]
 8000e24:	68a2      	ldr	r2, [r4, #8]
 8000e26:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e2a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	6921      	ldr	r1, [r4, #16]
 8000e2e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e30:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	69a1      	ldr	r1, [r4, #24]
 8000e36:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e38:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3c:	6a21      	ldr	r1, [r4, #32]
 8000e3e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e40:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e44:	2904      	cmp	r1, #4
 8000e46:	d01e      	beq.n	8000e86 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000e48:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000e4a:	6826      	ldr	r6, [r4, #0]
 8000e4c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e4e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e54:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d107      	bne.n	8000e6a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e5c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e60:	b11b      	cbz	r3, 8000e6a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff ff70 	bl	8000d48 <DMA_CheckFifoParam>
 8000e68:	b990      	cbnz	r0, 8000e90 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000e6a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff49 	bl	8000d04 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e74:	233f      	movs	r3, #63	; 0x3f
 8000e76:	4093      	lsls	r3, r2
 8000e78:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000e84:	e7c9      	b.n	8000e1a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e88:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	e7db      	b.n	8000e48 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000e94:	2001      	movs	r0, #1
 8000e96:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000e9a:	e7be      	b.n	8000e1a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	e7bc      	b.n	8000e1a <HAL_DMA_Init+0x42>
 8000ea0:	f010803f 	.word	0xf010803f

08000ea4 <HAL_DMA_Start_IT>:
{
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000eaa:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000eae:	2801      	cmp	r0, #1
 8000eb0:	d02b      	beq.n	8000f0a <HAL_DMA_Start_IT+0x66>
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eb8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000ebc:	b2c0      	uxtb	r0, r0
 8000ebe:	2801      	cmp	r0, #1
 8000ec0:	d004      	beq.n	8000ecc <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000ec8:	2002      	movs	r0, #2
}
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff fefe 	bl	8000cd8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000edc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ede:	233f      	movs	r3, #63	; 0x3f
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f043 0316 	orr.w	r3, r3, #22
 8000eec:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ef0:	b123      	cbz	r3, 8000efc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ef2:	6822      	ldr	r2, [r4, #0]
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2000      	movs	r0, #0
 8000f08:	e7df      	b.n	8000eca <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	e7dd      	b.n	8000eca <HAL_DMA_Start_IT+0x26>

08000f0e <HAL_DMA_Abort>:
{
 8000f0e:	b570      	push	{r4, r5, r6, lr}
 8000f10:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f12:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fb1e 	bl	8000554 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f18:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d006      	beq.n	8000f30 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000f26:	2300      	movs	r3, #0
 8000f28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
}
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f023 0316 	bic.w	r3, r3, #22
 8000f3a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	6953      	ldr	r3, [r2, #20]
 8000f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f44:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f48:	b1e3      	cbz	r3, 8000f84 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	6813      	ldr	r3, [r2, #0]
 8000f4e:	f023 0308 	bic.w	r3, r3, #8
 8000f52:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f013 0f01 	tst.w	r3, #1
 8000f66:	d011      	beq.n	8000f8c <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f68:	f7ff faf4 	bl	8000554 <HAL_GetTick>
 8000f6c:	1b43      	subs	r3, r0, r5
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d9f5      	bls.n	8000f5e <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f72:	2320      	movs	r3, #32
 8000f74:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f76:	2003      	movs	r0, #3
 8000f78:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8000f82:	e7d4      	b.n	8000f2e <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1df      	bne.n	8000f4a <HAL_DMA_Abort+0x3c>
 8000f8a:	e7e3      	b.n	8000f54 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f8c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f8e:	233f      	movs	r3, #63	; 0x3f
 8000f90:	4093      	lsls	r3, r2
 8000f92:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8000fa0:	e7c5      	b.n	8000f2e <HAL_DMA_Abort+0x20>

08000fa2 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d003      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000fba:	6802      	ldr	r2, [r0, #0]
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000fc4:	2000      	movs	r0, #0
}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_DMA_IRQHandler>:
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <HAL_DMA_IRQHandler+0x1d4>)
 8000fd4:	681d      	ldr	r5, [r3, #0]
 8000fd6:	4b72      	ldr	r3, [pc, #456]	; (80011a0 <HAL_DMA_IRQHandler+0x1d8>)
 8000fd8:	fba3 3505 	umull	r3, r5, r3, r5
 8000fdc:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fde:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000fe0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fe2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	4233      	tst	r3, r6
 8000fea:	d010      	beq.n	800100e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fec:	6803      	ldr	r3, [r0, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f012 0f04 	tst.w	r2, #4
 8000ff4:	d00b      	beq.n	800100e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f022 0204 	bic.w	r2, r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ffe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001000:	2308      	movs	r3, #8
 8001002:	4093      	lsls	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001006:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800100e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001010:	2301      	movs	r3, #1
 8001012:	4093      	lsls	r3, r2
 8001014:	4233      	tst	r3, r6
 8001016:	d009      	beq.n	800102c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001018:	6822      	ldr	r2, [r4, #0]
 800101a:	6952      	ldr	r2, [r2, #20]
 800101c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001020:	d004      	beq.n	800102c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001022:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001024:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800102c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800102e:	2304      	movs	r3, #4
 8001030:	4093      	lsls	r3, r2
 8001032:	4233      	tst	r3, r6
 8001034:	d009      	beq.n	800104a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f012 0f02 	tst.w	r2, #2
 800103e:	d004      	beq.n	800104a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001040:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001042:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800104a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800104c:	2310      	movs	r3, #16
 800104e:	4093      	lsls	r3, r2
 8001050:	4233      	tst	r3, r6
 8001052:	d024      	beq.n	800109e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	f012 0f08 	tst.w	r2, #8
 800105c:	d01f      	beq.n	800109e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800105e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001068:	d00d      	beq.n	8001086 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001070:	d104      	bne.n	800107c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001074:	b19b      	cbz	r3, 800109e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001076:	4620      	mov	r0, r4
 8001078:	4798      	blx	r3
 800107a:	e010      	b.n	800109e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800107c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800107e:	b173      	cbz	r3, 800109e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001080:	4620      	mov	r0, r4
 8001082:	4798      	blx	r3
 8001084:	e00b      	b.n	800109e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f412 7f80 	tst.w	r2, #256	; 0x100
 800108c:	d103      	bne.n	8001096 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	f022 0208 	bic.w	r2, r2, #8
 8001094:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001098:	b10b      	cbz	r3, 800109e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800109a:	4620      	mov	r0, r4
 800109c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800109e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010a0:	2320      	movs	r3, #32
 80010a2:	4093      	lsls	r3, r2
 80010a4:	4233      	tst	r3, r6
 80010a6:	d055      	beq.n	8001154 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	f012 0f10 	tst.w	r2, #16
 80010b0:	d050      	beq.n	8001154 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010b2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d00e      	beq.n	80010dc <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80010c6:	d033      	beq.n	8001130 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80010ce:	d12a      	bne.n	8001126 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80010d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03e      	beq.n	8001154 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80010d6:	4620      	mov	r0, r4
 80010d8:	4798      	blx	r3
 80010da:	e03b      	b.n	8001154 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f023 0316 	bic.w	r3, r3, #22
 80010e4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	6953      	ldr	r3, [r2, #20]
 80010ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010ee:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f2:	b1a3      	cbz	r3, 800111e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	f023 0308 	bic.w	r3, r3, #8
 80010fc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001100:	233f      	movs	r3, #63	; 0x3f
 8001102:	4093      	lsls	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	2301      	movs	r3, #1
 8001108:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800110c:	2300      	movs	r3, #0
 800110e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001112:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03f      	beq.n	8001198 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001118:	4620      	mov	r0, r4
 800111a:	4798      	blx	r3
        return;
 800111c:	e03c      	b.n	8001198 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800111e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e7      	bne.n	80010f4 <HAL_DMA_IRQHandler+0x12c>
 8001124:	e7eb      	b.n	80010fe <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001128:	b1a3      	cbz	r3, 8001154 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800112a:	4620      	mov	r0, r4
 800112c:	4798      	blx	r3
 800112e:	e011      	b.n	8001154 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001136:	d109      	bne.n	800114c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f022 0210 	bic.w	r2, r2, #16
 800113e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001140:	2301      	movs	r3, #1
 8001142:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001146:	2300      	movs	r3, #0
 8001148:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800114c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800114e:	b10b      	cbz	r3, 8001154 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001150:	4620      	mov	r0, r4
 8001152:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001154:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001156:	b1fb      	cbz	r3, 8001198 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001158:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800115a:	f013 0f01 	tst.w	r3, #1
 800115e:	d017      	beq.n	8001190 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001160:	2305      	movs	r3, #5
 8001162:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	42ab      	cmp	r3, r5
 8001178:	d804      	bhi.n	8001184 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f013 0f01 	tst.w	r3, #1
 8001182:	d1f5      	bne.n	8001170 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001184:	2301      	movs	r3, #1
 8001186:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800118a:	2300      	movs	r3, #0
 800118c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001190:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001192:	b10b      	cbz	r3, 8001198 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001194:	4620      	mov	r0, r4
 8001196:	4798      	blx	r3
}
 8001198:	b003      	add	sp, #12
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	20000024 	.word	0x20000024
 80011a0:	1b4e81b5 	.word	0x1b4e81b5

080011a4 <HAL_DMA_GetState>:
  return hdma->State;
 80011a4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	f200 80dd 	bhi.w	800136e <HAL_GPIO_Init+0x1c2>
{
 80011b4:	b4f0      	push	{r4, r5, r6, r7}
 80011b6:	b082      	sub	sp, #8
 80011b8:	e05d      	b.n	8001276 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	005f      	lsls	r7, r3, #1
 80011be:	2403      	movs	r4, #3
 80011c0:	40bc      	lsls	r4, r7
 80011c2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	68cc      	ldr	r4, [r1, #12]
 80011c8:	40bc      	lsls	r4, r7
 80011ca:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80011cc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	684c      	ldr	r4, [r1, #4]
 80011d6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80011de:	6042      	str	r2, [r0, #4]
 80011e0:	e057      	b.n	8001292 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e2:	08dc      	lsrs	r4, r3, #3
 80011e4:	3408      	adds	r4, #8
 80011e6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	f003 0207 	and.w	r2, r3, #7
 80011ee:	0096      	lsls	r6, r2, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	40b2      	lsls	r2, r6
 80011f4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f8:	690a      	ldr	r2, [r1, #16]
 80011fa:	40b2      	lsls	r2, r6
 80011fc:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80011fe:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001202:	e05a      	b.n	80012ba <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001204:	2207      	movs	r2, #7
 8001206:	e000      	b.n	800120a <HAL_GPIO_Init+0x5e>
 8001208:	2200      	movs	r2, #0
 800120a:	40b2      	lsls	r2, r6
 800120c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800120e:	3402      	adds	r4, #2
 8001210:	4e57      	ldr	r6, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x1c4>)
 8001212:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4a57      	ldr	r2, [pc, #348]	; (8001374 <HAL_GPIO_Init+0x1c8>)
 8001218:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800121a:	43ea      	mvns	r2, r5
 800121c:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	684f      	ldr	r7, [r1, #4]
 8001222:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001226:	d001      	beq.n	800122c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8001228:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800122c:	4c51      	ldr	r4, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x1c8>)
 800122e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001230:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001232:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001236:	684f      	ldr	r7, [r1, #4]
 8001238:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800123c:	d001      	beq.n	8001242 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800123e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001242:	4c4c      	ldr	r4, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x1c8>)
 8001244:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001248:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124c:	684f      	ldr	r7, [r1, #4]
 800124e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001252:	d001      	beq.n	8001258 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001254:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001258:	4c46      	ldr	r4, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x1c8>)
 800125a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800125c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800125e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	684e      	ldr	r6, [r1, #4]
 8001262:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001266:	d001      	beq.n	800126c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001268:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800126c:	4c41      	ldr	r4, [pc, #260]	; (8001374 <HAL_GPIO_Init+0x1c8>)
 800126e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001270:	3301      	adds	r3, #1
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d878      	bhi.n	8001368 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8001276:	2201      	movs	r2, #1
 8001278:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	680c      	ldr	r4, [r1, #0]
 800127c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001280:	ea32 0404 	bics.w	r4, r2, r4
 8001284:	d1f4      	bne.n	8001270 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	684c      	ldr	r4, [r1, #4]
 8001288:	f004 0403 	and.w	r4, r4, #3
 800128c:	3c01      	subs	r4, #1
 800128e:	2c01      	cmp	r4, #1
 8001290:	d993      	bls.n	80011ba <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001292:	684a      	ldr	r2, [r1, #4]
 8001294:	f002 0203 	and.w	r2, r2, #3
 8001298:	2a03      	cmp	r2, #3
 800129a:	d009      	beq.n	80012b0 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 800129c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	005e      	lsls	r6, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	40b2      	lsls	r2, r6
 80012a4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a8:	688a      	ldr	r2, [r1, #8]
 80012aa:	40b2      	lsls	r2, r6
 80012ac:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80012ae:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b0:	684a      	ldr	r2, [r1, #4]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	2a02      	cmp	r2, #2
 80012b8:	d093      	beq.n	80011e2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80012ba:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012bc:	005e      	lsls	r6, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	40b2      	lsls	r2, r6
 80012c2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c6:	684a      	ldr	r2, [r1, #4]
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	40b2      	lsls	r2, r6
 80012ce:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80012d0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d2:	684a      	ldr	r2, [r1, #4]
 80012d4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80012d8:	d0ca      	beq.n	8001270 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2200      	movs	r2, #0
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x1cc>)
 80012e0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80012e2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80012e6:	6454      	str	r4, [r2, #68]	; 0x44
 80012e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	089c      	lsrs	r4, r3, #2
 80012f4:	1ca6      	adds	r6, r4, #2
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_GPIO_Init+0x1c4>)
 80012f8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	0096      	lsls	r6, r2, #2
 8001302:	220f      	movs	r2, #15
 8001304:	40b2      	lsls	r2, r6
 8001306:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_GPIO_Init+0x1d0>)
 800130c:	4290      	cmp	r0, r2
 800130e:	f43f af7b 	beq.w	8001208 <HAL_GPIO_Init+0x5c>
 8001312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001316:	4290      	cmp	r0, r2
 8001318:	d01a      	beq.n	8001350 <HAL_GPIO_Init+0x1a4>
 800131a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800131e:	4290      	cmp	r0, r2
 8001320:	d018      	beq.n	8001354 <HAL_GPIO_Init+0x1a8>
 8001322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001326:	4290      	cmp	r0, r2
 8001328:	d016      	beq.n	8001358 <HAL_GPIO_Init+0x1ac>
 800132a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800132e:	4290      	cmp	r0, r2
 8001330:	d014      	beq.n	800135c <HAL_GPIO_Init+0x1b0>
 8001332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001336:	4290      	cmp	r0, r2
 8001338:	d012      	beq.n	8001360 <HAL_GPIO_Init+0x1b4>
 800133a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800133e:	4290      	cmp	r0, r2
 8001340:	d010      	beq.n	8001364 <HAL_GPIO_Init+0x1b8>
 8001342:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001346:	4290      	cmp	r0, r2
 8001348:	f43f af5c 	beq.w	8001204 <HAL_GPIO_Init+0x58>
 800134c:	2208      	movs	r2, #8
 800134e:	e75c      	b.n	800120a <HAL_GPIO_Init+0x5e>
 8001350:	2201      	movs	r2, #1
 8001352:	e75a      	b.n	800120a <HAL_GPIO_Init+0x5e>
 8001354:	2202      	movs	r2, #2
 8001356:	e758      	b.n	800120a <HAL_GPIO_Init+0x5e>
 8001358:	2203      	movs	r2, #3
 800135a:	e756      	b.n	800120a <HAL_GPIO_Init+0x5e>
 800135c:	2204      	movs	r2, #4
 800135e:	e754      	b.n	800120a <HAL_GPIO_Init+0x5e>
 8001360:	2205      	movs	r2, #5
 8001362:	e752      	b.n	800120a <HAL_GPIO_Init+0x5e>
 8001364:	2206      	movs	r2, #6
 8001366:	e750      	b.n	800120a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8001368:	b002      	add	sp, #8
 800136a:	bcf0      	pop	{r4, r5, r6, r7}
 800136c:	4770      	bx	lr
 800136e:	4770      	bx	lr
 8001370:	40013800 	.word	0x40013800
 8001374:	40013c00 	.word	0x40013c00
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	b10a      	cbz	r2, 8001386 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	6181      	str	r1, [r0, #24]
 8001384:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	0409      	lsls	r1, r1, #16
 8001388:	6181      	str	r1, [r0, #24]
  }
}
 800138a:	4770      	bx	lr

0800138c <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800138c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b40      	cmp	r3, #64	; 0x40
 8001394:	d010      	beq.n	80013b8 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001396:	6903      	ldr	r3, [r0, #16]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d01b      	beq.n	80013d6 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 800139e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d139      	bne.n	8001418 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80013a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013a6:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	f003 0306 	and.w	r3, r3, #6
 80013b0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80013b4:	6113      	str	r3, [r2, #16]
 80013b6:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 80013b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80013ba:	b92b      	cbnz	r3, 80013c8 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80013bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80013c4:	6113      	str	r3, [r2, #16]
 80013c6:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80013c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013ca:	6802      	ldr	r2, [r0, #0]
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	6113      	str	r3, [r2, #16]
 80013d4:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80013d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b21      	cmp	r3, #33	; 0x21
 80013de:	d00f      	beq.n	8001400 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80013e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013e2:	6802      	ldr	r2, [r0, #0]
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80013ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80013ee:	b16b      	cbz	r3, 800140c <I2C_Master_SB+0x80>
 80013f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f2:	b15b      	cbz	r3, 800140c <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	6853      	ldr	r3, [r2, #4]
 80013f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013fc:	6053      	str	r3, [r2, #4]
 80013fe:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001400:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001402:	6802      	ldr	r2, [r0, #0]
 8001404:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001408:	6113      	str	r3, [r2, #16]
 800140a:	e7ef      	b.n	80013ec <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800140c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800140e:	b133      	cbz	r3, 800141e <I2C_Master_SB+0x92>
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ee      	bne.n	80013f4 <I2C_Master_SB+0x68>
 8001416:	e002      	b.n	800141e <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8001418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800141a:	2b01      	cmp	r3, #1
 800141c:	d000      	beq.n	8001420 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 800141e:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001420:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001422:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001426:	6802      	ldr	r2, [r0, #0]
 8001428:	f003 0306 	and.w	r3, r3, #6
 800142c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8001430:	6113      	str	r3, [r2, #16]
}
 8001432:	e7f4      	b.n	800141e <I2C_Master_SB+0x92>

08001434 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001434:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001436:	6802      	ldr	r2, [r0, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800143c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800143e:	b13b      	cbz	r3, 8001450 <I2C_Master_ADD10+0x1c>
 8001440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001442:	b12b      	cbz	r3, 8001450 <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001444:	6802      	ldr	r2, [r0, #0]
 8001446:	6853      	ldr	r3, [r2, #4]
 8001448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144c:	6053      	str	r3, [r2, #4]
  }
}
 800144e:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001450:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0fb      	beq.n	800144e <I2C_Master_ADD10+0x1a>
 8001456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f3      	bne.n	8001444 <I2C_Master_ADD10+0x10>
 800145c:	e7f7      	b.n	800144e <I2C_Master_ADD10+0x1a>

0800145e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800145e:	b410      	push	{r4}
 8001460:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001462:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001466:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001468:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800146a:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800146c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b22      	cmp	r3, #34	; 0x22
 8001474:	d00b      	beq.n	800148e <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001476:	2300      	movs	r3, #0
 8001478:	9309      	str	r3, [sp, #36]	; 0x24
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	9209      	str	r2, [sp, #36]	; 0x24
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	9309      	str	r3, [sp, #36]	; 0x24
 8001484:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8001486:	b00b      	add	sp, #44	; 0x2c
 8001488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800148c:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800148e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001490:	b90b      	cbnz	r3, 8001496 <I2C_Master_ADDR+0x38>
 8001492:	2a40      	cmp	r2, #64	; 0x40
 8001494:	d017      	beq.n	80014c6 <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001496:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001498:	b91b      	cbnz	r3, 80014a2 <I2C_Master_ADDR+0x44>
 800149a:	6903      	ldr	r3, [r0, #16]
 800149c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80014a0:	d019      	beq.n	80014d6 <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 80014a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d125      	bne.n	80014f6 <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	9202      	str	r2, [sp, #8]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	9202      	str	r2, [sp, #8]
 80014b6:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014be:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	6503      	str	r3, [r0, #80]	; 0x50
 80014c4:	e7df      	b.n	8001486 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	6803      	ldr	r3, [r0, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	9b00      	ldr	r3, [sp, #0]
 80014d4:	e7d7      	b.n	8001486 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d6:	2300      	movs	r3, #0
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	6803      	ldr	r3, [r0, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80014ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014f0:	3301      	adds	r3, #1
 80014f2:	6503      	str	r3, [r0, #80]	; 0x50
 80014f4:	e7c7      	b.n	8001486 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 80014f6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d025      	beq.n	800154a <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 80014fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d07b      	beq.n	80015fe <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001510:	6803      	ldr	r3, [r0, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001518:	d00e      	beq.n	8001538 <I2C_Master_ADDR+0xda>
 800151a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800151e:	d007      	beq.n	8001530 <I2C_Master_ADDR+0xd2>
 8001520:	2901      	cmp	r1, #1
 8001522:	d005      	beq.n	8001530 <I2C_Master_ADDR+0xd2>
 8001524:	2908      	cmp	r1, #8
 8001526:	d003      	beq.n	8001530 <I2C_Master_ADDR+0xd2>
 8001528:	2910      	cmp	r1, #16
 800152a:	d001      	beq.n	8001530 <I2C_Master_ADDR+0xd2>
 800152c:	2920      	cmp	r1, #32
 800152e:	d103      	bne.n	8001538 <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001536:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001538:	2300      	movs	r3, #0
 800153a:	9308      	str	r3, [sp, #32]
 800153c:	6803      	ldr	r3, [r0, #0]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	9208      	str	r2, [sp, #32]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	9308      	str	r3, [sp, #32]
 8001546:	9b08      	ldr	r3, [sp, #32]
 8001548:	e7ba      	b.n	80014c0 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800154a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800154e:	d011      	beq.n	8001574 <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001550:	2908      	cmp	r1, #8
 8001552:	d034      	beq.n	80015be <I2C_Master_ADDR+0x160>
 8001554:	2920      	cmp	r1, #32
 8001556:	d032      	beq.n	80015be <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001558:	2c12      	cmp	r4, #18
 800155a:	d02e      	beq.n	80015ba <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800155c:	2904      	cmp	r1, #4
 800155e:	d040      	beq.n	80015e2 <I2C_Master_ADDR+0x184>
 8001560:	2902      	cmp	r1, #2
 8001562:	d03e      	beq.n	80015e2 <I2C_Master_ADDR+0x184>
 8001564:	2910      	cmp	r1, #16
 8001566:	d03c      	beq.n	80015e2 <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001568:	6802      	ldr	r2, [r0, #0]
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e03b      	b.n	80015ec <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001574:	6802      	ldr	r2, [r0, #0]
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800157c:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800157e:	6803      	ldr	r3, [r0, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001586:	d00c      	beq.n	80015a2 <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800158e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001590:	2300      	movs	r3, #0
 8001592:	9303      	str	r3, [sp, #12]
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	9203      	str	r2, [sp, #12]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	9303      	str	r3, [sp, #12]
 800159e:	9b03      	ldr	r3, [sp, #12]
 80015a0:	e78e      	b.n	80014c0 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a2:	2200      	movs	r2, #0
 80015a4:	9204      	str	r2, [sp, #16]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	9204      	str	r2, [sp, #16]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	9204      	str	r2, [sp, #16]
 80015ae:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e782      	b.n	80014c0 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80015ba:	2901      	cmp	r1, #1
 80015bc:	d0ce      	beq.n	800155c <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015be:	6802      	ldr	r2, [r0, #0]
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015c6:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c8:	2300      	movs	r3, #0
 80015ca:	9306      	str	r3, [sp, #24]
 80015cc:	6803      	ldr	r3, [r0, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	9206      	str	r2, [sp, #24]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	9206      	str	r2, [sp, #24]
 80015d6:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e76e      	b.n	80014c0 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015e2:	6802      	ldr	r2, [r0, #0]
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ec:	2300      	movs	r3, #0
 80015ee:	9305      	str	r3, [sp, #20]
 80015f0:	6803      	ldr	r3, [r0, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	9205      	str	r2, [sp, #20]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	9305      	str	r3, [sp, #20]
 80015fa:	9b05      	ldr	r3, [sp, #20]
 80015fc:	e760      	b.n	80014c0 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80015fe:	2904      	cmp	r1, #4
 8001600:	d00e      	beq.n	8001620 <I2C_Master_ADDR+0x1c2>
 8001602:	2902      	cmp	r1, #2
 8001604:	d00c      	beq.n	8001620 <I2C_Master_ADDR+0x1c2>
 8001606:	2910      	cmp	r1, #16
 8001608:	d00a      	beq.n	8001620 <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800160a:	6802      	ldr	r2, [r0, #0]
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001614:	6802      	ldr	r2, [r0, #0]
 8001616:	6813      	ldr	r3, [r2, #0]
 8001618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e004      	b.n	800162a <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001620:	6802      	ldr	r2, [r0, #0]
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001628:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800162a:	6803      	ldr	r3, [r0, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001632:	d00e      	beq.n	8001652 <I2C_Master_ADDR+0x1f4>
 8001634:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001638:	d007      	beq.n	800164a <I2C_Master_ADDR+0x1ec>
 800163a:	2901      	cmp	r1, #1
 800163c:	d005      	beq.n	800164a <I2C_Master_ADDR+0x1ec>
 800163e:	2908      	cmp	r1, #8
 8001640:	d003      	beq.n	800164a <I2C_Master_ADDR+0x1ec>
 8001642:	2910      	cmp	r1, #16
 8001644:	d001      	beq.n	800164a <I2C_Master_ADDR+0x1ec>
 8001646:	2920      	cmp	r1, #32
 8001648:	d103      	bne.n	8001652 <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001650:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001652:	2300      	movs	r3, #0
 8001654:	9307      	str	r3, [sp, #28]
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	9207      	str	r2, [sp, #28]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	9307      	str	r3, [sp, #28]
 8001660:	9b07      	ldr	r3, [sp, #28]
 8001662:	e72d      	b.n	80014c0 <I2C_Master_ADDR+0x62>

08001664 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8001664:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	b15b      	cbz	r3, 8001682 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800166a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800166c:	6803      	ldr	r3, [r0, #0]
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001672:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001674:	3301      	adds	r3, #1
 8001676:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001678:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8001682:	4770      	bx	lr

08001684 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8001684:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001686:	b29b      	uxth	r3, r3
 8001688:	b15b      	cbz	r3, 80016a2 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800168a:	6803      	ldr	r3, [r0, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001690:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001692:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001698:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 80016a2:	4770      	bx	lr

080016a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016bc:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 80016be:	9b01      	ldr	r3, [sp, #4]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	b133      	cbz	r3, 80016d6 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80016c8:	6803      	ldr	r3, [r0, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80016d0:	d1f5      	bne.n	80016be <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 80016d2:	2000      	movs	r0, #0
 80016d4:	e004      	b.n	80016e0 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 80016de:	2001      	movs	r0, #1
}
 80016e0:	b002      	add	sp, #8
 80016e2:	4770      	bx	lr
 80016e4:	20000024 	.word	0x20000024
 80016e8:	14f8b589 	.word	0x14f8b589

080016ec <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80016f4:	d101      	bne.n	80016fa <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
}
 80016f8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016fe:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001704:	2220      	movs	r2, #32
 8001706:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800170a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800170e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001710:	f042 0204 	orr.w	r2, r2, #4
 8001714:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001716:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
 800171c:	4770      	bx	lr

0800171e <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800171e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001720:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001724:	d004      	beq.n	8001730 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001726:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001728:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800172c:	d003      	beq.n	8001736 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 800172e:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001730:	2301      	movs	r3, #1
 8001732:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001734:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001736:	2308      	movs	r3, #8
 8001738:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800173a:	e7f8      	b.n	800172e <I2C_ConvertOtherXferOptions+0x10>

0800173c <I2C_WaitOnFlagUntilTimeout>:
{
 800173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001740:	4607      	mov	r7, r0
 8001742:	460d      	mov	r5, r1
 8001744:	4690      	mov	r8, r2
 8001746:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001748:	e022      	b.n	8001790 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7fe ff03 	bl	8000554 <HAL_GetTick>
 800174e:	9b06      	ldr	r3, [sp, #24]
 8001750:	1ac0      	subs	r0, r0, r3
 8001752:	42b0      	cmp	r0, r6
 8001754:	d800      	bhi.n	8001758 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001756:	b9de      	cbnz	r6, 8001790 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800175c:	2220      	movs	r2, #32
 800175e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001762:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001768:	f042 0220 	orr.w	r2, r2, #32
 800176c:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800176e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001772:	2001      	movs	r0, #1
 8001774:	e01a      	b.n	80017ac <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	699c      	ldr	r4, [r3, #24]
 800177a:	ea25 0404 	bic.w	r4, r5, r4
 800177e:	b2a4      	uxth	r4, r4
 8001780:	fab4 f484 	clz	r4, r4
 8001784:	0964      	lsrs	r4, r4, #5
 8001786:	45a0      	cmp	r8, r4
 8001788:	d10f      	bne.n	80017aa <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800178a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800178e:	d1dc      	bne.n	800174a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001790:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001794:	2b01      	cmp	r3, #1
 8001796:	d1ee      	bne.n	8001776 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	695c      	ldr	r4, [r3, #20]
 800179c:	ea25 0404 	bic.w	r4, r5, r4
 80017a0:	b2a4      	uxth	r4, r4
 80017a2:	fab4 f484 	clz	r4, r4
 80017a6:	0964      	lsrs	r4, r4, #5
 80017a8:	e7ed      	b.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80017b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b4:	4605      	mov	r5, r0
 80017b6:	460e      	mov	r6, r1
 80017b8:	4617      	mov	r7, r2
 80017ba:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017bc:	e03d      	b.n	800183a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017cc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017d2:	2220      	movs	r2, #32
 80017d4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017dc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80017de:	f042 0204 	orr.w	r2, r2, #4
 80017e2:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80017e4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
 80017ea:	e034      	b.n	8001856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ec:	f7fe feb2 	bl	8000554 <HAL_GetTick>
 80017f0:	eba0 0008 	sub.w	r0, r0, r8
 80017f4:	42b8      	cmp	r0, r7
 80017f6:	d800      	bhi.n	80017fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80017f8:	b9ff      	cbnz	r7, 800183a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017fe:	2220      	movs	r2, #32
 8001800:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001804:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001808:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001810:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
 8001816:	e01e      	b.n	8001856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	699c      	ldr	r4, [r3, #24]
 800181c:	ea26 0404 	bic.w	r4, r6, r4
 8001820:	b2a4      	uxth	r4, r4
 8001822:	3c00      	subs	r4, #0
 8001824:	bf18      	it	ne
 8001826:	2401      	movne	r4, #1
 8001828:	b1a4      	cbz	r4, 8001854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001832:	d1c4      	bne.n	80017be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001834:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001838:	d1d8      	bne.n	80017ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800183a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800183e:	2b01      	cmp	r3, #1
 8001840:	d1ea      	bne.n	8001818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	695c      	ldr	r4, [r3, #20]
 8001846:	ea26 0404 	bic.w	r4, r6, r4
 800184a:	b2a4      	uxth	r4, r4
 800184c:	3c00      	subs	r4, #0
 800184e:	bf18      	it	ne
 8001850:	2401      	movne	r4, #1
 8001852:	e7e9      	b.n	8001828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
}
 8001856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800185c <I2C_MasterRequestWrite>:
{
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	b083      	sub	sp, #12
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	4616      	mov	r6, r2
 8001866:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001868:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800186a:	2b08      	cmp	r3, #8
 800186c:	d00d      	beq.n	800188a <I2C_MasterRequestWrite+0x2e>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d00b      	beq.n	800188a <I2C_MasterRequestWrite+0x2e>
 8001872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001876:	d008      	beq.n	800188a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001878:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800187a:	2b12      	cmp	r3, #18
 800187c:	d10a      	bne.n	8001894 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6813      	ldr	r3, [r2, #0]
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e004      	b.n	8001894 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001894:	9700      	str	r7, [sp, #0]
 8001896:	4633      	mov	r3, r6
 8001898:	2200      	movs	r2, #0
 800189a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff ff4c 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 80018a4:	b980      	cbnz	r0, 80018c8 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a6:	6923      	ldr	r3, [r4, #16]
 80018a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ac:	d116      	bne.n	80018dc <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80018b4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4632      	mov	r2, r6
 80018ba:	4913      	ldr	r1, [pc, #76]	; (8001908 <I2C_MasterRequestWrite+0xac>)
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff ff77 	bl	80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018c2:	b9f8      	cbnz	r0, 8001904 <I2C_MasterRequestWrite+0xa8>
}
 80018c4:	b003      	add	sp, #12
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018d0:	d002      	beq.n	80018d8 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
 80018da:	e7f3      	b.n	80018c4 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018dc:	11eb      	asrs	r3, r5, #7
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	f003 0306 	and.w	r3, r3, #6
 80018e4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80018e8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	4632      	mov	r2, r6
 80018ee:	4907      	ldr	r1, [pc, #28]	; (800190c <I2C_MasterRequestWrite+0xb0>)
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff5d 	bl	80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f6:	b918      	cbnz	r0, 8001900 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	b2ed      	uxtb	r5, r5
 80018fc:	611d      	str	r5, [r3, #16]
 80018fe:	e7da      	b.n	80018b6 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e7df      	b.n	80018c4 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
 8001906:	e7dd      	b.n	80018c4 <I2C_MasterRequestWrite+0x68>
 8001908:	00010002 	.word	0x00010002
 800190c:	00010008 	.word	0x00010008

08001910 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
 8001916:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001920:	d11c      	bne.n	800195c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff fee2 	bl	80016ec <I2C_IsAcknowledgeFailed>
 8001928:	b9d0      	cbnz	r0, 8001960 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800192a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800192e:	d0f3      	beq.n	8001918 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001930:	f7fe fe10 	bl	8000554 <HAL_GetTick>
 8001934:	1b80      	subs	r0, r0, r6
 8001936:	42a8      	cmp	r0, r5
 8001938:	d801      	bhi.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800193a:	2d00      	cmp	r5, #0
 800193c:	d1ec      	bne.n	8001918 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800193e:	2300      	movs	r3, #0
 8001940:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001942:	2220      	movs	r2, #32
 8001944:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001948:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001954:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001958:	2001      	movs	r0, #1
 800195a:	e000      	b.n	800195e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800195c:	2000      	movs	r0, #0
}
 800195e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
 8001962:	e7fc      	b.n	800195e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001964 <I2C_RequestMemoryRead>:
{
 8001964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	4616      	mov	r6, r2
 8001970:	4699      	mov	r9, r3
 8001972:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001974:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001978:	6802      	ldr	r2, [r0, #0]
 800197a:	6813      	ldr	r3, [r2, #0]
 800197c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001980:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001982:	6803      	ldr	r3, [r0, #0]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800198a:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198c:	f8cd 8000 	str.w	r8, [sp]
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001998:	f7ff fed0 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 800199c:	b970      	cbnz	r0, 80019bc <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800199e:	fa5f fa85 	uxtb.w	sl, r5
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80019a8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019aa:	4643      	mov	r3, r8
 80019ac:	463a      	mov	r2, r7
 80019ae:	4941      	ldr	r1, [pc, #260]	; (8001ab4 <I2C_RequestMemoryRead+0x150>)
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff fefd 	bl	80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b6:	b168      	cbz	r0, 80019d4 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
 80019ba:	e008      	b.n	80019ce <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019c4:	d002      	beq.n	80019cc <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ca:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80019cc:	2003      	movs	r0, #3
}
 80019ce:	b004      	add	sp, #16
 80019d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d4:	2300      	movs	r3, #0
 80019d6:	9303      	str	r3, [sp, #12]
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	9203      	str	r2, [sp, #12]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	9303      	str	r3, [sp, #12]
 80019e2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e4:	4642      	mov	r2, r8
 80019e6:	4639      	mov	r1, r7
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff ff91 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ee:	b980      	cbnz	r0, 8001a12 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019f0:	f1b9 0f01 	cmp.w	r9, #1
 80019f4:	d118      	bne.n	8001a28 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	b2f6      	uxtb	r6, r6
 80019fa:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fc:	4642      	mov	r2, r8
 80019fe:	4639      	mov	r1, r7
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff ff85 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a06:	b368      	cbz	r0, 8001a64 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d024      	beq.n	8001a58 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e7dd      	b.n	80019ce <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d001      	beq.n	8001a1c <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e7d8      	b.n	80019ce <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e7f7      	b.n	8001a18 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	0a32      	lsrs	r2, r6, #8
 8001a2c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2e:	4642      	mov	r2, r8
 8001a30:	4639      	mov	r1, r7
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff ff6c 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a38:	b918      	cbnz	r0, 8001a42 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	b2f6      	uxtb	r6, r6
 8001a3e:	611e      	str	r6, [r3, #16]
 8001a40:	e7dc      	b.n	80019fc <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d001      	beq.n	8001a4c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8001a48:	2001      	movs	r0, #1
 8001a4a:	e7c0      	b.n	80019ce <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	6822      	ldr	r2, [r4, #0]
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e7f7      	b.n	8001a48 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e7d4      	b.n	8001a0e <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a6e:	f8cd 8000 	str.w	r8, [sp]
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fe5e 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 8001a80:	b968      	cbnz	r0, 8001a9e <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a82:	6822      	ldr	r2, [r4, #0]
 8001a84:	f04a 0301 	orr.w	r3, sl, #1
 8001a88:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a8a:	4643      	mov	r3, r8
 8001a8c:	463a      	mov	r2, r7
 8001a8e:	4909      	ldr	r1, [pc, #36]	; (8001ab4 <I2C_RequestMemoryRead+0x150>)
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff fe8d 	bl	80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d099      	beq.n	80019ce <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	e797      	b.n	80019ce <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001aa6:	d002      	beq.n	8001aae <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aac:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001aae:	2003      	movs	r0, #3
 8001ab0:	e78d      	b.n	80019ce <I2C_RequestMemoryRead+0x6a>
 8001ab2:	bf00      	nop
 8001ab4:	00010002 	.word	0x00010002

08001ab8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f013 0f04 	tst.w	r3, #4
 8001ac8:	d11c      	bne.n	8001b04 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff fe0e 	bl	80016ec <I2C_IsAcknowledgeFailed>
 8001ad0:	b9d0      	cbnz	r0, 8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001ad2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ad6:	d0f3      	beq.n	8001ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad8:	f7fe fd3c 	bl	8000554 <HAL_GetTick>
 8001adc:	1b80      	subs	r0, r0, r6
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d801      	bhi.n	8001ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	d1ec      	bne.n	8001ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001aea:	2220      	movs	r2, #32
 8001aec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001afc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001b00:	2001      	movs	r0, #1
 8001b02:	e000      	b.n	8001b06 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001b04:	2000      	movs	r0, #0
}
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e7fc      	b.n	8001b06 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	4605      	mov	r5, r0
 8001b10:	460c      	mov	r4, r1
 8001b12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b1c:	d129      	bne.n	8001b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b1e:	6959      	ldr	r1, [r3, #20]
 8001b20:	f011 0f10 	tst.w	r1, #16
 8001b24:	d115      	bne.n	8001b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b26:	f7fe fd15 	bl	8000554 <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	42a0      	cmp	r0, r4
 8001b2e:	d801      	bhi.n	8001b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001b30:	2c00      	cmp	r4, #0
 8001b32:	d1ef      	bne.n	8001b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001b44:	f042 0220 	orr.w	r2, r2, #32
 8001b48:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b4a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
}
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b52:	f06f 0210 	mvn.w	r2, #16
 8001b56:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b62:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b66:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001b68:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b6a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	e7ee      	b.n	8001b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8001b72:	2000      	movs	r0, #0
 8001b74:	e7ec      	b.n	8001b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001b78 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f000 80cc 	beq.w	8001d16 <HAL_I2C_Init+0x19e>
{
 8001b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b80:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d077      	beq.n	8001c7a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8a:	2324      	movs	r3, #36	; 0x24
 8001b8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001b90:	6822      	ldr	r2, [r4, #0]
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bac:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bae:	f001 fb59 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb2:	6862      	ldr	r2, [r4, #4]
 8001bb4:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <HAL_I2C_Init+0x1a8>)
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d864      	bhi.n	8001c84 <HAL_I2C_Init+0x10c>
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_I2C_Init+0x1ac>)
 8001bbc:	4298      	cmp	r0, r3
 8001bbe:	bf8c      	ite	hi
 8001bc0:	2300      	movhi	r3, #0
 8001bc2:	2301      	movls	r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 80a8 	bne.w	8001d1a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001bca:	4d57      	ldr	r5, [pc, #348]	; (8001d28 <HAL_I2C_Init+0x1b0>)
 8001bcc:	fba5 3500 	umull	r3, r5, r5, r0
 8001bd0:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bd2:	6826      	ldr	r6, [r4, #0]
 8001bd4:	6871      	ldr	r1, [r6, #4]
 8001bd6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001bda:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8001bde:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001be0:	6821      	ldr	r1, [r4, #0]
 8001be2:	6a0b      	ldr	r3, [r1, #32]
 8001be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be8:	6865      	ldr	r5, [r4, #4]
 8001bea:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <HAL_I2C_Init+0x1a8>)
 8001bec:	4295      	cmp	r5, r2
 8001bee:	d84f      	bhi.n	8001c90 <HAL_I2C_Init+0x118>
 8001bf0:	1c7a      	adds	r2, r7, #1
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bf6:	6825      	ldr	r5, [r4, #0]
 8001bf8:	69e9      	ldr	r1, [r5, #28]
 8001bfa:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001bfe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <HAL_I2C_Init+0x1a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d84c      	bhi.n	8001ca4 <HAL_I2C_Init+0x12c>
 8001c0a:	3801      	subs	r0, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c12:	3001      	adds	r0, #1
 8001c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c18:	4218      	tst	r0, r3
 8001c1a:	d078      	beq.n	8001d0e <HAL_I2C_Init+0x196>
 8001c1c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c20:	430b      	orrs	r3, r1
 8001c22:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c24:	6821      	ldr	r1, [r4, #0]
 8001c26:	680b      	ldr	r3, [r1, #0]
 8001c28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001c2c:	69e2      	ldr	r2, [r4, #28]
 8001c2e:	6a20      	ldr	r0, [r4, #32]
 8001c30:	4302      	orrs	r2, r0
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c36:	6821      	ldr	r1, [r4, #0]
 8001c38:	688b      	ldr	r3, [r1, #8]
 8001c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c42:	6922      	ldr	r2, [r4, #16]
 8001c44:	68e0      	ldr	r0, [r4, #12]
 8001c46:	4302      	orrs	r2, r0
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c4c:	6821      	ldr	r1, [r4, #0]
 8001c4e:	68cb      	ldr	r3, [r1, #12]
 8001c50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c54:	6962      	ldr	r2, [r4, #20]
 8001c56:	69a0      	ldr	r0, [r4, #24]
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c72:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001c7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c7e:	f002 fcad 	bl	80045dc <HAL_I2C_MspInit>
 8001c82:	e782      	b.n	8001b8a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_I2C_Init+0x1b4>)
 8001c86:	4298      	cmp	r0, r3
 8001c88:	bf8c      	ite	hi
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	e799      	b.n	8001bc4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c94:	fb02 f207 	mul.w	r2, r2, r7
 8001c98:	4d25      	ldr	r5, [pc, #148]	; (8001d30 <HAL_I2C_Init+0x1b8>)
 8001c9a:	fba5 5202 	umull	r5, r2, r5, r2
 8001c9e:	0992      	lsrs	r2, r2, #6
 8001ca0:	3201      	adds	r2, #1
 8001ca2:	e7a6      	b.n	8001bf2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca4:	68a2      	ldr	r2, [r4, #8]
 8001ca6:	b9ba      	cbnz	r2, 8001cd8 <HAL_I2C_Init+0x160>
 8001ca8:	1e46      	subs	r6, r0, #1
 8001caa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001cae:	fbb6 f6f7 	udiv	r6, r6, r7
 8001cb2:	3601      	adds	r6, #1
 8001cb4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001cb8:	fab6 f686 	clz	r6, r6
 8001cbc:	0976      	lsrs	r6, r6, #5
 8001cbe:	bb46      	cbnz	r6, 8001d12 <HAL_I2C_Init+0x19a>
 8001cc0:	b9c2      	cbnz	r2, 8001cf4 <HAL_I2C_Init+0x17c>
 8001cc2:	1e42      	subs	r2, r0, #1
 8001cc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ccc:	3201      	adds	r2, #1
 8001cce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001cd2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001cd6:	e7a3      	b.n	8001c20 <HAL_I2C_Init+0xa8>
 8001cd8:	1e46      	subs	r6, r0, #1
 8001cda:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001cde:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001ce2:	fbb6 f6f7 	udiv	r6, r6, r7
 8001ce6:	3601      	adds	r6, #1
 8001ce8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001cec:	fab6 f686 	clz	r6, r6
 8001cf0:	0976      	lsrs	r6, r6, #5
 8001cf2:	e7e4      	b.n	8001cbe <HAL_I2C_Init+0x146>
 8001cf4:	1e42      	subs	r2, r0, #1
 8001cf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d02:	3201      	adds	r2, #1
 8001d04:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d08:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001d0c:	e788      	b.n	8001c20 <HAL_I2C_Init+0xa8>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e786      	b.n	8001c20 <HAL_I2C_Init+0xa8>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e784      	b.n	8001c20 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
}
 8001d18:	4770      	bx	lr
    return HAL_ERROR;
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	e7ac      	b.n	8001c78 <HAL_I2C_Init+0x100>
 8001d1e:	bf00      	nop
 8001d20:	000186a0 	.word	0x000186a0
 8001d24:	001e847f 	.word	0x001e847f
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	003d08ff 	.word	0x003d08ff
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <HAL_I2C_Master_Transmit>:
{
 8001d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460f      	mov	r7, r1
 8001d3e:	4691      	mov	r9, r2
 8001d40:	4698      	mov	r8, r3
 8001d42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7fe fc06 	bl	8000554 <HAL_GetTick>
 8001d48:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001d4e:	b2c0      	uxtb	r0, r0
 8001d50:	2820      	cmp	r0, #32
 8001d52:	d004      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001d54:	2702      	movs	r7, #2
}
 8001d56:	4638      	mov	r0, r7
 8001d58:	b005      	add	sp, #20
 8001d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d5e:	9500      	str	r5, [sp, #0]
 8001d60:	2319      	movs	r3, #25
 8001d62:	2201      	movs	r2, #1
 8001d64:	494f      	ldr	r1, [pc, #316]	; (8001ea4 <HAL_I2C_Master_Transmit+0x170>)
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff fce8 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	f040 8092 	bne.w	8001e96 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001d72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	f000 808f 	beq.w	8001e9a <HAL_I2C_Master_Transmit+0x166>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f012 0f01 	tst.w	r2, #1
 8001d8a:	d103      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d9c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d9e:	2321      	movs	r3, #33	; 0x21
 8001da0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001da4:	2310      	movs	r3, #16
 8001da6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001dae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001db8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_I2C_Master_Transmit+0x174>)
 8001dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dbe:	462b      	mov	r3, r5
 8001dc0:	4632      	mov	r2, r6
 8001dc2:	4639      	mov	r1, r7
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff fd49 	bl	800185c <I2C_MasterRequestWrite>
 8001dca:	4607      	mov	r7, r0
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d166      	bne.n	8001e9e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9303      	str	r3, [sp, #12]
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	9203      	str	r2, [sp, #12]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	9303      	str	r3, [sp, #12]
 8001dde:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001de0:	e011      	b.n	8001e06 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001de8:	2701      	movs	r7, #1
 8001dea:	e7b4      	b.n	8001d56 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	6822      	ldr	r2, [r4, #0]
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e7f7      	b.n	8001de8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df8:	462a      	mov	r2, r5
 8001dfa:	4631      	mov	r1, r6
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fe5b 	bl	8001ab8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d12e      	bne.n	8001e64 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001e06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d036      	beq.n	8001e7a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0c:	462a      	mov	r2, r5
 8001e0e:	4631      	mov	r1, r6
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff fd7d 	bl	8001910 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d1e3      	bne.n	8001de2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e24:	1c4b      	adds	r3, r1, #1
 8001e26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	6950      	ldr	r0, [r2, #20]
 8001e3e:	f010 0f04 	tst.w	r0, #4
 8001e42:	d0d9      	beq.n	8001df8 <HAL_I2C_Master_Transmit+0xc4>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0d7      	beq.n	8001df8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e48:	784b      	ldrb	r3, [r1, #1]
 8001e4a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e4e:	3301      	adds	r3, #1
 8001e50:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001e52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001e5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	8523      	strh	r3, [r4, #40]	; 0x28
 8001e62:	e7c9      	b.n	8001df8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001e6a:	2701      	movs	r7, #1
 8001e6c:	e773      	b.n	8001d56 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e7f7      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	2320      	movs	r3, #32
 8001e86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001e90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001e94:	e75f      	b.n	8001d56 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001e96:	2702      	movs	r7, #2
 8001e98:	e75d      	b.n	8001d56 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001e9a:	2702      	movs	r7, #2
 8001e9c:	e75b      	b.n	8001d56 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001e9e:	2701      	movs	r7, #1
 8001ea0:	e759      	b.n	8001d56 <HAL_I2C_Master_Transmit+0x22>
 8001ea2:	bf00      	nop
 8001ea4:	00100002 	.word	0x00100002
 8001ea8:	ffff0000 	.word	0xffff0000

08001eac <HAL_I2C_Mem_Read>:
{
 8001eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460f      	mov	r7, r1
 8001eb6:	4690      	mov	r8, r2
 8001eb8:	4699      	mov	r9, r3
 8001eba:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7fe fb4a 	bl	8000554 <HAL_GetTick>
 8001ec0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001ec6:	b2c0      	uxtb	r0, r0
 8001ec8:	2820      	cmp	r0, #32
 8001eca:	d004      	beq.n	8001ed6 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001ecc:	2702      	movs	r7, #2
}
 8001ece:	4638      	mov	r0, r7
 8001ed0:	b007      	add	sp, #28
 8001ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed6:	9500      	str	r5, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	499d      	ldr	r1, [pc, #628]	; (8002154 <HAL_I2C_Mem_Read+0x2a8>)
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff fc2c 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	f040 8144 	bne.w	8002172 <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 8001eea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	f000 8141 	beq.w	8002176 <HAL_I2C_Mem_Read+0x2ca>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f012 0f01 	tst.w	r2, #1
 8001f02:	d103      	bne.n	8001f0c <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	6813      	ldr	r3, [r2, #0]
 8001f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f14:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f16:	2322      	movs	r3, #34	; 0x22
 8001f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f28:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f2a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001f2e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f32:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_I2C_Mem_Read+0x2ac>)
 8001f36:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f38:	9501      	str	r5, [sp, #4]
 8001f3a:	9600      	str	r6, [sp, #0]
 8001f3c:	464b      	mov	r3, r9
 8001f3e:	4642      	mov	r2, r8
 8001f40:	4639      	mov	r1, r7
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff fd0e 	bl	8001964 <I2C_RequestMemoryRead>
 8001f48:	4607      	mov	r7, r0
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	f040 8115 	bne.w	800217a <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 8001f50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f52:	b95b      	cbnz	r3, 8001f6c <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	9202      	str	r2, [sp, #8]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	9202      	str	r2, [sp, #8]
 8001f60:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e098      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d00a      	beq.n	8001f86 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d01a      	beq.n	8001faa <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f74:	2300      	movs	r3, #0
 8001f76:	9305      	str	r3, [sp, #20]
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	9205      	str	r2, [sp, #20]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	9305      	str	r3, [sp, #20]
 8001f82:	9b05      	ldr	r3, [sp, #20]
 8001f84:	e08b      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f90:	2300      	movs	r3, #0
 8001f92:	9303      	str	r3, [sp, #12]
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	9203      	str	r2, [sp, #12]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	9203      	str	r2, [sp, #12]
 8001f9e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e079      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	6822      	ldr	r2, [r4, #0]
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fb4:	6822      	ldr	r2, [r4, #0]
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fbc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	9304      	str	r3, [sp, #16]
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	9204      	str	r2, [sp, #16]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	9304      	str	r3, [sp, #16]
 8001fcc:	9b04      	ldr	r3, [sp, #16]
 8001fce:	e066      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	462a      	mov	r2, r5
 8001fd2:	4631      	mov	r1, r6
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fd99 	bl	8001b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	f040 80cf 	bne.w	800217e <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fe6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fea:	3301      	adds	r3, #1
 8001fec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001fee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ff4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001ffe:	e04e      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002000:	9500      	str	r5, [sp, #0]
 8002002:	4633      	mov	r3, r6
 8002004:	2200      	movs	r2, #0
 8002006:	4955      	ldr	r1, [pc, #340]	; (800215c <HAL_I2C_Mem_Read+0x2b0>)
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff fb97 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 800200e:	2800      	cmp	r0, #0
 8002010:	f040 80b7 	bne.w	8002182 <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002024:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002026:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002028:	1c53      	adds	r3, r2, #1
 800202a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800202c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29b      	uxth	r3, r3
 800203a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002048:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800204e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002058:	e021      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800206a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800206c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800206e:	1c53      	adds	r3, r2, #1
 8002070:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002072:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002078:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29b      	uxth	r3, r3
 8002080:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208a:	3301      	adds	r3, #1
 800208c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800208e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002090:	3b01      	subs	r3, #1
 8002092:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002094:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800209e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d05d      	beq.n	8002160 <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d82b      	bhi.n	8002100 <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d091      	beq.n	8001fd0 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d0a7      	beq.n	8002000 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b0:	9500      	str	r5, [sp, #0]
 80020b2:	4633      	mov	r3, r6
 80020b4:	2200      	movs	r2, #0
 80020b6:	4929      	ldr	r1, [pc, #164]	; (800215c <HAL_I2C_Mem_Read+0x2b0>)
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff fb3f 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d161      	bne.n	8002186 <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ca:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020d2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80020d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80020da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020dc:	3b01      	subs	r3, #1
 80020de:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80020e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ea:	9500      	str	r5, [sp, #0]
 80020ec:	4633      	mov	r3, r6
 80020ee:	2200      	movs	r2, #0
 80020f0:	491a      	ldr	r1, [pc, #104]	; (800215c <HAL_I2C_Mem_Read+0x2b0>)
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff fb22 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d0ae      	beq.n	800205a <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 80020fc:	2701      	movs	r7, #1
 80020fe:	e6e6      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002100:	462a      	mov	r2, r5
 8002102:	4631      	mov	r1, r6
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff fd01 	bl	8001b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800210a:	2800      	cmp	r0, #0
 800210c:	d13d      	bne.n	800218a <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002114:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002116:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002118:	1c53      	adds	r3, r2, #1
 800211a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800211c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	6959      	ldr	r1, [r3, #20]
 8002130:	f011 0f04 	tst.w	r1, #4
 8002134:	d0b3      	beq.n	800209e <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800213a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800213c:	3301      	adds	r3, #1
 800213e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002140:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002142:	3b01      	subs	r3, #1
 8002144:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29b      	uxth	r3, r3
 800214e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002150:	e7a5      	b.n	800209e <HAL_I2C_Mem_Read+0x1f2>
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000
 800215c:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	2320      	movs	r3, #32
 8002162:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800216c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002170:	e6ad      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8002172:	2702      	movs	r7, #2
 8002174:	e6ab      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8002176:	2702      	movs	r7, #2
 8002178:	e6a9      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800217a:	2701      	movs	r7, #1
 800217c:	e6a7      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800217e:	2701      	movs	r7, #1
 8002180:	e6a5      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8002182:	2701      	movs	r7, #1
 8002184:	e6a3      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8002186:	2701      	movs	r7, #1
 8002188:	e6a1      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 800218a:	2701      	movs	r7, #1
 800218c:	e69f      	b.n	8001ece <HAL_I2C_Mem_Read+0x22>
 800218e:	bf00      	nop

08002190 <HAL_I2C_MasterTxCpltCallback>:
}
 8002190:	4770      	bx	lr

08002192 <HAL_I2C_MasterRxCpltCallback>:
}
 8002192:	4770      	bx	lr

08002194 <HAL_I2C_SlaveTxCpltCallback>:
}
 8002194:	4770      	bx	lr

08002196 <I2C_SlaveTransmit_TXE>:
{
 8002196:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002198:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800219c:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800219e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b183      	cbz	r3, 80021c6 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80021a6:	6803      	ldr	r3, [r0, #0]
 80021a8:	7809      	ldrb	r1, [r1, #0]
 80021aa:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80021ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021ae:	3301      	adds	r3, #1
 80021b0:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80021b2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b90b      	cbnz	r3, 80021c6 <I2C_SlaveTransmit_TXE+0x30>
 80021c2:	2a29      	cmp	r2, #41	; 0x29
 80021c4:	d000      	beq.n	80021c8 <I2C_SlaveTransmit_TXE+0x32>
}
 80021c6:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021c8:	6802      	ldr	r2, [r0, #0]
 80021ca:	6853      	ldr	r3, [r2, #4]
 80021cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021d2:	2321      	movs	r3, #33	; 0x21
 80021d4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80021d6:	2328      	movs	r3, #40	; 0x28
 80021d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021dc:	f7ff ffda 	bl	8002194 <HAL_I2C_SlaveTxCpltCallback>
}
 80021e0:	e7f1      	b.n	80021c6 <I2C_SlaveTransmit_TXE+0x30>

080021e2 <HAL_I2C_SlaveRxCpltCallback>:
}
 80021e2:	4770      	bx	lr

080021e4 <I2C_SlaveReceive_RXNE>:
{
 80021e4:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021ea:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80021ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b183      	cbz	r3, 8002214 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	6803      	ldr	r3, [r0, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021f8:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80021fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021fc:	3301      	adds	r3, #1
 80021fe:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002200:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800220a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	b90b      	cbnz	r3, 8002214 <I2C_SlaveReceive_RXNE+0x30>
 8002210:	2a2a      	cmp	r2, #42	; 0x2a
 8002212:	d000      	beq.n	8002216 <I2C_SlaveReceive_RXNE+0x32>
}
 8002214:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002216:	6802      	ldr	r2, [r0, #0]
 8002218:	6853      	ldr	r3, [r2, #4]
 800221a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800221e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002220:	2322      	movs	r3, #34	; 0x22
 8002222:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002224:	2328      	movs	r3, #40	; 0x28
 8002226:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800222a:	f7ff ffda 	bl	80021e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800222e:	e7f1      	b.n	8002214 <I2C_SlaveReceive_RXNE+0x30>

08002230 <HAL_I2C_AddrCallback>:
}
 8002230:	4770      	bx	lr

08002232 <I2C_Slave_ADDR>:
{
 8002232:	b500      	push	{lr}
 8002234:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002236:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800223a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800223e:	2b28      	cmp	r3, #40	; 0x28
 8002240:	d00c      	beq.n	800225c <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	6802      	ldr	r2, [r0, #0]
 8002248:	6951      	ldr	r1, [r2, #20]
 800224a:	9101      	str	r1, [sp, #4]
 800224c:	6992      	ldr	r2, [r2, #24]
 800224e:	9201      	str	r2, [sp, #4]
 8002250:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8002252:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002256:	b003      	add	sp, #12
 8002258:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800225c:	6802      	ldr	r2, [r0, #0]
 800225e:	6853      	ldr	r3, [r2, #4]
 8002260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002264:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002266:	f011 0f04 	tst.w	r1, #4
 800226a:	d00b      	beq.n	8002284 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800226c:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800226e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002272:	d109      	bne.n	8002288 <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002274:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8002276:	2100      	movs	r1, #0
 8002278:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff ffd7 	bl	8002230 <HAL_I2C_AddrCallback>
 8002282:	e7e8      	b.n	8002256 <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002284:	2301      	movs	r3, #1
 8002286:	e7f2      	b.n	800226e <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002288:	8b02      	ldrh	r2, [r0, #24]
 800228a:	e7f4      	b.n	8002276 <I2C_Slave_ADDR+0x44>

0800228c <HAL_I2C_ListenCpltCallback>:
}
 800228c:	4770      	bx	lr

0800228e <HAL_I2C_MemTxCpltCallback>:
}
 800228e:	4770      	bx	lr

08002290 <I2C_MasterTransmit_BTF>:
{
 8002290:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002292:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002294:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b21      	cmp	r3, #33	; 0x21
 800229c:	d000      	beq.n	80022a0 <I2C_MasterTransmit_BTF+0x10>
}
 800229e:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 80022a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b163      	cbz	r3, 80022c0 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80022a8:	6803      	ldr	r3, [r0, #0]
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80022ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022b0:	3301      	adds	r3, #1
 80022b2:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80022b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	8543      	strh	r3, [r0, #42]	; 0x2a
 80022be:	e7ee      	b.n	800229e <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022c0:	2a08      	cmp	r2, #8
 80022c2:	d004      	beq.n	80022ce <I2C_MasterTransmit_BTF+0x3e>
 80022c4:	2a20      	cmp	r2, #32
 80022c6:	d002      	beq.n	80022ce <I2C_MasterTransmit_BTF+0x3e>
 80022c8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80022cc:	d119      	bne.n	8002302 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ce:	6802      	ldr	r2, [r0, #0]
 80022d0:	6853      	ldr	r3, [r2, #4]
 80022d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022d6:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	6802      	ldr	r2, [r0, #0]
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e0:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	2320      	movs	r3, #32
 80022e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ec:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d015      	beq.n	8002322 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022fc:	f7ff ff48 	bl	8002190 <HAL_I2C_MasterTxCpltCallback>
}
 8002300:	e7cd      	b.n	800229e <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002302:	6802      	ldr	r2, [r0, #0]
 8002304:	6853      	ldr	r3, [r2, #4]
 8002306:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800230a:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800230c:	2311      	movs	r3, #17
 800230e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	2300      	movs	r3, #0
 8002312:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002316:	2320      	movs	r3, #32
 8002318:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800231c:	f7ff ff38 	bl	8002190 <HAL_I2C_MasterTxCpltCallback>
 8002320:	e7bd      	b.n	800229e <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002328:	f7ff ffb1 	bl	800228e <HAL_I2C_MemTxCpltCallback>
 800232c:	e7b7      	b.n	800229e <I2C_MasterTransmit_BTF+0xe>

0800232e <I2C_MemoryTransmit_TXE_BTF>:
{
 800232e:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002330:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8002334:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002336:	b99a      	cbnz	r2, 8002360 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002338:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d008      	beq.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800233e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002340:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002344:	6802      	ldr	r2, [r0, #0]
 8002346:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8002348:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800234a:	3301      	adds	r3, #1
 800234c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800234e:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002350:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002352:	6802      	ldr	r2, [r0, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8002358:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800235a:	3302      	adds	r3, #2
 800235c:	6503      	str	r3, [r0, #80]	; 0x50
 800235e:	e7f6      	b.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002360:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8002362:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002364:	2a01      	cmp	r2, #1
 8002366:	d023      	beq.n	80023b0 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8002368:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800236a:	2a02      	cmp	r2, #2
 800236c:	d1ef      	bne.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800236e:	2b22      	cmp	r3, #34	; 0x22
 8002370:	d026      	beq.n	80023c0 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002372:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002374:	b292      	uxth	r2, r2
 8002376:	b10a      	cbz	r2, 800237c <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8002378:	2b21      	cmp	r3, #33	; 0x21
 800237a:	d02a      	beq.n	80023d2 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800237c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800237e:	b292      	uxth	r2, r2
 8002380:	2a00      	cmp	r2, #0
 8002382:	d1e4      	bne.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002384:	2b21      	cmp	r3, #33	; 0x21
 8002386:	d1e2      	bne.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002388:	6802      	ldr	r2, [r0, #0]
 800238a:	6853      	ldr	r3, [r2, #4]
 800238c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002390:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	6802      	ldr	r2, [r0, #0]
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800239c:	2300      	movs	r3, #0
 800239e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	2220      	movs	r2, #32
 80023a2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023aa:	f7ff ff70 	bl	800228e <HAL_I2C_MemTxCpltCallback>
}
 80023ae:	e7ce      	b.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80023b2:	6802      	ldr	r2, [r0, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80023b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023ba:	3301      	adds	r3, #1
 80023bc:	6503      	str	r3, [r0, #80]	; 0x50
 80023be:	e7c6      	b.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023c0:	6802      	ldr	r2, [r0, #0]
 80023c2:	6813      	ldr	r3, [r2, #0]
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80023ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023cc:	3301      	adds	r3, #1
 80023ce:	6503      	str	r3, [r0, #80]	; 0x50
 80023d0:	e7bd      	b.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	7812      	ldrb	r2, [r2, #0]
 80023d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80023da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023dc:	3301      	adds	r3, #1
 80023de:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80023e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	8543      	strh	r3, [r0, #42]	; 0x2a
 80023ea:	e7b0      	b.n	800234e <I2C_MemoryTransmit_TXE_BTF+0x20>

080023ec <I2C_MasterTransmit_TXE>:
{
 80023ec:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023f2:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023f4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80023f8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023fa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023fc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80023fe:	b909      	cbnz	r1, 8002404 <I2C_MasterTransmit_TXE+0x18>
 8002400:	2b21      	cmp	r3, #33	; 0x21
 8002402:	d004      	beq.n	800240e <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002404:	2b21      	cmp	r3, #33	; 0x21
 8002406:	d03b      	beq.n	8002480 <I2C_MasterTransmit_TXE+0x94>
 8002408:	2a40      	cmp	r2, #64	; 0x40
 800240a:	d037      	beq.n	800247c <I2C_MasterTransmit_TXE+0x90>
}
 800240c:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800240e:	2c08      	cmp	r4, #8
 8002410:	d004      	beq.n	800241c <I2C_MasterTransmit_TXE+0x30>
 8002412:	2c20      	cmp	r4, #32
 8002414:	d002      	beq.n	800241c <I2C_MasterTransmit_TXE+0x30>
 8002416:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800241a:	d119      	bne.n	8002450 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241c:	6802      	ldr	r2, [r0, #0]
 800241e:	6853      	ldr	r3, [r2, #4]
 8002420:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002424:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002426:	6802      	ldr	r2, [r0, #0]
 8002428:	6813      	ldr	r3, [r2, #0]
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002430:	2300      	movs	r3, #0
 8002432:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002434:	2320      	movs	r3, #32
 8002436:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800243a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d015      	beq.n	8002470 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800244a:	f7ff fea1 	bl	8002190 <HAL_I2C_MasterTxCpltCallback>
 800244e:	e7dd      	b.n	800240c <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002450:	6802      	ldr	r2, [r0, #0]
 8002452:	6853      	ldr	r3, [r2, #4]
 8002454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002458:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800245a:	2311      	movs	r3, #17
 800245c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002464:	2320      	movs	r3, #32
 8002466:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800246a:	f7ff fe91 	bl	8002190 <HAL_I2C_MasterTxCpltCallback>
 800246e:	e7cd      	b.n	800240c <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	2300      	movs	r3, #0
 8002472:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002476:	f7ff ff0a 	bl	800228e <HAL_I2C_MemTxCpltCallback>
 800247a:	e7c7      	b.n	800240c <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800247c:	2b22      	cmp	r3, #34	; 0x22
 800247e:	d1c5      	bne.n	800240c <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8002480:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	b92b      	cbnz	r3, 8002492 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002486:	6802      	ldr	r2, [r0, #0]
 8002488:	6853      	ldr	r3, [r2, #4]
 800248a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248e:	6053      	str	r3, [r2, #4]
 8002490:	e7bc      	b.n	800240c <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002492:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d00c      	beq.n	80024b6 <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80024a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024a6:	3301      	adds	r3, #1
 80024a8:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 80024aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80024b4:	e7aa      	b.n	800240c <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024b6:	f7ff ff3a 	bl	800232e <I2C_MemoryTransmit_TXE_BTF>
 80024ba:	e7a7      	b.n	800240c <I2C_MasterTransmit_TXE+0x20>

080024bc <HAL_I2C_MemRxCpltCallback>:
}
 80024bc:	4770      	bx	lr

080024be <I2C_MasterReceive_BTF>:
{
 80024be:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80024c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d014      	beq.n	80024f4 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 80024ca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d022      	beq.n	8002518 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 80024d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d039      	beq.n	800254e <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024da:	6803      	ldr	r3, [r0, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024e4:	3301      	adds	r3, #1
 80024e6:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80024e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80024f2:	e010      	b.n	8002516 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024f4:	6802      	ldr	r2, [r0, #0]
 80024f6:	6853      	ldr	r3, [r2, #4]
 80024f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024fc:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002504:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002506:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800250c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002516:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002518:	6801      	ldr	r1, [r0, #0]
 800251a:	684b      	ldr	r3, [r1, #4]
 800251c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002520:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002522:	2a04      	cmp	r2, #4
 8002524:	d006      	beq.n	8002534 <I2C_MasterReceive_BTF+0x76>
 8002526:	2a02      	cmp	r2, #2
 8002528:	d004      	beq.n	8002534 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252a:	6802      	ldr	r2, [r0, #0]
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002532:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800253a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800253c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002542:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	8543      	strh	r3, [r0, #42]	; 0x2a
 800254c:	e7e3      	b.n	8002516 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800254e:	2a01      	cmp	r2, #1
 8002550:	d00b      	beq.n	800256a <I2C_MasterReceive_BTF+0xac>
 8002552:	2a10      	cmp	r2, #16
 8002554:	d009      	beq.n	800256a <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002556:	2a04      	cmp	r2, #4
 8002558:	d038      	beq.n	80025cc <I2C_MasterReceive_BTF+0x10e>
 800255a:	2a02      	cmp	r2, #2
 800255c:	d036      	beq.n	80025cc <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	6802      	ldr	r2, [r0, #0]
 8002560:	6813      	ldr	r3, [r2, #0]
 8002562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e004      	b.n	8002574 <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	6802      	ldr	r2, [r0, #0]
 800256c:	6813      	ldr	r3, [r2, #0]
 800256e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002572:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002574:	6803      	ldr	r3, [r0, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800257a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800257c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800257e:	1c53      	adds	r3, r2, #1
 8002580:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002582:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29b      	uxth	r3, r3
 800258a:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258c:	6803      	ldr	r3, [r0, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8002592:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8002598:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29b      	uxth	r3, r3
 80025a0:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80025a2:	6802      	ldr	r2, [r0, #0]
 80025a4:	6853      	ldr	r3, [r2, #4]
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	2320      	movs	r3, #32
 80025ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025b2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d00d      	beq.n	80025d8 <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025c2:	2312      	movs	r3, #18
 80025c4:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025c6:	f7ff fde4 	bl	8002192 <HAL_I2C_MasterRxCpltCallback>
 80025ca:	e7a4      	b.n	8002516 <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025cc:	6802      	ldr	r2, [r0, #0]
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e7cd      	b.n	8002574 <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025e0:	f7ff ff6c 	bl	80024bc <HAL_I2C_MemRxCpltCallback>
 80025e4:	e797      	b.n	8002516 <I2C_MasterReceive_BTF+0x58>

080025e6 <HAL_I2C_ErrorCallback>:
}
 80025e6:	4770      	bx	lr

080025e8 <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b22      	cmp	r3, #34	; 0x22
 80025f0:	d000      	beq.n	80025f4 <I2C_MasterReceive_RXNE+0xc>
 80025f2:	4770      	bx	lr
{
 80025f4:	b510      	push	{r4, lr}
 80025f6:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 80025f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d916      	bls.n	800262e <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	6803      	ldr	r3, [r0, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002606:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002608:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800260a:	3301      	adds	r3, #1
 800260c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800260e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29b      	uxth	r3, r3
 8002616:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002618:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d000      	beq.n	8002622 <I2C_MasterReceive_RXNE+0x3a>
}
 8002620:	bd10      	pop	{r4, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002622:	6802      	ldr	r2, [r0, #0]
 8002624:	6853      	ldr	r3, [r2, #4]
 8002626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800262a:	6053      	str	r3, [r2, #4]
 800262c:	e7f8      	b.n	8002620 <I2C_MasterReceive_RXNE+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800262e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002630:	2a02      	cmp	r2, #2
 8002632:	d0f5      	beq.n	8002620 <I2C_MasterReceive_RXNE+0x38>
 8002634:	2b01      	cmp	r3, #1
 8002636:	d8f3      	bhi.n	8002620 <I2C_MasterReceive_RXNE+0x38>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002638:	f7ff f834 	bl	80016a4 <I2C_WaitOnSTOPRequestThroughIT>
 800263c:	2800      	cmp	r0, #0
 800263e:	d12e      	bne.n	800269e <I2C_MasterReceive_RXNE+0xb6>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002648:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6853      	ldr	r3, [r2, #4]
 800264e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002652:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800265a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800265c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800265e:	3301      	adds	r3, #1
 8002660:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002662:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800266c:	2320      	movs	r3, #32
 800266e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002672:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d008      	beq.n	800268e <I2C_MasterReceive_RXNE+0xa6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	2300      	movs	r3, #0
 800267e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002682:	2312      	movs	r3, #18
 8002684:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fd83 	bl	8002192 <HAL_I2C_MasterRxCpltCallback>
 800268c:	e7c8      	b.n	8002620 <I2C_MasterReceive_RXNE+0x38>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002694:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff ff10 	bl	80024bc <HAL_I2C_MemRxCpltCallback>
 800269c:	e7c0      	b.n	8002620 <I2C_MasterReceive_RXNE+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	6853      	ldr	r3, [r2, #4]
 80026a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a6:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b2:	3301      	adds	r3, #1
 80026b4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80026b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29b      	uxth	r3, r3
 80026be:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	2320      	movs	r3, #32
 80026c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff ff8a 	bl	80025e6 <HAL_I2C_ErrorCallback>
}
 80026d2:	e7a5      	b.n	8002620 <I2C_MasterReceive_RXNE+0x38>

080026d4 <HAL_I2C_AbortCpltCallback>:
}
 80026d4:	4770      	bx	lr
	...

080026d8 <I2C_DMAAbort>:
{
 80026d8:	b500      	push	{lr}
 80026da:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026e2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80026e6:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <I2C_DMAAbort+0xdc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	08db      	lsrs	r3, r3, #3
 80026ee:	4932      	ldr	r1, [pc, #200]	; (80027b8 <I2C_DMAAbort+0xe0>)
 80026f0:	fba1 1303 	umull	r1, r3, r1, r3
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80026fe:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	b143      	cbz	r3, 8002716 <I2C_DMAAbort+0x3e>
    count--;
 8002704:	9b01      	ldr	r3, [sp, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800270a:	6803      	ldr	r3, [r0, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002712:	d1f5      	bne.n	8002700 <I2C_DMAAbort+0x28>
 8002714:	e003      	b.n	800271e <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002716:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800271e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002720:	b10b      	cbz	r3, 8002726 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002722:	2100      	movs	r1, #0
 8002724:	63d9      	str	r1, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8002726:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002728:	b10b      	cbz	r3, 800272e <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800272a:	2100      	movs	r1, #0
 800272c:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	6801      	ldr	r1, [r0, #0]
 8002730:	680b      	ldr	r3, [r1, #0]
 8002732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002736:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800273c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800273e:	b10b      	cbz	r3, 8002744 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002740:	2100      	movs	r1, #0
 8002742:	6519      	str	r1, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8002744:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002746:	b10b      	cbz	r3, 800274c <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002748:	2100      	movs	r1, #0
 800274a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800274c:	6801      	ldr	r1, [r0, #0]
 800274e:	680b      	ldr	r3, [r1, #0]
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002756:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b60      	cmp	r3, #96	; 0x60
 800275e:	d00e      	beq.n	800277e <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002760:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002764:	2a28      	cmp	r2, #40	; 0x28
 8002766:	d014      	beq.n	8002792 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8002768:	2320      	movs	r3, #32
 800276a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800276e:	2300      	movs	r3, #0
 8002770:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002774:	f7ff ff37 	bl	80025e6 <HAL_I2C_ErrorCallback>
}
 8002778:	b003      	add	sp, #12
 800277a:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 800277e:	2320      	movs	r3, #32
 8002780:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002784:	2300      	movs	r3, #0
 8002786:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800278a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800278c:	f7ff ffa2 	bl	80026d4 <HAL_I2C_AbortCpltCallback>
 8002790:	e7f2      	b.n	8002778 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8002792:	6802      	ldr	r2, [r0, #0]
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279c:	6802      	ldr	r2, [r0, #0]
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a4:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027aa:	2328      	movs	r3, #40	; 0x28
 80027ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80027b0:	e7e0      	b.n	8002774 <I2C_DMAAbort+0x9c>
 80027b2:	bf00      	nop
 80027b4:	20000024 	.word	0x20000024
 80027b8:	14f8b589 	.word	0x14f8b589

080027bc <I2C_ITError>:
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80027c6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80027ca:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027cc:	2a10      	cmp	r2, #16
 80027ce:	d036      	beq.n	800283e <I2C_ITError+0x82>
 80027d0:	2a40      	cmp	r2, #64	; 0x40
 80027d2:	d034      	beq.n	800283e <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027d4:	f003 0228 	and.w	r2, r3, #40	; 0x28
 80027d8:	2a28      	cmp	r2, #40	; 0x28
 80027da:	d038      	beq.n	800284e <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6852      	ldr	r2, [r2, #4]
 80027e0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80027e4:	d107      	bne.n	80027f6 <I2C_ITError+0x3a>
 80027e6:	2b60      	cmp	r3, #96	; 0x60
 80027e8:	d005      	beq.n	80027f6 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	2320      	movs	r3, #32
 80027ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002802:	d048      	beq.n	8002896 <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800280c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800280e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d020      	beq.n	800285a <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002818:	4b44      	ldr	r3, [pc, #272]	; (800292c <I2C_ITError+0x170>)
 800281a:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800281c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800281e:	f7fe fbc0 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002822:	2800      	cmp	r0, #0
 8002824:	d049      	beq.n	80028ba <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002830:	2320      	movs	r3, #32
 8002832:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002836:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002838:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800283a:	4798      	blx	r3
 800283c:	e03d      	b.n	80028ba <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800283e:	2b22      	cmp	r3, #34	; 0x22
 8002840:	d1c8      	bne.n	80027d4 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002842:	6821      	ldr	r1, [r4, #0]
 8002844:	680a      	ldr	r2, [r1, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	600a      	str	r2, [r1, #0]
 800284c:	e7c2      	b.n	80027d4 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	2300      	movs	r3, #0
 8002850:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002852:	2328      	movs	r3, #40	; 0x28
 8002854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002858:	e7cf      	b.n	80027fa <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800285a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800285c:	4a33      	ldr	r2, [pc, #204]	; (800292c <I2C_ITError+0x170>)
 800285e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002860:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002862:	f7fe fb9e 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002866:	b340      	cbz	r0, 80028ba <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002870:	d005      	beq.n	800287e <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002876:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002888:	2320      	movs	r3, #32
 800288a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800288e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002890:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002892:	4798      	blx	r3
 8002894:	e011      	b.n	80028ba <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002896:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	2a60      	cmp	r2, #96	; 0x60
 800289e:	d01f      	beq.n	80028e0 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028a6:	d005      	beq.n	80028b4 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80028ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028b0:	3301      	adds	r3, #1
 80028b2:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff fe96 	bl	80025e6 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80028ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80028bc:	f013 0f0f 	tst.w	r3, #15
 80028c0:	d004      	beq.n	80028cc <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	6853      	ldr	r3, [r2, #4]
 80028c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028ca:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80028cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80028d0:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80028d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028d4:	f012 0f04 	tst.w	r2, #4
 80028d8:	d001      	beq.n	80028de <I2C_ITError+0x122>
 80028da:	2b28      	cmp	r3, #40	; 0x28
 80028dc:	d018      	beq.n	8002910 <I2C_ITError+0x154>
}
 80028de:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	2220      	movs	r2, #32
 80028e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e6:	2200      	movs	r2, #0
 80028e8:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028f0:	d005      	beq.n	80028fe <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80028f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028fa:	3301      	adds	r3, #1
 80028fc:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff fee3 	bl	80026d4 <HAL_I2C_AbortCpltCallback>
 800290e:	e7d4      	b.n	80028ba <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <I2C_ITError+0x174>)
 8002912:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002918:	2220      	movs	r2, #32
 800291a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800291e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff fcb2 	bl	800228c <HAL_I2C_ListenCpltCallback>
}
 8002928:	e7d9      	b.n	80028de <I2C_ITError+0x122>
 800292a:	bf00      	nop
 800292c:	080026d9 	.word	0x080026d9
 8002930:	ffff0000 	.word	0xffff0000

08002934 <I2C_Slave_STOPF>:
{
 8002934:	b530      	push	{r4, r5, lr}
 8002936:	b083      	sub	sp, #12
 8002938:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800293a:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800293e:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	6853      	ldr	r3, [r2, #4]
 8002944:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002948:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	6803      	ldr	r3, [r0, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	9201      	str	r2, [sp, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002966:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002968:	6803      	ldr	r3, [r0, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002970:	d038      	beq.n	80029e4 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002972:	2d22      	cmp	r5, #34	; 0x22
 8002974:	d021      	beq.n	80029ba <I2C_Slave_STOPF+0x86>
 8002976:	2d2a      	cmp	r5, #42	; 0x2a
 8002978:	d01f      	beq.n	80029ba <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800297a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	b292      	uxth	r2, r2
 8002982:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002984:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002986:	b292      	uxth	r2, r2
 8002988:	b11a      	cbz	r2, 8002992 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800298a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800298c:	f042 0204 	orr.w	r2, r2, #4
 8002990:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002998:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800299a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800299c:	f7fe fc02 	bl	80011a4 <HAL_DMA_GetState>
 80029a0:	2801      	cmp	r0, #1
 80029a2:	d01f      	beq.n	80029e4 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029a6:	4a44      	ldr	r2, [pc, #272]	; (8002ab8 <I2C_Slave_STOPF+0x184>)
 80029a8:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80029ac:	f7fe faf9 	bl	8000fa2 <HAL_DMA_Abort_IT>
 80029b0:	b1c0      	cbz	r0, 80029e4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80029b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80029b6:	4798      	blx	r3
 80029b8:	e014      	b.n	80029e4 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80029ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	6852      	ldr	r2, [r2, #4]
 80029c0:	b292      	uxth	r2, r2
 80029c2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80029c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029c6:	b292      	uxth	r2, r2
 80029c8:	b11a      	cbz	r2, 80029d2 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029cc:	f042 0204 	orr.w	r2, r2, #4
 80029d0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029dc:	f7fe fbe2 	bl	80011a4 <HAL_DMA_GetState>
 80029e0:	2801      	cmp	r0, #1
 80029e2:	d142      	bne.n	8002a6a <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 80029e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b333      	cbz	r3, 8002a38 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	f012 0f04 	tst.w	r2, #4
 80029f2:	d00a      	beq.n	8002a0a <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80029fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029fc:	3301      	adds	r3, #1
 80029fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a12:	d00a      	beq.n	8002a2a <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a18:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8002a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b11b      	cbz	r3, 8002a38 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a3a:	bb13      	cbnz	r3, 8002a82 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a3c:	2d2a      	cmp	r5, #42	; 0x2a
 8002a3e:	d025      	beq.n	8002a8c <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a40:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b28      	cmp	r3, #40	; 0x28
 8002a48:	d029      	beq.n	8002a9e <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a4c:	2b22      	cmp	r3, #34	; 0x22
 8002a4e:	d001      	beq.n	8002a54 <I2C_Slave_STOPF+0x120>
 8002a50:	2d22      	cmp	r5, #34	; 0x22
 8002a52:	d119      	bne.n	8002a88 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a62:	4620      	mov	r0, r4
 8002a64:	f7ff fbbd 	bl	80021e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a68:	e00e      	b.n	8002a88 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a6c:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <I2C_Slave_STOPF+0x184>)
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a70:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a72:	f7fe fa96 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d0b4      	beq.n	80029e4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002a7e:	4798      	blx	r3
 8002a80:	e7b0      	b.n	80029e4 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff fe9a 	bl	80027bc <I2C_ITError>
}
 8002a88:	b003      	add	sp, #12
 8002a8a:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a90:	2328      	movs	r3, #40	; 0x28
 8002a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff fba3 	bl	80021e2 <HAL_I2C_SlaveRxCpltCallback>
 8002a9c:	e7d0      	b.n	8002a40 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <I2C_Slave_STOPF+0x188>)
 8002aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff fbeb 	bl	800228c <HAL_I2C_ListenCpltCallback>
 8002ab6:	e7e7      	b.n	8002a88 <I2C_Slave_STOPF+0x154>
 8002ab8:	080026d9 	.word	0x080026d9
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <HAL_I2C_EV_IRQHandler>:
{
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ac4:	6802      	ldr	r2, [r0, #0]
 8002ac6:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ac8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002aca:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002ace:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ad0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002ad4:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d013      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x42>
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d011      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07a      	beq.n	8002bda <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ae4:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8002ae6:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae8:	f013 0f02 	tst.w	r3, #2
 8002aec:	d078      	beq.n	8002be0 <HAL_I2C_EV_IRQHandler+0x120>
 8002aee:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002af2:	d075      	beq.n	8002be0 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002af6:	b103      	cbz	r3, 8002afa <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002af8:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff fb99 	bl	8002232 <I2C_Slave_ADDR>
}
 8002b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b02:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b06:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b08:	f011 0701 	ands.w	r7, r1, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_I2C_EV_IRQHandler+0x5a>
 8002b0e:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8002b12:	d0f5      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
 8002b14:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8002b18:	d0f2      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b1a:	b117      	cbz	r7, 8002b22 <HAL_I2C_EV_IRQHandler+0x62>
 8002b1c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002b20:	d129      	bne.n	8002b76 <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b22:	f011 0f08 	tst.w	r1, #8
 8002b26:	d002      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x6e>
 8002b28:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002b2c:	d12a      	bne.n	8002b84 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2e:	f011 0f02 	tst.w	r1, #2
 8002b32:	d002      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0x7a>
 8002b34:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002b38:	d128      	bne.n	8002b8c <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b3a:	f01c 0f04 	tst.w	ip, #4
 8002b3e:	d031      	beq.n	8002ba4 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b40:	6852      	ldr	r2, [r2, #4]
 8002b42:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002b46:	d1db      	bne.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b48:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b4c:	d005      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x9a>
 8002b4e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002b52:	d002      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x9a>
 8002b54:	f011 0f04 	tst.w	r1, #4
 8002b58:	d01c      	beq.n	8002b94 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5a:	f011 0f04 	tst.w	r1, #4
 8002b5e:	d0cf      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
 8002b60:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002b64:	d0cc      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b66:	2821      	cmp	r0, #33	; 0x21
 8002b68:	d018      	beq.n	8002b9c <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d1c8      	bne.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7ff fbdd 	bl	800232e <I2C_MemoryTransmit_TXE_BTF>
 8002b74:	e7c4      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fe fdd1 	bl	800171e <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7fe fc05 	bl	800138c <I2C_Master_SB>
 8002b82:	e7bd      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7fe fc55 	bl	8001434 <I2C_Master_ADD10>
 8002b8a:	e7b9      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7fe fc66 	bl	800145e <I2C_Master_ADDR>
 8002b92:	e7b5      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff fc29 	bl	80023ec <I2C_MasterTransmit_TXE>
 8002b9a:	e7b1      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff fb77 	bl	8002290 <I2C_MasterTransmit_BTF>
 8002ba2:	e7ad      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ba4:	6853      	ldr	r3, [r2, #4]
 8002ba6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002baa:	d1a9      	bne.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bac:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002bb0:	d005      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0xfe>
 8002bb2:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002bb6:	d002      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0xfe>
 8002bb8:	f011 0f04 	tst.w	r1, #4
 8002bbc:	d009      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbe:	f011 0f04 	tst.w	r1, #4
 8002bc2:	d09d      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
 8002bc4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002bc8:	d09a      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f7ff fc77 	bl	80024be <I2C_MasterReceive_BTF>
 8002bd0:	e796      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff fd08 	bl	80025e8 <I2C_MasterReceive_RXNE>
 8002bd8:	e792      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bda:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bdc:	6953      	ldr	r3, [r2, #20]
 8002bde:	e783      	b.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be0:	f013 0f10 	tst.w	r3, #16
 8002be4:	d002      	beq.n	8002bec <HAL_I2C_EV_IRQHandler+0x12c>
 8002be6:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002bea:	d118      	bne.n	8002c1e <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bec:	2821      	cmp	r0, #33	; 0x21
 8002bee:	d01a      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x166>
 8002bf0:	2829      	cmp	r0, #41	; 0x29
 8002bf2:	d018      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002bf8:	d005      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x146>
 8002bfa:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002bfe:	d002      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x146>
 8002c00:	f013 0f04 	tst.w	r3, #4
 8002c04:	d028      	beq.n	8002c58 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c06:	f013 0f04 	tst.w	r3, #4
 8002c0a:	f43f af79 	beq.w	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
 8002c0e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002c12:	f43f af75 	beq.w	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7fe fd34 	bl	8001684 <I2C_SlaveReceive_BTF>
      }
 8002c1c:	e770      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff fe88 	bl	8002934 <I2C_Slave_STOPF>
 8002c24:	e76c      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c2a:	d005      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x178>
 8002c2c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002c30:	d002      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x178>
 8002c32:	f013 0f04 	tst.w	r3, #4
 8002c36:	d00b      	beq.n	8002c50 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c38:	f013 0f04 	tst.w	r3, #4
 8002c3c:	f43f af60 	beq.w	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
 8002c40:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002c44:	f43f af5c 	beq.w	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fe fd0b 	bl	8001664 <I2C_SlaveTransmit_BTF>
 8002c4e:	e757      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff faa0 	bl	8002196 <I2C_SlaveTransmit_TXE>
 8002c56:	e753      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff fac3 	bl	80021e4 <I2C_SlaveReceive_RXNE>
 8002c5e:	e74f      	b.n	8002b00 <HAL_I2C_EV_IRQHandler+0x40>

08002c60 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f000 81df 	beq.w	8003024 <HAL_RCC_OscConfig+0x3c4>
{
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6c:	6803      	ldr	r3, [r0, #0]
 8002c6e:	f013 0f01 	tst.w	r3, #1
 8002c72:	d03b      	beq.n	8002cec <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c74:	4ba6      	ldr	r3, [pc, #664]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d02c      	beq.n	8002cda <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c80:	4ba3      	ldr	r3, [pc, #652]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d021      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8c:	6863      	ldr	r3, [r4, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d04f      	beq.n	8002d34 <HAL_RCC_OscConfig+0xd4>
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c98:	d052      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
 8002c9a:	4b9d      	ldr	r3, [pc, #628]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002caa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d050      	beq.n	8002d54 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fd fc4f 	bl	8000554 <HAL_GetTick>
 8002cb6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb8:	4b95      	ldr	r3, [pc, #596]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002cc0:	d114      	bne.n	8002cec <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc2:	f7fd fc47 	bl	8000554 <HAL_GetTick>
 8002cc6:	1b40      	subs	r0, r0, r5
 8002cc8:	2864      	cmp	r0, #100	; 0x64
 8002cca:	d9f5      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002ccc:	2003      	movs	r0, #3
 8002cce:	e1b0      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd0:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cd8:	d0d8      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cda:	4b8d      	ldr	r3, [pc, #564]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ce2:	d003      	beq.n	8002cec <HAL_RCC_OscConfig+0x8c>
 8002ce4:	6863      	ldr	r3, [r4, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 819e 	beq.w	8003028 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	f013 0f02 	tst.w	r3, #2
 8002cf2:	d054      	beq.n	8002d9e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf4:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f013 0f0c 	tst.w	r3, #12
 8002cfc:	d03e      	beq.n	8002d7c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b84      	ldr	r3, [pc, #528]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d033      	beq.n	8002d72 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d0a:	68e3      	ldr	r3, [r4, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d067      	beq.n	8002de0 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b80      	ldr	r3, [pc, #512]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fd fc1d 	bl	8000554 <HAL_GetTick>
 8002d1a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	4b7c      	ldr	r3, [pc, #496]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f013 0f02 	tst.w	r3, #2
 8002d24:	d153      	bne.n	8002dce <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fd fc15 	bl	8000554 <HAL_GetTick>
 8002d2a:	1b40      	subs	r0, r0, r5
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	d9f5      	bls.n	8002d1c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002d30:	2003      	movs	r0, #3
 8002d32:	e17e      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	4a76      	ldr	r2, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e7b5      	b.n	8002cac <HAL_RCC_OscConfig+0x4c>
 8002d40:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e7ab      	b.n	8002cac <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002d54:	f7fd fbfe 	bl	8000554 <HAL_GetTick>
 8002d58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d62:	d0c3      	beq.n	8002cec <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fd fbf6 	bl	8000554 <HAL_GetTick>
 8002d68:	1b40      	subs	r0, r0, r5
 8002d6a:	2864      	cmp	r0, #100	; 0x64
 8002d6c:	d9f5      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002d6e:	2003      	movs	r0, #3
 8002d70:	e15f      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b67      	ldr	r3, [pc, #412]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d7a:	d1c6      	bne.n	8002d0a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7c:	4b64      	ldr	r3, [pc, #400]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f013 0f02 	tst.w	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_OscConfig+0x12e>
 8002d86:	68e3      	ldr	r3, [r4, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 814f 	bne.w	800302c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4a60      	ldr	r2, [pc, #384]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002d90:	6813      	ldr	r3, [r2, #0]
 8002d92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d96:	6921      	ldr	r1, [r4, #16]
 8002d98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d9c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	f013 0f08 	tst.w	r3, #8
 8002da4:	d040      	beq.n	8002e28 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da6:	6963      	ldr	r3, [r4, #20]
 8002da8:	b363      	cbz	r3, 8002e04 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fd fbd0 	bl	8000554 <HAL_GetTick>
 8002db4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	f013 0f02 	tst.w	r3, #2
 8002dbe:	d133      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fd fbc8 	bl	8000554 <HAL_GetTick>
 8002dc4:	1b40      	subs	r0, r0, r5
 8002dc6:	2802      	cmp	r0, #2
 8002dc8:	d9f5      	bls.n	8002db6 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002dca:	2003      	movs	r0, #3
 8002dcc:	e131      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4a50      	ldr	r2, [pc, #320]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dd6:	6921      	ldr	r1, [r4, #16]
 8002dd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e7de      	b.n	8002d9e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002de6:	f7fd fbb5 	bl	8000554 <HAL_GetTick>
 8002dea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dec:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f013 0f02 	tst.w	r3, #2
 8002df4:	d0d3      	beq.n	8002d9e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fd fbad 	bl	8000554 <HAL_GetTick>
 8002dfa:	1b40      	subs	r0, r0, r5
 8002dfc:	2802      	cmp	r0, #2
 8002dfe:	d9f5      	bls.n	8002dec <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8002e00:	2003      	movs	r0, #3
 8002e02:	e116      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e04:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fd fba3 	bl	8000554 <HAL_GetTick>
 8002e0e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f013 0f02 	tst.w	r3, #2
 8002e18:	d006      	beq.n	8002e28 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fd fb9b 	bl	8000554 <HAL_GetTick>
 8002e1e:	1b40      	subs	r0, r0, r5
 8002e20:	2802      	cmp	r0, #2
 8002e22:	d9f5      	bls.n	8002e10 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8002e24:	2003      	movs	r0, #3
 8002e26:	e104      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	f013 0f04 	tst.w	r3, #4
 8002e2e:	d078      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e52:	2501      	movs	r5, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8002e56:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_RCC_OscConfig+0x2bc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e60:	d021      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d032      	beq.n	8002ece <HAL_RCC_OscConfig+0x26e>
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d036      	beq.n	8002eda <HAL_RCC_OscConfig+0x27a>
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	671a      	str	r2, [r3, #112]	; 0x70
 8002e76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e78:	f022 0204 	bic.w	r2, r2, #4
 8002e7c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d034      	beq.n	8002eee <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd fb66 	bl	8000554 <HAL_GetTick>
 8002e88:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	f013 0f02 	tst.w	r3, #2
 8002e92:	d145      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fd fb5e 	bl	8000554 <HAL_GetTick>
 8002e98:	1b80      	subs	r0, r0, r6
 8002e9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e9e:	4298      	cmp	r0, r3
 8002ea0:	d9f3      	bls.n	8002e8a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	e0c5      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_RCC_OscConfig+0x2bc>)
 8002ea8:	6813      	ldr	r3, [r2, #0]
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002eb0:	f7fd fb50 	bl	8000554 <HAL_GetTick>
 8002eb4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_OscConfig+0x2bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ebe:	d1d0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fd fb48 	bl	8000554 <HAL_GetTick>
 8002ec4:	1b80      	subs	r0, r0, r6
 8002ec6:	2802      	cmp	r0, #2
 8002ec8:	d9f5      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002eca:	2003      	movs	r0, #3
 8002ecc:	e0b1      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002ed0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	e7d1      	b.n	8002e7e <HAL_RCC_OscConfig+0x21e>
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ede:	f042 0204 	orr.w	r2, r2, #4
 8002ee2:	671a      	str	r2, [r3, #112]	; 0x70
 8002ee4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	671a      	str	r2, [r3, #112]	; 0x70
 8002eec:	e7c7      	b.n	8002e7e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7fd fb31 	bl	8000554 <HAL_GetTick>
 8002ef2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f013 0f02 	tst.w	r3, #2
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd fb29 	bl	8000554 <HAL_GetTick>
 8002f02:	1b80      	subs	r0, r0, r6
 8002f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	d9f3      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	e090      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
 8002f1c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f20:	b9ed      	cbnz	r5, 8002f5e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f22:	69a3      	ldr	r3, [r4, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8083 	beq.w	8003030 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2a:	4a49      	ldr	r2, [pc, #292]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	f002 020c 	and.w	r2, r2, #12
 8002f32:	2a08      	cmp	r2, #8
 8002f34:	d051      	beq.n	8002fda <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d017      	beq.n	8002f6a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b46      	ldr	r3, [pc, #280]	; (8003054 <HAL_RCC_OscConfig+0x3f4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fd fb08 	bl	8000554 <HAL_GetTick>
 8002f44:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	4b42      	ldr	r3, [pc, #264]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f4e:	d042      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fd fb00 	bl	8000554 <HAL_GetTick>
 8002f54:	1b00      	subs	r0, r0, r4
 8002f56:	2802      	cmp	r0, #2
 8002f58:	d9f5      	bls.n	8002f46 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	e069      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002f60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	; 0x40
 8002f68:	e7db      	b.n	8002f22 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_RCC_OscConfig+0x3f4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f70:	f7fd faf0 	bl	8000554 <HAL_GetTick>
 8002f74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f7e:	d006      	beq.n	8002f8e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fd fae8 	bl	8000554 <HAL_GetTick>
 8002f84:	1b40      	subs	r0, r0, r5
 8002f86:	2802      	cmp	r0, #2
 8002f88:	d9f5      	bls.n	8002f76 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	e051      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	69e3      	ldr	r3, [r4, #28]
 8002f90:	6a22      	ldr	r2, [r4, #32]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f96:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f9c:	0852      	lsrs	r2, r2, #1
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fa4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002faa:	4a29      	ldr	r2, [pc, #164]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002fac:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002fae:	4b29      	ldr	r3, [pc, #164]	; (8003054 <HAL_RCC_OscConfig+0x3f4>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fb4:	f7fd face 	bl	8000554 <HAL_GetTick>
 8002fb8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fd fac6 	bl	8000554 <HAL_GetTick>
 8002fc8:	1b00      	subs	r0, r0, r4
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d9f5      	bls.n	8002fba <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
 8002fd0:	e02f      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e02d      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e02b      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d02b      	beq.n	8003036 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x3f0>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002fe6:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	4291      	cmp	r1, r2
 8002fea:	d126      	bne.n	800303a <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	428a      	cmp	r2, r1
 8002ff4:	d123      	bne.n	800303e <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003002:	d11e      	bne.n	8003042 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003004:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003008:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800300a:	0852      	lsrs	r2, r2, #1
 800300c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003012:	d118      	bne.n	8003046 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003014:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003018:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800301e:	d114      	bne.n	800304a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003020:	2000      	movs	r0, #0
 8003022:	e006      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8003024:	2001      	movs	r0, #1
}
 8003026:	4770      	bx	lr
        return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
 800302a:	e002      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 800302c:	2001      	movs	r0, #1
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8003030:	2000      	movs	r0, #0
}
 8003032:	b002      	add	sp, #8
 8003034:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
 8003038:	e7fb      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 800303a:	2001      	movs	r0, #1
 800303c:	e7f9      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 800303e:	2001      	movs	r0, #1
 8003040:	e7f7      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 8003042:	2001      	movs	r0, #1
 8003044:	e7f5      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 8003046:	2001      	movs	r0, #1
 8003048:	e7f3      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 800304a:	2001      	movs	r0, #1
 800304c:	e7f1      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	42470060 	.word	0x42470060

08003058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b04      	cmp	r3, #4
 8003064:	d03d      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x8a>
 8003066:	2b08      	cmp	r3, #8
 8003068:	d13d      	bne.n	80030e6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003078:	d012      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003082:	2300      	movs	r3, #0
 8003084:	481a      	ldr	r0, [pc, #104]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003086:	fba1 0100 	umull	r0, r1, r1, r0
 800308a:	f7fd f89d 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800309a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800309e:	e023      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_GetSysClockFreq+0x94>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80030a8:	015c      	lsls	r4, r3, #5
 80030aa:	2500      	movs	r5, #0
 80030ac:	1ae4      	subs	r4, r4, r3
 80030ae:	f165 0500 	sbc.w	r5, r5, #0
 80030b2:	01ae      	lsls	r6, r5, #6
 80030b4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80030b8:	01a7      	lsls	r7, r4, #6
 80030ba:	1b38      	subs	r0, r7, r4
 80030bc:	eb66 0105 	sbc.w	r1, r6, r5
 80030c0:	00cc      	lsls	r4, r1, #3
 80030c2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80030c6:	00c5      	lsls	r5, r0, #3
 80030c8:	18e8      	adds	r0, r5, r3
 80030ca:	f144 0100 	adc.w	r1, r4, #0
 80030ce:	028b      	lsls	r3, r1, #10
 80030d0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80030d4:	0284      	lsls	r4, r0, #10
 80030d6:	4620      	mov	r0, r4
 80030d8:	4619      	mov	r1, r3
 80030da:	2300      	movs	r3, #0
 80030dc:	f7fd f874 	bl	80001c8 <__aeabi_uldivmod>
 80030e0:	e7d5      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80030e2:	4803      	ldr	r0, [pc, #12]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e6:	4803      	ldr	r0, [pc, #12]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	01005900 	.word	0x01005900
 80030f4:	00f42400 	.word	0x00f42400

080030f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80030f8:	2800      	cmp	r0, #0
 80030fa:	f000 809b 	beq.w	8003234 <HAL_RCC_ClockConfig+0x13c>
{
 80030fe:	b570      	push	{r4, r5, r6, lr}
 8003100:	460d      	mov	r5, r1
 8003102:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_RCC_ClockConfig+0x14c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	428b      	cmp	r3, r1
 800310e:	d208      	bcs.n	8003122 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003110:	b2cb      	uxtb	r3, r1
 8003112:	4a4c      	ldr	r2, [pc, #304]	; (8003244 <HAL_RCC_ClockConfig+0x14c>)
 8003114:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	428b      	cmp	r3, r1
 800311e:	f040 808b 	bne.w	8003238 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	f013 0f02 	tst.w	r3, #2
 8003128:	d017      	beq.n	800315a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312a:	f013 0f04 	tst.w	r3, #4
 800312e:	d004      	beq.n	800313a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4a45      	ldr	r2, [pc, #276]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 8003132:	6893      	ldr	r3, [r2, #8]
 8003134:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003138:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	f013 0f08 	tst.w	r3, #8
 8003140:	d004      	beq.n	800314c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003142:	4a41      	ldr	r2, [pc, #260]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 8003144:	6893      	ldr	r3, [r2, #8]
 8003146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4a3e      	ldr	r2, [pc, #248]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 800314e:	6893      	ldr	r3, [r2, #8]
 8003150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003154:	68a1      	ldr	r1, [r4, #8]
 8003156:	430b      	orrs	r3, r1
 8003158:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	f013 0f01 	tst.w	r3, #1
 8003160:	d032      	beq.n	80031c8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	6863      	ldr	r3, [r4, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d021      	beq.n	80031ac <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003168:	1e9a      	subs	r2, r3, #2
 800316a:	2a01      	cmp	r2, #1
 800316c:	d925      	bls.n	80031ba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4a36      	ldr	r2, [pc, #216]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	f012 0f02 	tst.w	r2, #2
 8003176:	d061      	beq.n	800323c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003178:	4933      	ldr	r1, [pc, #204]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 800317a:	688a      	ldr	r2, [r1, #8]
 800317c:	f022 0203 	bic.w	r2, r2, #3
 8003180:	4313      	orrs	r3, r2
 8003182:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003184:	f7fd f9e6 	bl	8000554 <HAL_GetTick>
 8003188:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	6862      	ldr	r2, [r4, #4]
 8003194:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003198:	d016      	beq.n	80031c8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fd f9db 	bl	8000554 <HAL_GetTick>
 800319e:	1b80      	subs	r0, r0, r6
 80031a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80031a4:	4298      	cmp	r0, r3
 80031a6:	d9f0      	bls.n	800318a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80031a8:	2003      	movs	r0, #3
 80031aa:	e042      	b.n	8003232 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031b4:	d1e0      	bne.n	8003178 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80031b6:	2001      	movs	r0, #1
 80031b8:	e03b      	b.n	8003232 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80031c2:	d1d9      	bne.n	8003178 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80031c4:	2001      	movs	r0, #1
 80031c6:	e034      	b.n	8003232 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_ClockConfig+0x14c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	42ab      	cmp	r3, r5
 80031d2:	d907      	bls.n	80031e4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d4:	b2ea      	uxtb	r2, r5
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_RCC_ClockConfig+0x14c>)
 80031d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	d12d      	bne.n	8003240 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	f013 0f04 	tst.w	r3, #4
 80031ea:	d006      	beq.n	80031fa <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ec:	4a16      	ldr	r2, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 80031ee:	6893      	ldr	r3, [r2, #8]
 80031f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80031f4:	68e1      	ldr	r1, [r4, #12]
 80031f6:	430b      	orrs	r3, r1
 80031f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	f013 0f08 	tst.w	r3, #8
 8003200:	d007      	beq.n	8003212 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4a11      	ldr	r2, [pc, #68]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 8003204:	6893      	ldr	r3, [r2, #8]
 8003206:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800320a:	6921      	ldr	r1, [r4, #16]
 800320c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003210:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003212:	f7ff ff21 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_RCC_ClockConfig+0x150>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x154>)
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	40d8      	lsrs	r0, r3
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x158>)
 8003226:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x15c>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	f7fd f948 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 8003230:	2000      	movs	r0, #0
}
 8003232:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003234:	2001      	movs	r0, #1
}
 8003236:	4770      	bx	lr
      return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
 800323a:	e7fa      	b.n	8003232 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800323c:	2001      	movs	r0, #1
 800323e:	e7f8      	b.n	8003232 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003240:	2001      	movs	r0, #1
 8003242:	e7f6      	b.n	8003232 <HAL_RCC_ClockConfig+0x13a>
 8003244:	40023c00 	.word	0x40023c00
 8003248:	40023800 	.word	0x40023800
 800324c:	08004cb0 	.word	0x08004cb0
 8003250:	20000024 	.word	0x20000024
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003258:	4b01      	ldr	r3, [pc, #4]	; (8003260 <HAL_RCC_GetHCLKFreq+0x8>)
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000024 	.word	0x20000024

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003266:	f7ff fff7 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_GetPCLK1Freq+0x18>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003272:	4a03      	ldr	r2, [pc, #12]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
}
 8003276:	40d8      	lsrs	r0, r3
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	08004cc0 	.word	0x08004cc0

08003284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003284:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003286:	f7ff ffe7 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <HAL_RCC_GetPCLK2Freq+0x18>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003292:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
}
 8003296:	40d8      	lsrs	r0, r3
 8003298:	bd08      	pop	{r3, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	08004cc0 	.word	0x08004cc0

080032a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a8:	6a05      	ldr	r5, [r0, #32]
 80032aa:	f025 0501 	bic.w	r5, r5, #1
 80032ae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032b2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ba:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80032be:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c0:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80032c2:	6203      	str	r3, [r0, #32]
}
 80032c4:	bc30      	pop	{r4, r5}
 80032c6:	4770      	bx	lr

080032c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032c8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ca:	6a05      	ldr	r5, [r0, #32]
 80032cc:	f025 0510 	bic.w	r5, r5, #16
 80032d0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80032d4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032d6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032da:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032e6:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80032e8:	6203      	str	r3, [r0, #32]
}
 80032ea:	bc30      	pop	{r4, r5}
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ee:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f4:	430b      	orrs	r3, r1
 80032f6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	6083      	str	r3, [r0, #8]
}
 80032fc:	4770      	bx	lr
	...

08003300 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d137      	bne.n	800337a <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003310:	6802      	ldr	r2, [r0, #0]
 8003312:	68d3      	ldr	r3, [r2, #12]
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331a:	6803      	ldr	r3, [r0, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_TIM_Base_Start_IT+0x84>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d020      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d01d      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003328:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800332c:	4293      	cmp	r3, r2
 800332e:	d019      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003334:	4293      	cmp	r3, r2
 8003336:	d015      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003338:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800333c:	4293      	cmp	r3, r2
 800333e:	d011      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003340:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003344:	4293      	cmp	r3, r2
 8003346:	d00d      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003348:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
 8003350:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003354:	4293      	cmp	r3, r2
 8003356:	d005      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003360:	2000      	movs	r0, #0
 8003362:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	2a06      	cmp	r2, #6
 800336c:	d007      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003376:	2000      	movs	r0, #0
 8003378:	4770      	bx	lr
    return HAL_ERROR;
 800337a:	2001      	movs	r0, #1
 800337c:	4770      	bx	lr
  return HAL_OK;
 800337e:	2000      	movs	r0, #0
}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000

08003388 <HAL_TIM_PeriodElapsedCallback>:
}
 8003388:	4770      	bx	lr

0800338a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_IC_CaptureCallback>:
}
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800338e:	4770      	bx	lr

08003390 <HAL_TIM_TriggerCallback>:
}
 8003390:	4770      	bx	lr

08003392 <HAL_TIM_IRQHandler>:
{
 8003392:	b510      	push	{r4, lr}
 8003394:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003396:	6803      	ldr	r3, [r0, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	f012 0f02 	tst.w	r2, #2
 800339e:	d011      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	f012 0f02 	tst.w	r2, #2
 80033a6:	d00d      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a8:	f06f 0202 	mvn.w	r2, #2
 80033ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f013 0f03 	tst.w	r3, #3
 80033ba:	d070      	beq.n	800349e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80033bc:	f7ff ffe6 	bl	800338c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c0:	2300      	movs	r3, #0
 80033c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	f012 0f04 	tst.w	r2, #4
 80033cc:	d012      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	f012 0f04 	tst.w	r2, #4
 80033d4:	d00e      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d6:	f06f 0204 	mvn.w	r2, #4
 80033da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033dc:	2302      	movs	r3, #2
 80033de:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80033e8:	d05f      	beq.n	80034aa <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7ff ffce 	bl	800338c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f0:	2300      	movs	r3, #0
 80033f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	f012 0f08 	tst.w	r2, #8
 80033fc:	d012      	beq.n	8003424 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	f012 0f08 	tst.w	r2, #8
 8003404:	d00e      	beq.n	8003424 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003406:	f06f 0208 	mvn.w	r2, #8
 800340a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340c:	2304      	movs	r3, #4
 800340e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f013 0f03 	tst.w	r3, #3
 8003418:	d04e      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	4620      	mov	r0, r4
 800341c:	f7ff ffb6 	bl	800338c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003420:	2300      	movs	r3, #0
 8003422:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	f012 0f10 	tst.w	r2, #16
 800342c:	d012      	beq.n	8003454 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	f012 0f10 	tst.w	r2, #16
 8003434:	d00e      	beq.n	8003454 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003436:	f06f 0210 	mvn.w	r2, #16
 800343a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343c:	2308      	movs	r3, #8
 800343e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003448:	d03d      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	4620      	mov	r0, r4
 800344c:	f7ff ff9e 	bl	800338c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003450:	2300      	movs	r3, #0
 8003452:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	f012 0f01 	tst.w	r2, #1
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	f012 0f01 	tst.w	r2, #1
 8003464:	d136      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800346e:	d003      	beq.n	8003478 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003476:	d134      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003488:	d132      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	f012 0f20 	tst.w	r2, #32
 8003492:	d003      	beq.n	800349c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	f012 0f20 	tst.w	r2, #32
 800349a:	d130      	bne.n	80034fe <HAL_TIM_IRQHandler+0x16c>
}
 800349c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	f7ff ff74 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff ff73 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
 80034a8:	e78a      	b.n	80033c0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff6d 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff ff6c 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
 80034b6:	e79b      	b.n	80033f0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff ff66 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034be:	4620      	mov	r0, r4
 80034c0:	f7ff ff65 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
 80034c4:	e7ac      	b.n	8003420 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff ff5f 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	4620      	mov	r0, r4
 80034ce:	f7ff ff5e 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
 80034d2:	e7bd      	b.n	8003450 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff ff54 	bl	8003388 <HAL_TIM_PeriodElapsedCallback>
 80034e0:	e7c1      	b.n	8003466 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 f970 	bl	80037ce <HAL_TIMEx_BreakCallback>
 80034ee:	e7c3      	b.n	8003478 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff ff4a 	bl	8003390 <HAL_TIM_TriggerCallback>
 80034fc:	e7c5      	b.n	800348a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fe:	f06f 0220 	mvn.w	r2, #32
 8003502:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003504:	4620      	mov	r0, r4
 8003506:	f000 f961 	bl	80037cc <HAL_TIMEx_CommutCallback>
}
 800350a:	e7c7      	b.n	800349c <HAL_TIM_IRQHandler+0x10a>

0800350c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800350c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350e:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <TIM_Base_SetConfig+0xc4>)
 8003510:	4290      	cmp	r0, r2
 8003512:	d012      	beq.n	800353a <TIM_Base_SetConfig+0x2e>
 8003514:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003518:	d00f      	beq.n	800353a <TIM_Base_SetConfig+0x2e>
 800351a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800351e:	4290      	cmp	r0, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x2e>
 8003522:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003526:	4290      	cmp	r0, r2
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x2e>
 800352a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800352e:	4290      	cmp	r0, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x2e>
 8003532:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003536:	4290      	cmp	r0, r2
 8003538:	d103      	bne.n	8003542 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800353e:	684a      	ldr	r2, [r1, #4]
 8003540:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003542:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <TIM_Base_SetConfig+0xc4>)
 8003544:	4290      	cmp	r0, r2
 8003546:	d02a      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 8003548:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800354c:	d027      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 800354e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003552:	4290      	cmp	r0, r2
 8003554:	d023      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 8003556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800355a:	4290      	cmp	r0, r2
 800355c:	d01f      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 800355e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003562:	4290      	cmp	r0, r2
 8003564:	d01b      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 8003566:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800356a:	4290      	cmp	r0, r2
 800356c:	d017      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 800356e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003572:	4290      	cmp	r0, r2
 8003574:	d013      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 8003576:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800357a:	4290      	cmp	r0, r2
 800357c:	d00f      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 800357e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003582:	4290      	cmp	r0, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 8003586:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800358a:	4290      	cmp	r0, r2
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 800358e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003592:	4290      	cmp	r0, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x92>
 8003596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800359a:	4290      	cmp	r0, r2
 800359c:	d103      	bne.n	80035a6 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	68ca      	ldr	r2, [r1, #12]
 80035a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035aa:	694a      	ldr	r2, [r1, #20]
 80035ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80035ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	688b      	ldr	r3, [r1, #8]
 80035b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035b4:	680b      	ldr	r3, [r1, #0]
 80035b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <TIM_Base_SetConfig+0xc4>)
 80035ba:	4298      	cmp	r0, r3
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0xba>
 80035be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c2:	4298      	cmp	r0, r3
 80035c4:	d101      	bne.n	80035ca <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80035c6:	690b      	ldr	r3, [r1, #16]
 80035c8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80035ca:	2301      	movs	r3, #1
 80035cc:	6143      	str	r3, [r0, #20]
}
 80035ce:	4770      	bx	lr
 80035d0:	40010000 	.word	0x40010000

080035d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80035d4:	b340      	cbz	r0, 8003628 <HAL_TIM_Base_Init+0x54>
{
 80035d6:	b510      	push	{r4, lr}
 80035d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035de:	b1f3      	cbz	r3, 800361e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e6:	4621      	mov	r1, r4
 80035e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80035ec:	f7ff ff8e 	bl	800350c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80035fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80035fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003602:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800360a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800361a:	2000      	movs	r0, #0
}
 800361c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800361e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003622:	f001 fa1d 	bl	8004a60 <HAL_TIM_Base_MspInit>
 8003626:	e7db      	b.n	80035e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003628:	2001      	movs	r0, #1
}
 800362a:	4770      	bx	lr

0800362c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003630:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003634:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003638:	430a      	orrs	r2, r1
 800363a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363c:	6082      	str	r2, [r0, #8]
}
 800363e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003644:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d078      	beq.n	800373e <HAL_TIM_ConfigClockSource+0xfa>
{
 800364c:	b510      	push	{r4, lr}
 800364e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003650:	2301      	movs	r3, #1
 8003652:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800365c:	6802      	ldr	r2, [r0, #0]
 800365e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003660:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003664:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003668:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800366a:	680b      	ldr	r3, [r1, #0]
 800366c:	2b60      	cmp	r3, #96	; 0x60
 800366e:	d04c      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xc6>
 8003670:	d829      	bhi.n	80036c6 <HAL_TIM_ConfigClockSource+0x82>
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d054      	beq.n	8003720 <HAL_TIM_ConfigClockSource+0xdc>
 8003676:	d90c      	bls.n	8003692 <HAL_TIM_ConfigClockSource+0x4e>
 8003678:	2b50      	cmp	r3, #80	; 0x50
 800367a:	d122      	bne.n	80036c2 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367c:	68ca      	ldr	r2, [r1, #12]
 800367e:	6849      	ldr	r1, [r1, #4]
 8003680:	6800      	ldr	r0, [r0, #0]
 8003682:	f7ff fe0f 	bl	80032a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003686:	2150      	movs	r1, #80	; 0x50
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	f7ff fe30 	bl	80032ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2000      	movs	r0, #0
      break;
 8003690:	e005      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003692:	2b20      	cmp	r3, #32
 8003694:	d00d      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x6e>
 8003696:	d909      	bls.n	80036ac <HAL_TIM_ConfigClockSource+0x68>
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d00a      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800369c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800369e:	2301      	movs	r3, #1
 80036a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80036a4:	2300      	movs	r3, #0
 80036a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80036aa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80036ac:	b10b      	cbz	r3, 80036b2 <HAL_TIM_ConfigClockSource+0x6e>
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d105      	bne.n	80036be <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b2:	4619      	mov	r1, r3
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	f7ff fe1a 	bl	80032ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2000      	movs	r0, #0
      break;
 80036bc:	e7ef      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80036be:	2001      	movs	r0, #1
 80036c0:	e7ed      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
 80036c2:	2001      	movs	r0, #1
 80036c4:	e7eb      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ca:	d034      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0xf2>
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d0:	d10c      	bne.n	80036ec <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80036d2:	68cb      	ldr	r3, [r1, #12]
 80036d4:	684a      	ldr	r2, [r1, #4]
 80036d6:	6889      	ldr	r1, [r1, #8]
 80036d8:	6800      	ldr	r0, [r0, #0]
 80036da:	f7ff ffa7 	bl	800362c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	6893      	ldr	r3, [r2, #8]
 80036e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2000      	movs	r0, #0
      break;
 80036ea:	e7d8      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80036ec:	2b70      	cmp	r3, #112	; 0x70
 80036ee:	d124      	bne.n	800373a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	68cb      	ldr	r3, [r1, #12]
 80036f2:	684a      	ldr	r2, [r1, #4]
 80036f4:	6889      	ldr	r1, [r1, #8]
 80036f6:	6800      	ldr	r0, [r0, #0]
 80036f8:	f7ff ff98 	bl	800362c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003704:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2000      	movs	r0, #0
      break;
 8003708:	e7c9      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800370a:	68ca      	ldr	r2, [r1, #12]
 800370c:	6849      	ldr	r1, [r1, #4]
 800370e:	6800      	ldr	r0, [r0, #0]
 8003710:	f7ff fdda 	bl	80032c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003714:	2160      	movs	r1, #96	; 0x60
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	f7ff fde9 	bl	80032ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2000      	movs	r0, #0
      break;
 800371e:	e7be      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003720:	68ca      	ldr	r2, [r1, #12]
 8003722:	6849      	ldr	r1, [r1, #4]
 8003724:	6800      	ldr	r0, [r0, #0]
 8003726:	f7ff fdbd 	bl	80032a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800372a:	2140      	movs	r1, #64	; 0x40
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	f7ff fdde 	bl	80032ee <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2000      	movs	r0, #0
      break;
 8003734:	e7b3      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003736:	2000      	movs	r0, #0
 8003738:	e7b1      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800373a:	2001      	movs	r0, #1
 800373c:	e7af      	b.n	800369e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800373e:	2002      	movs	r0, #2
}
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003744:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d03b      	beq.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800374c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800374e:	2301      	movs	r3, #1
 8003750:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800375a:	6803      	ldr	r3, [r0, #0]
 800375c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003760:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003764:	680a      	ldr	r2, [r1, #0]
 8003766:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	6803      	ldr	r3, [r0, #0]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01a      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d017      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003778:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003784:	4293      	cmp	r3, r2
 8003786:	d00f      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003788:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800378c:	4293      	cmp	r3, r2
 800378e:	d00b      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003790:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003794:	4293      	cmp	r3, r2
 8003796:	d007      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003798:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80037a0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d104      	bne.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ac:	684a      	ldr	r2, [r1, #4]
 80037ae:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b8:	2300      	movs	r3, #0
 80037ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80037be:	4618      	mov	r0, r3
}
 80037c0:	bc30      	pop	{r4, r5}
 80037c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037c4:	2002      	movs	r0, #2
}
 80037c6:	4770      	bx	lr
 80037c8:	40010000 	.word	0x40010000

080037cc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037cc:	4770      	bx	lr

080037ce <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ce:	4770      	bx	lr

080037d0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037d0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	f102 030c 	add.w	r3, r2, #12
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	320c      	adds	r2, #12
 80037e0:	e842 3100 	strex	r1, r3, [r2]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d1f3      	bne.n	80037d0 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e8:	2320      	movs	r3, #32
 80037ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80037ee:	4770      	bx	lr

080037f0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	f102 030c 	add.w	r3, r2, #12
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	320c      	adds	r2, #12
 8003800:	e842 3100 	strex	r1, r3, [r2]
 8003804:	2900      	cmp	r1, #0
 8003806:	d1f3      	bne.n	80037f0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003808:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	f102 0314 	add.w	r3, r2, #20
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	3214      	adds	r2, #20
 8003818:	e842 3100 	strex	r1, r3, [r2]
 800381c:	2900      	cmp	r1, #0
 800381e:	d1f3      	bne.n	8003808 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003822:	2b01      	cmp	r3, #1
 8003824:	d005      	beq.n	8003832 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003826:	2320      	movs	r3, #32
 8003828:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	2300      	movs	r3, #0
 800382e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003830:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	f102 030c 	add.w	r3, r2, #12
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	320c      	adds	r2, #12
 8003842:	e842 3100 	strex	r1, r3, [r2]
 8003846:	2900      	cmp	r1, #0
 8003848:	d1f3      	bne.n	8003832 <UART_EndRxTransfer+0x42>
 800384a:	e7ec      	b.n	8003826 <UART_EndRxTransfer+0x36>

0800384c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800384c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d001      	beq.n	800385a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003856:	2002      	movs	r0, #2
  }
}
 8003858:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385a:	6883      	ldr	r3, [r0, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d017      	beq.n	8003892 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003862:	6a03      	ldr	r3, [r0, #32]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	6202      	str	r2, [r0, #32]
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	6803      	ldr	r3, [r0, #0]
 800386c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800386e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29b      	uxth	r3, r3
 8003876:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003878:	b94b      	cbnz	r3, 800388e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800387a:	6802      	ldr	r2, [r0, #0]
 800387c:	68d3      	ldr	r3, [r2, #12]
 800387e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003882:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003884:	6802      	ldr	r2, [r0, #0]
 8003886:	68d3      	ldr	r3, [r2, #12]
 8003888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800388e:	2000      	movs	r0, #0
 8003890:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003892:	6903      	ldr	r3, [r0, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e4      	bne.n	8003862 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003898:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	6802      	ldr	r2, [r0, #0]
 800389e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a2:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80038a4:	6a03      	ldr	r3, [r0, #32]
 80038a6:	3302      	adds	r3, #2
 80038a8:	6203      	str	r3, [r0, #32]
 80038aa:	e7e0      	b.n	800386e <UART_Transmit_IT+0x22>

080038ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b0:	6802      	ldr	r2, [r0, #0]
 80038b2:	6913      	ldr	r3, [r2, #16]
 80038b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038b8:	68c1      	ldr	r1, [r0, #12]
 80038ba:	430b      	orrs	r3, r1
 80038bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038be:	6883      	ldr	r3, [r0, #8]
 80038c0:	6902      	ldr	r2, [r0, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	6942      	ldr	r2, [r0, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	69c2      	ldr	r2, [r0, #28]
 80038ca:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80038cc:	6801      	ldr	r1, [r0, #0]
 80038ce:	68cb      	ldr	r3, [r1, #12]
 80038d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038d4:	f023 030c 	bic.w	r3, r3, #12
 80038d8:	4313      	orrs	r3, r2
 80038da:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038dc:	6802      	ldr	r2, [r0, #0]
 80038de:	6953      	ldr	r3, [r2, #20]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	6981      	ldr	r1, [r0, #24]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ea:	6803      	ldr	r3, [r0, #0]
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <UART_SetConfig+0x114>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d006      	beq.n	8003900 <UART_SetConfig+0x54>
 80038f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d002      	beq.n	8003900 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038fa:	f7ff fcb3 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 80038fe:	e001      	b.n	8003904 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7ff fcc0 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003904:	69e3      	ldr	r3, [r4, #28]
 8003906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390a:	d02a      	beq.n	8003962 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390c:	2600      	movs	r6, #0
 800390e:	1805      	adds	r5, r0, r0
 8003910:	eb46 0106 	adc.w	r1, r6, r6
 8003914:	182d      	adds	r5, r5, r0
 8003916:	eb46 0101 	adc.w	r1, r6, r1
 800391a:	00cb      	lsls	r3, r1, #3
 800391c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003920:	00ea      	lsls	r2, r5, #3
 8003922:	4615      	mov	r5, r2
 8003924:	4619      	mov	r1, r3
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	0f9b      	lsrs	r3, r3, #30
 800392c:	1828      	adds	r0, r5, r0
 800392e:	eb46 0101 	adc.w	r1, r6, r1
 8003932:	f7fc fc49 	bl	80001c8 <__aeabi_uldivmod>
 8003936:	4d23      	ldr	r5, [pc, #140]	; (80039c4 <UART_SetConfig+0x118>)
 8003938:	fba5 3200 	umull	r3, r2, r5, r0
 800393c:	0951      	lsrs	r1, r2, #5
 800393e:	2364      	movs	r3, #100	; 0x64
 8003940:	fb03 0311 	mls	r3, r3, r1, r0
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	3332      	adds	r3, #50	; 0x32
 8003948:	fba5 2303 	umull	r2, r3, r5, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003952:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	6821      	ldr	r1, [r4, #0]
 800395c:	4413      	add	r3, r2
 800395e:	608b      	str	r3, [r1, #8]
  }
}
 8003960:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003962:	2600      	movs	r6, #0
 8003964:	1805      	adds	r5, r0, r0
 8003966:	eb46 0106 	adc.w	r1, r6, r6
 800396a:	182d      	adds	r5, r5, r0
 800396c:	eb46 0101 	adc.w	r1, r6, r1
 8003970:	00cb      	lsls	r3, r1, #3
 8003972:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003976:	00ea      	lsls	r2, r5, #3
 8003978:	4615      	mov	r5, r2
 800397a:	4619      	mov	r1, r3
 800397c:	6862      	ldr	r2, [r4, #4]
 800397e:	4633      	mov	r3, r6
 8003980:	1892      	adds	r2, r2, r2
 8003982:	eb46 0303 	adc.w	r3, r6, r3
 8003986:	1828      	adds	r0, r5, r0
 8003988:	eb46 0101 	adc.w	r1, r6, r1
 800398c:	f7fc fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8003990:	4d0c      	ldr	r5, [pc, #48]	; (80039c4 <UART_SetConfig+0x118>)
 8003992:	fba5 3200 	umull	r3, r2, r5, r0
 8003996:	0951      	lsrs	r1, r2, #5
 8003998:	2364      	movs	r3, #100	; 0x64
 800399a:	fb03 0311 	mls	r3, r3, r1, r0
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	3332      	adds	r3, #50	; 0x32
 80039a2:	fba5 2303 	umull	r2, r3, r5, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	005a      	lsls	r2, r3, #1
 80039aa:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80039ae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	6821      	ldr	r1, [r4, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
 80039bc:	e7d0      	b.n	8003960 <UART_SetConfig+0xb4>
 80039be:	bf00      	nop
 80039c0:	40011000 	.word	0x40011000
 80039c4:	51eb851f 	.word	0x51eb851f

080039c8 <HAL_UART_Init>:
  if (huart == NULL)
 80039c8:	b358      	cbz	r0, 8003a22 <HAL_UART_Init+0x5a>
{
 80039ca:	b510      	push	{r4, lr}
 80039cc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80039ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039d2:	b30b      	cbz	r3, 8003a18 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	2324      	movs	r3, #36	; 0x24
 80039d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	68d3      	ldr	r3, [r2, #12]
 80039de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7ff ff61 	bl	80038ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	6913      	ldr	r3, [r2, #16]
 80039ee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80039f2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	6953      	ldr	r3, [r2, #20]
 80039f8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80039fc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	68d3      	ldr	r3, [r2, #12]
 8003a02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a06:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	2000      	movs	r0, #0
 8003a0a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003a16:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003a18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003a1c:	f001 f876 	bl	8004b0c <HAL_UART_MspInit>
 8003a20:	e7d8      	b.n	80039d4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1
}
 8003a24:	4770      	bx	lr

08003a26 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003a26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d116      	bne.n	8003a5e <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8003a30:	b1b9      	cbz	r1, 8003a62 <HAL_UART_Transmit_IT+0x3c>
 8003a32:	b1c2      	cbz	r2, 8003a66 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8003a34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d016      	beq.n	8003a6a <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8003a3c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003a3e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a40:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a46:	2221      	movs	r2, #33	; 0x21
 8003a48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8003a4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a50:	6801      	ldr	r1, [r0, #0]
 8003a52:	68ca      	ldr	r2, [r1, #12]
 8003a54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a58:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4770      	bx	lr
    return HAL_BUSY;
 8003a5e:	2002      	movs	r0, #2
 8003a60:	4770      	bx	lr
      return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
 8003a64:	4770      	bx	lr
 8003a66:	2001      	movs	r0, #1
 8003a68:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003a6a:	2002      	movs	r0, #2
}
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_UART_Transmit_DMA>:
{
 8003a70:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003a72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d138      	bne.n	8003aee <HAL_UART_Transmit_DMA+0x7e>
 8003a7c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8003a7e:	2900      	cmp	r1, #0
 8003a80:	d037      	beq.n	8003af2 <HAL_UART_Transmit_DMA+0x82>
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d037      	beq.n	8003af6 <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 8003a86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d035      	beq.n	8003afa <HAL_UART_Transmit_DMA+0x8a>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8003a94:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003a96:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a98:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9e:	2321      	movs	r3, #33	; 0x21
 8003aa0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aa6:	4816      	ldr	r0, [pc, #88]	; (8003b00 <HAL_UART_Transmit_DMA+0x90>)
 8003aa8:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aac:	4815      	ldr	r0, [pc, #84]	; (8003b04 <HAL_UART_Transmit_DMA+0x94>)
 8003aae:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ab2:	4815      	ldr	r0, [pc, #84]	; (8003b08 <HAL_UART_Transmit_DMA+0x98>)
 8003ab4:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8003ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ab8:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	1d02      	adds	r2, r0, #4
 8003ac0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003ac2:	f7fd f9ef 	bl	8000ea4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003acc:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003ace:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ad2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	f102 0314 	add.w	r3, r2, #20
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	3214      	adds	r2, #20
 8003ae2:	e842 3100 	strex	r1, r3, [r2]
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d1f3      	bne.n	8003ad2 <HAL_UART_Transmit_DMA+0x62>
    return HAL_OK;
 8003aea:	2000      	movs	r0, #0
 8003aec:	e000      	b.n	8003af0 <HAL_UART_Transmit_DMA+0x80>
    return HAL_BUSY;
 8003aee:	2002      	movs	r0, #2
}
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7fc      	b.n	8003af0 <HAL_UART_Transmit_DMA+0x80>
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7fa      	b.n	8003af0 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8003afa:	2002      	movs	r0, #2
 8003afc:	e7f8      	b.n	8003af0 <HAL_UART_Transmit_DMA+0x80>
 8003afe:	bf00      	nop
 8003b00:	08003b0f 	.word	0x08003b0f
 8003b04:	08003b77 	.word	0x08003b77
 8003b08:	08003b83 	.word	0x08003b83

08003b0c <HAL_UART_TxCpltCallback>:
}
 8003b0c:	4770      	bx	lr

08003b0e <UART_DMATransmitCplt>:
{
 8003b0e:	b508      	push	{r3, lr}
 8003b10:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b12:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b1c:	d11a      	bne.n	8003b54 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	84c3      	strh	r3, [r0, #38]	; 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b22:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	f102 0314 	add.w	r3, r2, #20
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	3214      	adds	r2, #20
 8003b32:	e842 3100 	strex	r1, r3, [r2]
 8003b36:	2900      	cmp	r1, #0
 8003b38:	d1f3      	bne.n	8003b22 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	f102 030c 	add.w	r3, r2, #12
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	320c      	adds	r2, #12
 8003b4a:	e842 3100 	strex	r1, r3, [r2]
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	d1f3      	bne.n	8003b3a <UART_DMATransmitCplt+0x2c>
}
 8003b52:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003b54:	f7ff ffda 	bl	8003b0c <HAL_UART_TxCpltCallback>
}
 8003b58:	e7fb      	b.n	8003b52 <UART_DMATransmitCplt+0x44>

08003b5a <UART_EndTransmit_IT>:
{
 8003b5a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b5c:	6801      	ldr	r1, [r0, #0]
 8003b5e:	68ca      	ldr	r2, [r1, #12]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	2220      	movs	r2, #32
 8003b68:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003b6c:	f7ff ffce 	bl	8003b0c <HAL_UART_TxCpltCallback>
}
 8003b70:	2000      	movs	r0, #0
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <HAL_UART_TxHalfCpltCallback>:
}
 8003b74:	4770      	bx	lr

08003b76 <UART_DMATxHalfCplt>:
{
 8003b76:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003b78:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003b7a:	f7ff fffb 	bl	8003b74 <HAL_UART_TxHalfCpltCallback>
}
 8003b7e:	bd08      	pop	{r3, pc}

08003b80 <HAL_UART_ErrorCallback>:
}
 8003b80:	4770      	bx	lr

08003b82 <UART_DMAError>:
{
 8003b82:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b8a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b21      	cmp	r3, #33	; 0x21
 8003b92:	d010      	beq.n	8003bb6 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b9c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b22      	cmp	r3, #34	; 0x22
 8003ba4:	d011      	beq.n	8003bca <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ba8:	f043 0310 	orr.w	r3, r3, #16
 8003bac:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ffe6 	bl	8003b80 <HAL_UART_ErrorCallback>
}
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bba:	2a00      	cmp	r2, #0
 8003bbc:	d0ea      	beq.n	8003b94 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff fe04 	bl	80037d0 <UART_EndTxTransfer>
 8003bc8:	e7e4      	b.n	8003b94 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d0eb      	beq.n	8003ba6 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff fe0c 	bl	80037f0 <UART_EndRxTransfer>
 8003bd8:	e7e5      	b.n	8003ba6 <UART_DMAError+0x24>

08003bda <UART_DMAAbortOnError>:
{
 8003bda:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bdc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003be2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003be4:	f7ff ffcc 	bl	8003b80 <HAL_UART_ErrorCallback>
}
 8003be8:	bd08      	pop	{r3, pc}

08003bea <HAL_UARTEx_RxEventCallback>:
}
 8003bea:	4770      	bx	lr

08003bec <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bec:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b22      	cmp	r3, #34	; 0x22
 8003bf4:	d167      	bne.n	8003cc6 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf6:	6883      	ldr	r3, [r0, #8]
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	d04d      	beq.n	8003c9a <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bfe:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d004      	beq.n	8003c10 <UART_Receive_IT+0x24>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d154      	bne.n	8003cb4 <UART_Receive_IT+0xc8>
 8003c0a:	6903      	ldr	r3, [r0, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d151      	bne.n	8003cb4 <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c10:	6803      	ldr	r3, [r0, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003c16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c18:	3301      	adds	r3, #1
 8003c1a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003c1c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d14f      	bne.n	8003cca <UART_Receive_IT+0xde>
{
 8003c2a:	b500      	push	{lr}
 8003c2c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c2e:	6802      	ldr	r2, [r0, #0]
 8003c30:	68d3      	ldr	r3, [r2, #12]
 8003c32:	f023 0320 	bic.w	r3, r3, #32
 8003c36:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c38:	6802      	ldr	r2, [r0, #0]
 8003c3a:	68d3      	ldr	r3, [r2, #12]
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c40:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c42:	6802      	ldr	r2, [r0, #0]
 8003c44:	6953      	ldr	r3, [r2, #20]
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d133      	bne.n	8003cc0 <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	f102 030c 	add.w	r3, r2, #12
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	320c      	adds	r2, #12
 8003c6c:	e842 3100 	strex	r1, r3, [r2]
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d1f3      	bne.n	8003c5c <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c74:	6803      	ldr	r3, [r0, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	f012 0f10 	tst.w	r2, #16
 8003c7c:	d006      	beq.n	8003c8c <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	9201      	str	r2, [sp, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	9201      	str	r2, [sp, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003c8e:	f7ff ffac 	bl	8003bea <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003c92:	2000      	movs	r0, #0
}
 8003c94:	b003      	add	sp, #12
 8003c96:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9a:	6902      	ldr	r2, [r0, #16]
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	d1ae      	bne.n	8003bfe <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ca0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ca2:	6803      	ldr	r3, [r0, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003cac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003cae:	3302      	adds	r3, #2
 8003cb0:	6283      	str	r3, [r0, #40]	; 0x28
 8003cb2:	e7b3      	b.n	8003c1c <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	7013      	strb	r3, [r2, #0]
 8003cbe:	e7aa      	b.n	8003c16 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8003cc0:	f000 fa66 	bl	8004190 <HAL_UART_RxCpltCallback>
 8003cc4:	e7e5      	b.n	8003c92 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8003cc6:	2002      	movs	r0, #2
 8003cc8:	4770      	bx	lr
    return HAL_OK;
 8003cca:	2000      	movs	r0, #0
}
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_UART_IRQHandler>:
{
 8003cd0:	b530      	push	{r4, r5, lr}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd6:	6802      	ldr	r2, [r0, #0]
 8003cd8:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cda:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cdc:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8003cde:	f013 050f 	ands.w	r5, r3, #15
 8003ce2:	d105      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce4:	f013 0f20 	tst.w	r3, #32
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x20>
 8003cea:	f010 0f20 	tst.w	r0, #32
 8003cee:	d119      	bne.n	8003d24 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cf0:	b12d      	cbz	r5, 8003cfe <HAL_UART_IRQHandler+0x2e>
 8003cf2:	f011 0101 	ands.w	r1, r1, #1
 8003cf6:	d119      	bne.n	8003d2c <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cf8:	f410 7f90 	tst.w	r0, #288	; 0x120
 8003cfc:	d116      	bne.n	8003d2c <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d00:	2901      	cmp	r1, #1
 8003d02:	d07d      	beq.n	8003e00 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_IRQHandler+0x42>
 8003d0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d0e:	f040 8115 	bne.w	8003f3c <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d16:	d003      	beq.n	8003d20 <HAL_UART_IRQHandler+0x50>
 8003d18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d1c:	f040 8112 	bne.w	8003f44 <HAL_UART_IRQHandler+0x274>
}
 8003d20:	b003      	add	sp, #12
 8003d22:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7ff ff61 	bl	8003bec <UART_Receive_IT>
      return;
 8003d2a:	e7f9      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d2c:	f013 0f01 	tst.w	r3, #1
 8003d30:	d006      	beq.n	8003d40 <HAL_UART_IRQHandler+0x70>
 8003d32:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003d36:	d003      	beq.n	8003d40 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d40:	f013 0f04 	tst.w	r3, #4
 8003d44:	d004      	beq.n	8003d50 <HAL_UART_IRQHandler+0x80>
 8003d46:	b119      	cbz	r1, 8003d50 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d4a:	f042 0202 	orr.w	r2, r2, #2
 8003d4e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d50:	f013 0f02 	tst.w	r3, #2
 8003d54:	d004      	beq.n	8003d60 <HAL_UART_IRQHandler+0x90>
 8003d56:	b119      	cbz	r1, 8003d60 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d5a:	f042 0204 	orr.w	r2, r2, #4
 8003d5e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d60:	f013 0f08 	tst.w	r3, #8
 8003d64:	d007      	beq.n	8003d76 <HAL_UART_IRQHandler+0xa6>
 8003d66:	f010 0f20 	tst.w	r0, #32
 8003d6a:	d100      	bne.n	8003d6e <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d6c:	b119      	cbz	r1, 8003d76 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d70:	f042 0208 	orr.w	r2, r2, #8
 8003d74:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d0d1      	beq.n	8003d20 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d7c:	f013 0f20 	tst.w	r3, #32
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_IRQHandler+0xb8>
 8003d82:	f010 0f20 	tst.w	r0, #32
 8003d86:	d129      	bne.n	8003ddc <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d92:	f012 0f08 	tst.w	r2, #8
 8003d96:	d100      	bne.n	8003d9a <HAL_UART_IRQHandler+0xca>
 8003d98:	b363      	cbz	r3, 8003df4 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f7ff fd28 	bl	80037f0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003da8:	d020      	beq.n	8003dec <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003daa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	f102 0314 	add.w	r3, r2, #20
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	3214      	adds	r2, #20
 8003dba:	e842 3100 	strex	r1, r3, [r2]
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	d1f3      	bne.n	8003daa <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8003dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dc4:	b173      	cbz	r3, 8003de4 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc6:	4a61      	ldr	r2, [pc, #388]	; (8003f4c <HAL_UART_IRQHandler+0x27c>)
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003dcc:	f7fd f8e9 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0a5      	beq.n	8003d20 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003dd6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003dd8:	4798      	blx	r3
 8003dda:	e7a1      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ff05 	bl	8003bec <UART_Receive_IT>
 8003de2:	e7d1      	b.n	8003d88 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8003de4:	4620      	mov	r0, r4
 8003de6:	f7ff fecb 	bl	8003b80 <HAL_UART_ErrorCallback>
 8003dea:	e799      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8003dec:	4620      	mov	r0, r4
 8003dee:	f7ff fec7 	bl	8003b80 <HAL_UART_ErrorCallback>
 8003df2:	e795      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff fec3 	bl	8003b80 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8003dfe:	e78f      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e00:	f013 0f10 	tst.w	r3, #16
 8003e04:	f43f af7e 	beq.w	8003d04 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e08:	f010 0f10 	tst.w	r0, #16
 8003e0c:	f43f af7a 	beq.w	8003d04 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e10:	2300      	movs	r3, #0
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	6813      	ldr	r3, [r2, #0]
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	6853      	ldr	r3, [r2, #4]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1e:	6953      	ldr	r3, [r2, #20]
 8003e20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e24:	d050      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f43f af76 	beq.w	8003d20 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e34:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003e36:	4299      	cmp	r1, r3
 8003e38:	f67f af72 	bls.w	8003d20 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e3c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e3e:	69d3      	ldr	r3, [r2, #28]
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e44:	d037      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	f102 030c 	add.w	r3, r2, #12
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	320c      	adds	r2, #12
 8003e56:	e842 3100 	strex	r1, r3, [r2]
 8003e5a:	2900      	cmp	r1, #0
 8003e5c:	d1f3      	bne.n	8003e46 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	f102 0314 	add.w	r3, r2, #20
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	3214      	adds	r2, #20
 8003e6e:	e842 3100 	strex	r1, r3, [r2]
 8003e72:	2900      	cmp	r1, #0
 8003e74:	d1f3      	bne.n	8003e5e <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f102 0314 	add.w	r3, r2, #20
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	3214      	adds	r2, #20
 8003e86:	e842 3100 	strex	r1, r3, [r2]
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d1f3      	bne.n	8003e76 <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	2300      	movs	r3, #0
 8003e96:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	f102 030c 	add.w	r3, r2, #12
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	320c      	adds	r2, #12
 8003ea8:	e842 3100 	strex	r1, r3, [r2]
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d1f3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003eb2:	f7fd f82c 	bl	8000f0e <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003eb8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	1ac9      	subs	r1, r1, r3
 8003ebe:	b289      	uxth	r1, r1
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7ff fe92 	bl	8003bea <HAL_UARTEx_RxEventCallback>
      return;
 8003ec6:	e72b      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ec8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003eca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	1ac9      	subs	r1, r1, r3
 8003ed0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003ed2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f43f af22 	beq.w	8003d20 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8003edc:	2900      	cmp	r1, #0
 8003ede:	f43f af1f 	beq.w	8003d20 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	f102 030c 	add.w	r3, r2, #12
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	320c      	adds	r2, #12
 8003ef2:	e842 3000 	strex	r0, r3, [r2]
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d1f3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	f102 0314 	add.w	r3, r2, #20
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	3214      	adds	r2, #20
 8003f0a:	e842 3000 	strex	r0, r3, [r2]
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d1f3      	bne.n	8003efa <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8003f12:	2320      	movs	r3, #32
 8003f14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	f102 030c 	add.w	r3, r2, #12
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	320c      	adds	r2, #12
 8003f2c:	e842 3000 	strex	r0, r3, [r2]
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d1f3      	bne.n	8003f1c <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f34:	4620      	mov	r0, r4
 8003f36:	f7ff fe58 	bl	8003bea <HAL_UARTEx_RxEventCallback>
      return;
 8003f3a:	e6f1      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff fc85 	bl	800384c <UART_Transmit_IT>
    return;
 8003f42:	e6ed      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7ff fe08 	bl	8003b5a <UART_EndTransmit_IT>
    return;
 8003f4a:	e6e9      	b.n	8003d20 <HAL_UART_IRQHandler+0x50>
 8003f4c:	08003bdb 	.word	0x08003bdb

08003f50 <UART_Start_Receive_IT>:
{
 8003f50:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8003f52:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f54:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f56:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	2000      	movs	r0, #0
 8003f5a:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f5c:	2222      	movs	r2, #34	; 0x22
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8003f62:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f66:	6819      	ldr	r1, [r3, #0]
 8003f68:	68ca      	ldr	r2, [r1, #12]
 8003f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6e:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	694a      	ldr	r2, [r1, #20]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68d3      	ldr	r3, [r2, #12]
 8003f7e:	f043 0320 	orr.w	r3, r3, #32
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	4770      	bx	lr

08003f86 <HAL_UART_Receive_IT>:
{
 8003f86:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f88:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d10d      	bne.n	8003fae <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8003f92:	b171      	cbz	r1, 8003fb2 <HAL_UART_Receive_IT+0x2c>
 8003f94:	b17a      	cbz	r2, 8003fb6 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8003f96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d00d      	beq.n	8003fba <HAL_UART_Receive_IT+0x34>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa8:	f7ff ffd2 	bl	8003f50 <UART_Start_Receive_IT>
 8003fac:	e000      	b.n	8003fb0 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8003fae:	2002      	movs	r0, #2
}
 8003fb0:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e7fc      	b.n	8003fb0 <HAL_UART_Receive_IT+0x2a>
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	e7fa      	b.n	8003fb0 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8003fba:	2002      	movs	r0, #2
 8003fbc:	e7f8      	b.n	8003fb0 <HAL_UART_Receive_IT+0x2a>
	...

08003fc0 <MCP4661_SetWiper>:
	cmd = (wiper_index << 4) | (DECREMENT_CMD << 2);
	HAL_I2C_Master_Transmit_DMA(&hi2c2, MCP4661_addr[pot_number], &cmd, 1);
}

void MCP4661_SetWiper(uint16_t value, uint8_t pot_number, uint8_t wiper_index)
{
 8003fc0:	b500      	push	{lr}
 8003fc2:	b085      	sub	sp, #20
		uint8_t cmd[2];
		if(value > STEPS_NUM) //if value given is higher than maximal number of steps
 8003fc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003fc8:	d901      	bls.n	8003fce <MCP4661_SetWiper+0xe>
		{
			value = STEPS_NUM;
 8003fca:	f44f 7080 	mov.w	r0, #256	; 0x100
		}
		cmd[0] = ((value & 0x100) >> 8); //MSB is sent at LSB of mode command, fig. 7.2 at p.59 in MCP4661 datasheet
 8003fce:	f3c0 2300 	ubfx	r3, r0, #8, #1
 8003fd2:	f88d 300c 	strb.w	r3, [sp, #12]
		if(wiper_index == 0)
 8003fd6:	b11a      	cbz	r2, 8003fe0 <MCP4661_SetWiper+0x20>
			cmd[0] |= (VOLATILE_WIPER_0_ADDR<<4) | (WRITE_CMD<<2);
		else
			cmd[0] |= (VOLATILE_WIPER_1_ADDR<<4) | (WRITE_CMD<<2);
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	f88d 300c 	strb.w	r3, [sp, #12]

		cmd[1] = value;
 8003fe0:	f88d 000d 	strb.w	r0, [sp, #13]
		HAL_I2C_Master_Transmit(&hi2c2, MCP4661_addr[pot_number], cmd, 2,1);
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2302      	movs	r3, #2
 8003fea:	aa03      	add	r2, sp, #12
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <MCP4661_SetWiper+0x3c>)
 8003fee:	5c41      	ldrb	r1, [r0, r1]
 8003ff0:	4803      	ldr	r0, [pc, #12]	; (8004000 <MCP4661_SetWiper+0x40>)
 8003ff2:	f7fd fe9f 	bl	8001d34 <HAL_I2C_Master_Transmit>
}
 8003ff6:	b005      	add	sp, #20
 8003ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ffc:	08004c9c 	.word	0x08004c9c
 8004000:	20000130 	.word	0x20000130

08004004 <MCP4661_ReadWiper>:

uint16_t MCP4661_ReadWiper(uint8_t pot_number, uint8_t wiper_index)
{
 8004004:	b500      	push	{lr}
 8004006:	b087      	sub	sp, #28
	uint8_t cmd;
	uint8_t buf[2];
	if(wiper_index == 0)
 8004008:	b9b1      	cbnz	r1, 8004038 <MCP4661_ReadWiper+0x34>
		cmd = (VOLATILE_WIPER_0_ADDR<<4) | (READ_CMD<<2);
 800400a:	220c      	movs	r2, #12
	else
		cmd = (VOLATILE_WIPER_1_ADDR<<4) | (READ_CMD<<2);

	HAL_I2C_Mem_Read(&hi2c2, MCP4661_addr[pot_number], cmd, I2C_MEMADD_SIZE_8BIT, buf, 2,1);
 800400c:	2301      	movs	r3, #1
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	2102      	movs	r1, #2
 8004012:	9101      	str	r1, [sp, #4]
 8004014:	a905      	add	r1, sp, #20
 8004016:	9100      	str	r1, [sp, #0]
 8004018:	4908      	ldr	r1, [pc, #32]	; (800403c <MCP4661_ReadWiper+0x38>)
 800401a:	5c09      	ldrb	r1, [r1, r0]
 800401c:	4808      	ldr	r0, [pc, #32]	; (8004040 <MCP4661_ReadWiper+0x3c>)
 800401e:	f7fd ff45 	bl	8001eac <HAL_I2C_Mem_Read>
	return buf[1] | ((buf[0] & 0x01) << 8);
 8004022:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8004026:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
}
 8004030:	4318      	orrs	r0, r3
 8004032:	b007      	add	sp, #28
 8004034:	f85d fb04 	ldr.w	pc, [sp], #4
		cmd = (VOLATILE_WIPER_1_ADDR<<4) | (READ_CMD<<2);
 8004038:	221c      	movs	r2, #28
 800403a:	e7e7      	b.n	800400c <MCP4661_ReadWiper+0x8>
 800403c:	08004c9c 	.word	0x08004c9c
 8004040:	20000130 	.word	0x20000130

08004044 <UART_Parse>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004044:	b672      	cpsid	i
	//static uint8_t parser_lock = 0;
	static uint8_t cmd = 0xff;
	__disable_irq();


	if(parser_state == PARSED)
 8004046:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <UART_Parse+0xf4>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d013      	beq.n	8004076 <UART_Parse+0x32>
		msg[0] = input;				// first byte / one byte command
		cmd = (msg[0] >> 4) & 0x0F;
		parser_state = CMD_OK;
	}

	if(parser_state == ONE_MORE)	// second byte (2 bytes command) / third byte (3 bytes command)
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <UART_Parse+0xf4>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d017      	beq.n	8004086 <UART_Parse+0x42>
	{
		msg[2] = input;
		parser_state = READY;
	}

	if(parser_state == TWO_MORE)   // second byte (3 bytes command)
 8004056:	4b38      	ldr	r3, [pc, #224]	; (8004138 <UART_Parse+0xf4>)
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	2a02      	cmp	r2, #2
 800405c:	d019      	beq.n	8004092 <UART_Parse+0x4e>
		msg[1] = input;
		parser_state = ONE_MORE;
		goto exit;
	}

	switch(cmd)
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <UART_Parse+0xf4>)
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	3b01      	subs	r3, #1
 8004064:	2b09      	cmp	r3, #9
 8004066:	d819      	bhi.n	800409c <UART_Parse+0x58>
 8004068:	e8df f003 	tbb	[pc, r3]
 800406c:	4518261b 	.word	0x4518261b
 8004070:	18181818 	.word	0x18181818
 8004074:	5b50      	.short	0x5b50
		msg[0] = input;				// first byte / one byte command
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <UART_Parse+0xf8>)
 8004078:	7018      	strb	r0, [r3, #0]
		cmd = (msg[0] >> 4) & 0x0F;
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <UART_Parse+0xf4>)
 800407c:	0902      	lsrs	r2, r0, #4
 800407e:	705a      	strb	r2, [r3, #1]
		parser_state = CMD_OK;
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e7e3      	b.n	800404e <UART_Parse+0xa>
		msg[2] = input;
 8004086:	4b2d      	ldr	r3, [pc, #180]	; (800413c <UART_Parse+0xf8>)
 8004088:	7098      	strb	r0, [r3, #2]
		parser_state = READY;
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <UART_Parse+0xf4>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e7e1      	b.n	8004056 <UART_Parse+0x12>
		msg[1] = input;
 8004092:	4b2a      	ldr	r3, [pc, #168]	; (800413c <UART_Parse+0xf8>)
 8004094:	7058      	strb	r0, [r3, #1]
		parser_state = ONE_MORE;
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <UART_Parse+0xf4>)
 8004098:	2203      	movs	r2, #3
 800409a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800409c:	b662      	cpsie	i

//	if(parser_state == CMD_OK) parser_state = PARSED;		//!!!!

		exit:
		__enable_irq();
		asm("nop");
 800409e:	bf00      	nop
 80040a0:	4770      	bx	lr
		if(parser_state == CMD_OK)
 80040a2:	b12a      	cbz	r2, 80040b0 <UART_Parse+0x6c>
		else if(parser_state == READY)
 80040a4:	2a01      	cmp	r2, #1
 80040a6:	d1f9      	bne.n	800409c <UART_Parse+0x58>
			parser_state = PARSED;
 80040a8:	4b23      	ldr	r3, [pc, #140]	; (8004138 <UART_Parse+0xf4>)
 80040aa:	2204      	movs	r2, #4
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e7f5      	b.n	800409c <UART_Parse+0x58>
			parser_state = ONE_MORE;
 80040b0:	4b21      	ldr	r3, [pc, #132]	; (8004138 <UART_Parse+0xf4>)
 80040b2:	2203      	movs	r2, #3
 80040b4:	701a      	strb	r2, [r3, #0]
			goto exit;
 80040b6:	e7f1      	b.n	800409c <UART_Parse+0x58>
		if(parser_state == CMD_OK)
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	d1ef      	bne.n	800409c <UART_Parse+0x58>
{
 80040bc:	b510      	push	{r4, lr}
 80040be:	b082      	sub	sp, #8
			uint8_t channelNumber = (msg[0] & 0x0F);
 80040c0:	4c1e      	ldr	r4, [pc, #120]	; (800413c <UART_Parse+0xf8>)
 80040c2:	7821      	ldrb	r1, [r4, #0]
			uint8_t potNumber = (channelNumber/2);
 80040c4:	f3c1 0042 	ubfx	r0, r1, #1, #3
 80040c8:	b662      	cpsie	i
			uint8_t wiperRead = MCP4661_ReadWiper(potNumber,channelNumber%2);
 80040ca:	f001 0101 	and.w	r1, r1, #1
 80040ce:	f7ff ff99 	bl	8004004 <MCP4661_ReadWiper>
 80040d2:	f88d 0007 	strb.w	r0, [sp, #7]
			if(!measureFlag)	HAL_UART_Transmit_IT(&huart1,&wiperRead,sizeof(wiperRead));
 80040d6:	78e3      	ldrb	r3, [r4, #3]
 80040d8:	b133      	cbz	r3, 80040e8 <UART_Parse+0xa4>
			parser_state = PARSED;
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <UART_Parse+0xf4>)
 80040dc:	2204      	movs	r2, #4
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	b662      	cpsie	i
		asm("nop");
 80040e2:	bf00      	nop
}
 80040e4:	b002      	add	sp, #8
 80040e6:	bd10      	pop	{r4, pc}
			if(!measureFlag)	HAL_UART_Transmit_IT(&huart1,&wiperRead,sizeof(wiperRead));
 80040e8:	2201      	movs	r2, #1
 80040ea:	f10d 0107 	add.w	r1, sp, #7
 80040ee:	4814      	ldr	r0, [pc, #80]	; (8004140 <UART_Parse+0xfc>)
 80040f0:	f7ff fc99 	bl	8003a26 <HAL_UART_Transmit_IT>
 80040f4:	e7f1      	b.n	80040da <UART_Parse+0x96>
		if(parser_state == CMD_OK)
 80040f6:	b12a      	cbz	r2, 8004104 <UART_Parse+0xc0>
		else if(parser_state == READY)
 80040f8:	2a01      	cmp	r2, #1
 80040fa:	d1cf      	bne.n	800409c <UART_Parse+0x58>
			parser_state = PARSED;
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <UART_Parse+0xf4>)
 80040fe:	2204      	movs	r2, #4
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e7cb      	b.n	800409c <UART_Parse+0x58>
			parser_state = ONE_MORE;
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <UART_Parse+0xf4>)
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
			goto exit;
 800410a:	e7c7      	b.n	800409c <UART_Parse+0x58>
		if(parser_state == CMD_OK)
 800410c:	2a00      	cmp	r2, #0
 800410e:	d1c5      	bne.n	800409c <UART_Parse+0x58>
			measureFlag = 1;
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <UART_Parse+0xf8>)
 8004112:	2201      	movs	r2, #1
 8004114:	70da      	strb	r2, [r3, #3]
			time = 0;
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
			parser_state = PARSED;
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <UART_Parse+0xf4>)
 800411c:	2204      	movs	r2, #4
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e7bc      	b.n	800409c <UART_Parse+0x58>
		if(parser_state == CMD_OK)
 8004122:	2a00      	cmp	r2, #0
 8004124:	d1ba      	bne.n	800409c <UART_Parse+0x58>
  __ASM volatile ("cpsid i" : : : "memory");
 8004126:	b672      	cpsid	i
			measureFlag = 0;
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <UART_Parse+0xf8>)
 800412a:	70da      	strb	r2, [r3, #3]
			parser_state = PARSED;
 800412c:	4b02      	ldr	r3, [pc, #8]	; (8004138 <UART_Parse+0xf4>)
 800412e:	2204      	movs	r2, #4
 8004130:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004132:	b662      	cpsie	i
}
 8004134:	e7b2      	b.n	800409c <UART_Parse+0x58>
 8004136:	bf00      	nop
 8004138:	20000008 	.word	0x20000008
 800413c:	20000044 	.word	0x20000044
 8004140:	20000334 	.word	0x20000334

08004144 <UART_PrepareData>:

void UART_PrepareData()
{
 8004144:	b430      	push	{r4, r5}
	uartFrame[START_CHAR_POS] = START_CHAR;
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <UART_PrepareData+0x40>)
 8004148:	223c      	movs	r2, #60	; 0x3c
 800414a:	701a      	strb	r2, [r3, #0]
	memcpy((void*)&uartFrame[TIME_POS], (void*)&time, sizeof(time));
 800414c:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <UART_PrepareData+0x44>)
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	f8c3 2001 	str.w	r2, [r3, #1]
	memcpy((void*)&uartFrame[MEASUREMENTS_POS], (void*)adcValue, sizeof(adcValue));
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <UART_PrepareData+0x48>)
 8004156:	6811      	ldr	r1, [r2, #0]
 8004158:	6855      	ldr	r5, [r2, #4]
 800415a:	6894      	ldr	r4, [r2, #8]
 800415c:	68d0      	ldr	r0, [r2, #12]
 800415e:	f8c3 1005 	str.w	r1, [r3, #5]
 8004162:	f8c3 5009 	str.w	r5, [r3, #9]
 8004166:	f8c3 400d 	str.w	r4, [r3, #13]
 800416a:	f8c3 0011 	str.w	r0, [r3, #17]
 800416e:	6911      	ldr	r1, [r2, #16]
 8004170:	f8c3 1015 	str.w	r1, [r3, #21]
 8004174:	8a92      	ldrh	r2, [r2, #20]
 8004176:	f8a3 2019 	strh.w	r2, [r3, #25]
	uartFrame[STOP_CHAR_POS] = STOP_CHAR;
 800417a:	223e      	movs	r2, #62	; 0x3e
 800417c:	76da      	strb	r2, [r3, #27]
//		uartFrame[STOP_CHAR_POS] = STOP_CHAR;




}
 800417e:	bc30      	pop	{r4, r5}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000050 	.word	0x20000050
 8004188:	20000044 	.word	0x20000044
 800418c:	20000118 	.word	0x20000118

08004190 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004190:	b510      	push	{r4, lr}
	  UART_Parse(receivedData);
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <HAL_UART_RxCpltCallback+0x18>)
 8004194:	7820      	ldrb	r0, [r4, #0]
 8004196:	f7ff ff55 	bl	8004044 <UART_Parse>
	  HAL_UART_Receive_IT(&huart1, &receivedData, 1);
 800419a:	2201      	movs	r2, #1
 800419c:	4621      	mov	r1, r4
 800419e:	4803      	ldr	r0, [pc, #12]	; (80041ac <HAL_UART_RxCpltCallback+0x1c>)
 80041a0:	f7ff fef1 	bl	8003f86 <HAL_UART_Receive_IT>
}
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	bf00      	nop
 80041a8:	2000006c 	.word	0x2000006c
 80041ac:	20000334 	.word	0x20000334

080041b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80041b0:	b500      	push	{lr}
 80041b2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041b4:	2300      	movs	r3, #0
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80041be:	4856      	ldr	r0, [pc, #344]	; (8004318 <MX_ADC1_Init+0x168>)
 80041c0:	4a56      	ldr	r2, [pc, #344]	; (800431c <MX_ADC1_Init+0x16c>)
 80041c2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80041c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041c8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041ca:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80041cc:	2201      	movs	r2, #1
 80041ce:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80041d0:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041d2:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041d8:	4951      	ldr	r1, [pc, #324]	; (8004320 <MX_ADC1_Init+0x170>)
 80041da:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041dc:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 11;
 80041de:	210b      	movs	r1, #11
 80041e0:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80041e2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80041e6:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041e8:	f7fc fa54 	bl	8000694 <HAL_ADC_Init>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d16e      	bne.n	80042ce <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80041f4:	2301      	movs	r3, #1
 80041f6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80041f8:	2306      	movs	r3, #6
 80041fa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041fc:	4669      	mov	r1, sp
 80041fe:	4846      	ldr	r0, [pc, #280]	; (8004318 <MX_ADC1_Init+0x168>)
 8004200:	f7fc fc36 	bl	8000a70 <HAL_ADC_ConfigChannel>
 8004204:	2800      	cmp	r0, #0
 8004206:	d165      	bne.n	80042d4 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004208:	2301      	movs	r3, #1
 800420a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800420c:	2302      	movs	r3, #2
 800420e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004210:	4669      	mov	r1, sp
 8004212:	4841      	ldr	r0, [pc, #260]	; (8004318 <MX_ADC1_Init+0x168>)
 8004214:	f7fc fc2c 	bl	8000a70 <HAL_ADC_ConfigChannel>
 8004218:	2800      	cmp	r0, #0
 800421a:	d15e      	bne.n	80042da <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800421c:	2302      	movs	r3, #2
 800421e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8004220:	2303      	movs	r3, #3
 8004222:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004224:	4669      	mov	r1, sp
 8004226:	483c      	ldr	r0, [pc, #240]	; (8004318 <MX_ADC1_Init+0x168>)
 8004228:	f7fc fc22 	bl	8000a70 <HAL_ADC_ConfigChannel>
 800422c:	2800      	cmp	r0, #0
 800422e:	d157      	bne.n	80042e0 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004230:	2303      	movs	r3, #3
 8004232:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 8004234:	2304      	movs	r3, #4
 8004236:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004238:	4669      	mov	r1, sp
 800423a:	4837      	ldr	r0, [pc, #220]	; (8004318 <MX_ADC1_Init+0x168>)
 800423c:	f7fc fc18 	bl	8000a70 <HAL_ADC_ConfigChannel>
 8004240:	2800      	cmp	r0, #0
 8004242:	d150      	bne.n	80042e6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004244:	2304      	movs	r3, #4
 8004246:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 8004248:	2305      	movs	r3, #5
 800424a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800424c:	4669      	mov	r1, sp
 800424e:	4832      	ldr	r0, [pc, #200]	; (8004318 <MX_ADC1_Init+0x168>)
 8004250:	f7fc fc0e 	bl	8000a70 <HAL_ADC_ConfigChannel>
 8004254:	2800      	cmp	r0, #0
 8004256:	d149      	bne.n	80042ec <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004258:	2305      	movs	r3, #5
 800425a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 800425c:	2306      	movs	r3, #6
 800425e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004260:	4669      	mov	r1, sp
 8004262:	482d      	ldr	r0, [pc, #180]	; (8004318 <MX_ADC1_Init+0x168>)
 8004264:	f7fc fc04 	bl	8000a70 <HAL_ADC_ConfigChannel>
 8004268:	2800      	cmp	r0, #0
 800426a:	d142      	bne.n	80042f2 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800426c:	2306      	movs	r3, #6
 800426e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 8004270:	2307      	movs	r3, #7
 8004272:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004274:	4669      	mov	r1, sp
 8004276:	4828      	ldr	r0, [pc, #160]	; (8004318 <MX_ADC1_Init+0x168>)
 8004278:	f7fc fbfa 	bl	8000a70 <HAL_ADC_ConfigChannel>
 800427c:	2800      	cmp	r0, #0
 800427e:	d13b      	bne.n	80042f8 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004280:	2307      	movs	r3, #7
 8004282:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 8004284:	2308      	movs	r3, #8
 8004286:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004288:	4669      	mov	r1, sp
 800428a:	4823      	ldr	r0, [pc, #140]	; (8004318 <MX_ADC1_Init+0x168>)
 800428c:	f7fc fbf0 	bl	8000a70 <HAL_ADC_ConfigChannel>
 8004290:	bba8      	cbnz	r0, 80042fe <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004292:	2308      	movs	r3, #8
 8004294:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 8004296:	2309      	movs	r3, #9
 8004298:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800429a:	4669      	mov	r1, sp
 800429c:	481e      	ldr	r0, [pc, #120]	; (8004318 <MX_ADC1_Init+0x168>)
 800429e:	f7fc fbe7 	bl	8000a70 <HAL_ADC_ConfigChannel>
 80042a2:	bb78      	cbnz	r0, 8004304 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80042a4:	2309      	movs	r3, #9
 80042a6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 80042a8:	230a      	movs	r3, #10
 80042aa:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042ac:	4669      	mov	r1, sp
 80042ae:	481a      	ldr	r0, [pc, #104]	; (8004318 <MX_ADC1_Init+0x168>)
 80042b0:	f7fc fbde 	bl	8000a70 <HAL_ADC_ConfigChannel>
 80042b4:	bb48      	cbnz	r0, 800430a <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80042b6:	230a      	movs	r3, #10
 80042b8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 11;
 80042ba:	230b      	movs	r3, #11
 80042bc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042be:	4669      	mov	r1, sp
 80042c0:	4815      	ldr	r0, [pc, #84]	; (8004318 <MX_ADC1_Init+0x168>)
 80042c2:	f7fc fbd5 	bl	8000a70 <HAL_ADC_ConfigChannel>
 80042c6:	bb18      	cbnz	r0, 8004310 <MX_ADC1_Init+0x160>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042c8:	b005      	add	sp, #20
 80042ca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80042ce:	f000 fac7 	bl	8004860 <Error_Handler>
 80042d2:	e78d      	b.n	80041f0 <MX_ADC1_Init+0x40>
    Error_Handler();
 80042d4:	f000 fac4 	bl	8004860 <Error_Handler>
 80042d8:	e796      	b.n	8004208 <MX_ADC1_Init+0x58>
    Error_Handler();
 80042da:	f000 fac1 	bl	8004860 <Error_Handler>
 80042de:	e79d      	b.n	800421c <MX_ADC1_Init+0x6c>
    Error_Handler();
 80042e0:	f000 fabe 	bl	8004860 <Error_Handler>
 80042e4:	e7a4      	b.n	8004230 <MX_ADC1_Init+0x80>
    Error_Handler();
 80042e6:	f000 fabb 	bl	8004860 <Error_Handler>
 80042ea:	e7ab      	b.n	8004244 <MX_ADC1_Init+0x94>
    Error_Handler();
 80042ec:	f000 fab8 	bl	8004860 <Error_Handler>
 80042f0:	e7b2      	b.n	8004258 <MX_ADC1_Init+0xa8>
    Error_Handler();
 80042f2:	f000 fab5 	bl	8004860 <Error_Handler>
 80042f6:	e7b9      	b.n	800426c <MX_ADC1_Init+0xbc>
    Error_Handler();
 80042f8:	f000 fab2 	bl	8004860 <Error_Handler>
 80042fc:	e7c0      	b.n	8004280 <MX_ADC1_Init+0xd0>
    Error_Handler();
 80042fe:	f000 faaf 	bl	8004860 <Error_Handler>
 8004302:	e7c6      	b.n	8004292 <MX_ADC1_Init+0xe2>
    Error_Handler();
 8004304:	f000 faac 	bl	8004860 <Error_Handler>
 8004308:	e7cc      	b.n	80042a4 <MX_ADC1_Init+0xf4>
    Error_Handler();
 800430a:	f000 faa9 	bl	8004860 <Error_Handler>
 800430e:	e7d2      	b.n	80042b6 <MX_ADC1_Init+0x106>
    Error_Handler();
 8004310:	f000 faa6 	bl	8004860 <Error_Handler>
}
 8004314:	e7d8      	b.n	80042c8 <MX_ADC1_Init+0x118>
 8004316:	bf00      	nop
 8004318:	20000070 	.word	0x20000070
 800431c:	40012000 	.word	0x40012000
 8004320:	0f000001 	.word	0x0f000001

08004324 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	2300      	movs	r3, #0
 800432a:	9305      	str	r3, [sp, #20]
 800432c:	9306      	str	r3, [sp, #24]
 800432e:	9307      	str	r3, [sp, #28]
 8004330:	9308      	str	r3, [sp, #32]
 8004332:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8004334:	6802      	ldr	r2, [r0, #0]
 8004336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800433a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800433e:	429a      	cmp	r2, r3
 8004340:	d001      	beq.n	8004346 <HAL_ADC_MspInit+0x22>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004342:	b00a      	add	sp, #40	; 0x28
 8004344:	bd70      	pop	{r4, r5, r6, pc}
 8004346:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004348:	2500      	movs	r5, #0
 800434a:	9501      	str	r5, [sp, #4]
 800434c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004356:	645a      	str	r2, [r3, #68]	; 0x44
 8004358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004362:	9502      	str	r5, [sp, #8]
 8004364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004366:	f042 0204 	orr.w	r2, r2, #4
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	f002 0204 	and.w	r2, r2, #4
 8004372:	9202      	str	r2, [sp, #8]
 8004374:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	9503      	str	r5, [sp, #12]
 8004378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
 8004380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004382:	f002 0201 	and.w	r2, r2, #1
 8004386:	9203      	str	r2, [sp, #12]
 8004388:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800438a:	9504      	str	r5, [sp, #16]
 800438c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438e:	f042 0202 	orr.w	r2, r2, #2
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800439e:	2301      	movs	r3, #1
 80043a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043a2:	2603      	movs	r6, #3
 80043a4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a8:	a905      	add	r1, sp, #20
 80043aa:	481c      	ldr	r0, [pc, #112]	; (800441c <HAL_ADC_MspInit+0xf8>)
 80043ac:	f7fc fefe 	bl	80011ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80043b0:	23ff      	movs	r3, #255	; 0xff
 80043b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043b4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b8:	a905      	add	r1, sp, #20
 80043ba:	4819      	ldr	r0, [pc, #100]	; (8004420 <HAL_ADC_MspInit+0xfc>)
 80043bc:	f7fc fef6 	bl	80011ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043c0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043c2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c6:	a905      	add	r1, sp, #20
 80043c8:	4816      	ldr	r0, [pc, #88]	; (8004424 <HAL_ADC_MspInit+0x100>)
 80043ca:	f7fc feef 	bl	80011ac <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80043ce:	4816      	ldr	r0, [pc, #88]	; (8004428 <HAL_ADC_MspInit+0x104>)
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_ADC_MspInit+0x108>)
 80043d2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80043d4:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043d6:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d8:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043de:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043e4:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ea:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f0:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043f2:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043f4:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043f6:	f7fc fcef 	bl	8000dd8 <HAL_DMA_Init>
 80043fa:	b958      	cbnz	r0, 8004414 <HAL_ADC_MspInit+0xf0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_ADC_MspInit+0x104>)
 80043fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8004400:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	4611      	mov	r1, r2
 8004406:	2012      	movs	r0, #18
 8004408:	f7fc fc0e 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800440c:	2012      	movs	r0, #18
 800440e:	f7fc fc3f 	bl	8000c90 <HAL_NVIC_EnableIRQ>
}
 8004412:	e796      	b.n	8004342 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8004414:	f000 fa24 	bl	8004860 <Error_Handler>
 8004418:	e7f0      	b.n	80043fc <HAL_ADC_MspInit+0xd8>
 800441a:	bf00      	nop
 800441c:	40020800 	.word	0x40020800
 8004420:	40020000 	.word	0x40020000
 8004424:	40020400 	.word	0x40020400
 8004428:	200000b8 	.word	0x200000b8
 800442c:	40026410 	.word	0x40026410

08004430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004430:	b510      	push	{r4, lr}
 8004432:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004434:	2400      	movs	r4, #0
 8004436:	9400      	str	r4, [sp, #0]
 8004438:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <MX_DMA_Init+0x74>)
 800443a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
 8004442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004444:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800444c:	9401      	str	r4, [sp, #4]
 800444e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004450:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004460:	4622      	mov	r2, r4
 8004462:	4621      	mov	r1, r4
 8004464:	200d      	movs	r0, #13
 8004466:	f7fc fbdf 	bl	8000c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800446a:	200d      	movs	r0, #13
 800446c:	f7fc fc10 	bl	8000c90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004470:	4622      	mov	r2, r4
 8004472:	4621      	mov	r1, r4
 8004474:	202f      	movs	r0, #47	; 0x2f
 8004476:	f7fc fbd7 	bl	8000c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800447a:	202f      	movs	r0, #47	; 0x2f
 800447c:	f7fc fc08 	bl	8000c90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004480:	4622      	mov	r2, r4
 8004482:	4621      	mov	r1, r4
 8004484:	2038      	movs	r0, #56	; 0x38
 8004486:	f7fc fbcf 	bl	8000c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800448a:	2038      	movs	r0, #56	; 0x38
 800448c:	f7fc fc00 	bl	8000c90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8004490:	4622      	mov	r2, r4
 8004492:	4621      	mov	r1, r4
 8004494:	2046      	movs	r0, #70	; 0x46
 8004496:	f7fc fbc7 	bl	8000c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800449a:	2046      	movs	r0, #70	; 0x46
 800449c:	f7fc fbf8 	bl	8000c90 <HAL_NVIC_EnableIRQ>

}
 80044a0:	b002      	add	sp, #8
 80044a2:	bd10      	pop	{r4, pc}
 80044a4:	40023800 	.word	0x40023800

080044a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	2400      	movs	r4, #0
 80044ae:	9405      	str	r4, [sp, #20]
 80044b0:	9406      	str	r4, [sp, #24]
 80044b2:	9407      	str	r4, [sp, #28]
 80044b4:	9408      	str	r4, [sp, #32]
 80044b6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b8:	9400      	str	r4, [sp, #0]
 80044ba:	4b34      	ldr	r3, [pc, #208]	; (800458c <MX_GPIO_Init+0xe4>)
 80044bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044be:	f042 0204 	orr.w	r2, r2, #4
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
 80044c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c6:	f002 0204 	and.w	r2, r2, #4
 80044ca:	9200      	str	r2, [sp, #0]
 80044cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ce:	9401      	str	r4, [sp, #4]
 80044d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
 80044d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044da:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80044de:	9201      	str	r2, [sp, #4]
 80044e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e2:	9402      	str	r4, [sp, #8]
 80044e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
 80044ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ee:	f002 0201 	and.w	r2, r2, #1
 80044f2:	9202      	str	r2, [sp, #8]
 80044f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f6:	9403      	str	r4, [sp, #12]
 80044f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fa:	f042 0202 	orr.w	r2, r2, #2
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004502:	f002 0202 	and.w	r2, r2, #2
 8004506:	9203      	str	r2, [sp, #12]
 8004508:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800450a:	9404      	str	r4, [sp, #16]
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	9304      	str	r3, [sp, #16]
 800451c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FTDI_RESET_GPIO_Port, FTDI_RESET_Pin, GPIO_PIN_SET);
 800451e:	4e1c      	ldr	r6, [pc, #112]	; (8004590 <MX_GPIO_Init+0xe8>)
 8004520:	2201      	movs	r2, #1
 8004522:	2120      	movs	r1, #32
 8004524:	4630      	mov	r0, r6
 8004526:	f7fc ff2b 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800452a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800452e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004530:	2503      	movs	r5, #3
 8004532:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004536:	a905      	add	r1, sp, #20
 8004538:	4816      	ldr	r0, [pc, #88]	; (8004594 <MX_GPIO_Init+0xec>)
 800453a:	f7fc fe37 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800453e:	f24f 33dc 	movw	r3, #62428	; 0xf3dc
 8004542:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004544:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	a905      	add	r1, sp, #20
 800454a:	4630      	mov	r0, r6
 800454c:	f7fc fe2e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8004550:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8004554:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004556:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455a:	a905      	add	r1, sp, #20
 800455c:	480e      	ldr	r0, [pc, #56]	; (8004598 <MX_GPIO_Init+0xf0>)
 800455e:	f7fc fe25 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004562:	2304      	movs	r3, #4
 8004564:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004566:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004568:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800456a:	a905      	add	r1, sp, #20
 800456c:	480b      	ldr	r0, [pc, #44]	; (800459c <MX_GPIO_Init+0xf4>)
 800456e:	f7fc fe1d 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FTDI_RESET_Pin;
 8004572:	2320      	movs	r3, #32
 8004574:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004576:	2301      	movs	r3, #1
 8004578:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(FTDI_RESET_GPIO_Port, &GPIO_InitStruct);
 800457e:	a905      	add	r1, sp, #20
 8004580:	4630      	mov	r0, r6
 8004582:	f7fc fe13 	bl	80011ac <HAL_GPIO_Init>

}
 8004586:	b00a      	add	sp, #40	; 0x28
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	40020400 	.word	0x40020400
 8004594:	40020800 	.word	0x40020800
 8004598:	40020000 	.word	0x40020000
 800459c:	40020c00 	.word	0x40020c00

080045a0 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80045a0:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80045a2:	480b      	ldr	r0, [pc, #44]	; (80045d0 <MX_I2C2_Init+0x30>)
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <MX_I2C2_Init+0x34>)
 80045a6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <MX_I2C2_Init+0x38>)
 80045aa:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045ac:	2300      	movs	r3, #0
 80045ae:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80045b0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045b6:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045b8:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80045ba:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045bc:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045be:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80045c0:	f7fd fada 	bl	8001b78 <HAL_I2C_Init>
 80045c4:	b900      	cbnz	r0, 80045c8 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80045c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80045c8:	f000 f94a 	bl	8004860 <Error_Handler>
}
 80045cc:	e7fb      	b.n	80045c6 <MX_I2C2_Init+0x26>
 80045ce:	bf00      	nop
 80045d0:	20000130 	.word	0x20000130
 80045d4:	40005800 	.word	0x40005800
 80045d8:	000186a0 	.word	0x000186a0

080045dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	2300      	movs	r3, #0
 80045e2:	9303      	str	r3, [sp, #12]
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	9306      	str	r3, [sp, #24]
 80045ea:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 80045ec:	6802      	ldr	r2, [r0, #0]
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <HAL_I2C_MspInit+0xe8>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80045f4:	b008      	add	sp, #32
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fa:	2500      	movs	r5, #0
 80045fc:	9501      	str	r5, [sp, #4]
 80045fe:	4e32      	ldr	r6, [pc, #200]	; (80046c8 <HAL_I2C_MspInit+0xec>)
 8004600:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	6333      	str	r3, [r6, #48]	; 0x30
 8004608:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004612:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004616:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004618:	2312      	movs	r3, #18
 800461a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004620:	2304      	movs	r3, #4
 8004622:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	a903      	add	r1, sp, #12
 8004626:	4829      	ldr	r0, [pc, #164]	; (80046cc <HAL_I2C_MspInit+0xf0>)
 8004628:	f7fc fdc0 	bl	80011ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800462c:	9502      	str	r5, [sp, #8]
 800462e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004634:	6433      	str	r3, [r6, #64]	; 0x40
 8004636:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463c:	9302      	str	r3, [sp, #8]
 800463e:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8004640:	4823      	ldr	r0, [pc, #140]	; (80046d0 <HAL_I2C_MspInit+0xf4>)
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <HAL_I2C_MspInit+0xf8>)
 8004644:	6003      	str	r3, [r0, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8004646:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 800464a:	6043      	str	r3, [r0, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800464c:	6085      	str	r5, [r0, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800464e:	60c5      	str	r5, [r0, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004654:	6103      	str	r3, [r0, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004656:	6145      	str	r5, [r0, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004658:	6185      	str	r5, [r0, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800465a:	61c5      	str	r5, [r0, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800465c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004660:	6203      	str	r3, [r0, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004662:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8004664:	f7fc fbb8 	bl	8000dd8 <HAL_DMA_Init>
 8004668:	bb28      	cbnz	r0, 80046b6 <HAL_I2C_MspInit+0xda>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800466a:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <HAL_I2C_MspInit+0xf4>)
 800466c:	63a3      	str	r3, [r4, #56]	; 0x38
 800466e:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8004670:	4819      	ldr	r0, [pc, #100]	; (80046d8 <HAL_I2C_MspInit+0xfc>)
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_I2C_MspInit+0x100>)
 8004674:	6003      	str	r3, [r0, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8004676:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 800467a:	6043      	str	r3, [r0, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	6083      	str	r3, [r0, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	60c3      	str	r3, [r0, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004688:	6102      	str	r2, [r0, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800468a:	6143      	str	r3, [r0, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800468c:	6183      	str	r3, [r0, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800468e:	61c3      	str	r3, [r0, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004694:	6202      	str	r2, [r0, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004696:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8004698:	f7fc fb9e 	bl	8000dd8 <HAL_DMA_Init>
 800469c:	b970      	cbnz	r0, 80046bc <HAL_I2C_MspInit+0xe0>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_I2C_MspInit+0xfc>)
 80046a0:	6363      	str	r3, [r4, #52]	; 0x34
 80046a2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2102      	movs	r1, #2
 80046a8:	2021      	movs	r0, #33	; 0x21
 80046aa:	f7fc fabd 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80046ae:	2021      	movs	r0, #33	; 0x21
 80046b0:	f7fc faee 	bl	8000c90 <HAL_NVIC_EnableIRQ>
}
 80046b4:	e79e      	b.n	80045f4 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 80046b6:	f000 f8d3 	bl	8004860 <Error_Handler>
 80046ba:	e7d6      	b.n	800466a <HAL_I2C_MspInit+0x8e>
      Error_Handler();
 80046bc:	f000 f8d0 	bl	8004860 <Error_Handler>
 80046c0:	e7ed      	b.n	800469e <HAL_I2C_MspInit+0xc2>
 80046c2:	bf00      	nop
 80046c4:	40005800 	.word	0x40005800
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020400 	.word	0x40020400
 80046d0:	20000184 	.word	0x20000184
 80046d4:	40026040 	.word	0x40026040
 80046d8:	200001e4 	.word	0x200001e4
 80046dc:	400260b8 	.word	0x400260b8

080046e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046e0:	b530      	push	{r4, r5, lr}
 80046e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046e4:	2230      	movs	r2, #48	; 0x30
 80046e6:	2100      	movs	r1, #0
 80046e8:	a808      	add	r0, sp, #32
 80046ea:	f000 fabf 	bl	8004c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046ee:	2400      	movs	r4, #0
 80046f0:	9403      	str	r4, [sp, #12]
 80046f2:	9404      	str	r4, [sp, #16]
 80046f4:	9405      	str	r4, [sp, #20]
 80046f6:	9406      	str	r4, [sp, #24]
 80046f8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	9401      	str	r4, [sp, #4]
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <SystemClock_Config+0x88>)
 80046fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004700:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004710:	9402      	str	r4, [sp, #8]
 8004712:	4b16      	ldr	r3, [pc, #88]	; (800476c <SystemClock_Config+0x8c>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004722:	9302      	str	r3, [sp, #8]
 8004724:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004726:	2502      	movs	r5, #2
 8004728:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800472a:	2301      	movs	r3, #1
 800472c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800472e:	2310      	movs	r3, #16
 8004730:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004732:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004734:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004736:	2308      	movs	r3, #8
 8004738:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800473a:	2354      	movs	r3, #84	; 0x54
 800473c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800473e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004740:	2304      	movs	r3, #4
 8004742:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004744:	a808      	add	r0, sp, #32
 8004746:	f7fe fa8b 	bl	8002c60 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800474a:	230f      	movs	r3, #15
 800474c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800474e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004750:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004756:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004758:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800475a:	4629      	mov	r1, r5
 800475c:	a803      	add	r0, sp, #12
 800475e:	f7fe fccb 	bl	80030f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004762:	b015      	add	sp, #84	; 0x54
 8004764:	bd30      	pop	{r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	40007000 	.word	0x40007000

08004770 <main>:
{
 8004770:	b508      	push	{r3, lr}
  HAL_Init();
 8004772:	f7fb fec9 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 8004776:	f7ff ffb3 	bl	80046e0 <SystemClock_Config>
  MX_GPIO_Init();
 800477a:	f7ff fe95 	bl	80044a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800477e:	f7ff fe57 	bl	8004430 <MX_DMA_Init>
  MX_I2C2_Init();
 8004782:	f7ff ff0d 	bl	80045a0 <MX_I2C2_Init>
  MX_ADC1_Init();
 8004786:	f7ff fd13 	bl	80041b0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800478a:	f000 f9a3 	bl	8004ad4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800478e:	f000 f915 	bl	80049bc <MX_TIM2_Init>
  MX_TIM14_Init();
 8004792:	f000 f94b 	bl	8004a2c <MX_TIM14_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8004796:	482c      	ldr	r0, [pc, #176]	; (8004848 <main+0xd8>)
 8004798:	f7fe fdb2 	bl	8003300 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 800479c:	482b      	ldr	r0, [pc, #172]	; (800484c <main+0xdc>)
 800479e:	f7fe fdaf 	bl	8003300 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,adcValue,ADC_CHANNELS_NUMBER);
 80047a2:	220b      	movs	r2, #11
 80047a4:	492a      	ldr	r1, [pc, #168]	; (8004850 <main+0xe0>)
 80047a6:	482b      	ldr	r0, [pc, #172]	; (8004854 <main+0xe4>)
 80047a8:	f7fb ffa0 	bl	80006ec <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart1, &receivedData, 1);
 80047ac:	2201      	movs	r2, #1
 80047ae:	492a      	ldr	r1, [pc, #168]	; (8004858 <main+0xe8>)
 80047b0:	482a      	ldr	r0, [pc, #168]	; (800485c <main+0xec>)
 80047b2:	f7ff fbe8 	bl	8003f86 <HAL_UART_Receive_IT>
	MCP4661_SetWiper(256,0,0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	4611      	mov	r1, r2
 80047ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047be:	f7ff fbff 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,0,1);
 80047c2:	2201      	movs	r2, #1
 80047c4:	2100      	movs	r1, #0
 80047c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047ca:	f7ff fbf9 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,1,0);
 80047ce:	2200      	movs	r2, #0
 80047d0:	2101      	movs	r1, #1
 80047d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047d6:	f7ff fbf3 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,1,1);
 80047da:	2201      	movs	r2, #1
 80047dc:	4611      	mov	r1, r2
 80047de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047e2:	f7ff fbed 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,2,0);
 80047e6:	2200      	movs	r2, #0
 80047e8:	2102      	movs	r1, #2
 80047ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047ee:	f7ff fbe7 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,2,1);
 80047f2:	2201      	movs	r2, #1
 80047f4:	2102      	movs	r1, #2
 80047f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047fa:	f7ff fbe1 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,3,0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2103      	movs	r1, #3
 8004802:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004806:	f7ff fbdb 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,3,1);
 800480a:	2201      	movs	r2, #1
 800480c:	2103      	movs	r1, #3
 800480e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004812:	f7ff fbd5 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,4,0);
 8004816:	2200      	movs	r2, #0
 8004818:	2104      	movs	r1, #4
 800481a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800481e:	f7ff fbcf 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,4,1);
 8004822:	2201      	movs	r2, #1
 8004824:	2104      	movs	r1, #4
 8004826:	f44f 7080 	mov.w	r0, #256	; 0x100
 800482a:	f7ff fbc9 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,5,0);
 800482e:	2200      	movs	r2, #0
 8004830:	2105      	movs	r1, #5
 8004832:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004836:	f7ff fbc3 	bl	8003fc0 <MCP4661_SetWiper>
	MCP4661_SetWiper(256,5,1);
 800483a:	2201      	movs	r2, #1
 800483c:	2105      	movs	r1, #5
 800483e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004842:	f7ff fbbd 	bl	8003fc0 <MCP4661_SetWiper>
  while (1)
 8004846:	e7fe      	b.n	8004846 <main+0xd6>
 8004848:	20000244 	.word	0x20000244
 800484c:	2000028c 	.word	0x2000028c
 8004850:	20000118 	.word	0x20000118
 8004854:	20000070 	.word	0x20000070
 8004858:	2000006c 	.word	0x2000006c
 800485c:	20000334 	.word	0x20000334

08004860 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004860:	4770      	bx	lr
	...

08004864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004864:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004866:	2100      	movs	r1, #0
 8004868:	9100      	str	r1, [sp, #0]
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_MspInit+0x34>)
 800486c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
 8004874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004876:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800487a:	9200      	str	r2, [sp, #0]
 800487c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	9101      	str	r1, [sp, #4]
 8004880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004886:	641a      	str	r2, [r3, #64]	; 0x40
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004892:	b002      	add	sp, #8
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800

0800489c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800489c:	4770      	bx	lr

0800489e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800489e:	e7fe      	b.n	800489e <HardFault_Handler>

080048a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a0:	e7fe      	b.n	80048a0 <MemManage_Handler>

080048a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048a2:	e7fe      	b.n	80048a2 <BusFault_Handler>

080048a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048a4:	e7fe      	b.n	80048a4 <UsageFault_Handler>

080048a6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048a6:	4770      	bx	lr

080048a8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048a8:	4770      	bx	lr

080048aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048aa:	4770      	bx	lr

080048ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ae:	f7fb fe45 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b2:	bd08      	pop	{r3, pc}

080048b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80048b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80048b6:	4802      	ldr	r0, [pc, #8]	; (80048c0 <DMA1_Stream2_IRQHandler+0xc>)
 80048b8:	f7fc fb86 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80048bc:	bd08      	pop	{r3, pc}
 80048be:	bf00      	nop
 80048c0:	20000184 	.word	0x20000184

080048c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80048c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80048c6:	4802      	ldr	r0, [pc, #8]	; (80048d0 <ADC_IRQHandler+0xc>)
 80048c8:	f7fb ffe7 	bl	800089a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80048cc:	bd08      	pop	{r3, pc}
 80048ce:	bf00      	nop
 80048d0:	20000070 	.word	0x20000070

080048d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	UART_PrepareData();
 80048d6:	f7ff fc35 	bl	8004144 <UART_PrepareData>
	if(measureFlag)
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <TIM2_IRQHandler+0x28>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b93b      	cbnz	r3, 80048f0 <TIM2_IRQHandler+0x1c>
	{
		HAL_UART_Transmit_DMA(&huart1, uartFrame, sizeof(uartFrame));
	}
	time++;
 80048e0:	4a07      	ldr	r2, [pc, #28]	; (8004900 <TIM2_IRQHandler+0x2c>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048e8:	4806      	ldr	r0, [pc, #24]	; (8004904 <TIM2_IRQHandler+0x30>)
 80048ea:	f7fe fd52 	bl	8003392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048ee:	bd08      	pop	{r3, pc}
		HAL_UART_Transmit_DMA(&huart1, uartFrame, sizeof(uartFrame));
 80048f0:	221c      	movs	r2, #28
 80048f2:	4905      	ldr	r1, [pc, #20]	; (8004908 <TIM2_IRQHandler+0x34>)
 80048f4:	4805      	ldr	r0, [pc, #20]	; (800490c <TIM2_IRQHandler+0x38>)
 80048f6:	f7ff f8bb 	bl	8003a70 <HAL_UART_Transmit_DMA>
 80048fa:	e7f1      	b.n	80048e0 <TIM2_IRQHandler+0xc>
 80048fc:	20000047 	.word	0x20000047
 8004900:	20000048 	.word	0x20000048
 8004904:	20000244 	.word	0x20000244
 8004908:	20000050 	.word	0x20000050
 800490c:	20000334 	.word	0x20000334

08004910 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004912:	4802      	ldr	r0, [pc, #8]	; (800491c <I2C2_EV_IRQHandler+0xc>)
 8004914:	f7fe f8d4 	bl	8002ac0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004918:	bd08      	pop	{r3, pc}
 800491a:	bf00      	nop
 800491c:	20000130 	.word	0x20000130

08004920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004922:	4802      	ldr	r0, [pc, #8]	; (800492c <USART1_IRQHandler+0xc>)
 8004924:	f7ff f9d4 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//  UART_Parse(receivedData);
//  HAL_UART_Receive_IT(&huart1, &receivedData, 1);

  /* USER CODE END USART1_IRQn 1 */
}
 8004928:	bd08      	pop	{r3, pc}
 800492a:	bf00      	nop
 800492c:	20000334 	.word	0x20000334

08004930 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
//	measureFlag = 0;								// jesli nie przyjdzie start to zatrzymaj wysylanie
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004932:	4802      	ldr	r0, [pc, #8]	; (800493c <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 8004934:	f7fe fd2d 	bl	8003392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004938:	bd08      	pop	{r3, pc}
 800493a:	bf00      	nop
 800493c:	2000028c 	.word	0x2000028c

08004940 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004942:	4802      	ldr	r0, [pc, #8]	; (800494c <DMA1_Stream7_IRQHandler+0xc>)
 8004944:	f7fc fb40 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004948:	bd08      	pop	{r3, pc}
 800494a:	bf00      	nop
 800494c:	200001e4 	.word	0x200001e4

08004950 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
//	extern uint16_t adcValue[13];
//	extern float adcValueFloat[13];
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004952:	4802      	ldr	r0, [pc, #8]	; (800495c <DMA2_Stream0_IRQHandler+0xc>)
 8004954:	f7fc fb38 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004958:	bd08      	pop	{r3, pc}
 800495a:	bf00      	nop
 800495c:	200000b8 	.word	0x200000b8

08004960 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004962:	4802      	ldr	r0, [pc, #8]	; (800496c <DMA2_Stream7_IRQHandler+0xc>)
 8004964:	f7fc fb30 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004968:	bd08      	pop	{r3, pc}
 800496a:	bf00      	nop
 800496c:	200002d4 	.word	0x200002d4

08004970 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004970:	490f      	ldr	r1, [pc, #60]	; (80049b0 <SystemInit+0x40>)
 8004972:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <SystemInit+0x44>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004988:	2000      	movs	r0, #0
 800498a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004996:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004998:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <SystemInit+0x48>)
 800499a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049a2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049a4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049aa:	608b      	str	r3, [r1, #8]
#endif
}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000ed00 	.word	0xe000ed00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	24003010 	.word	0x24003010

080049bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049bc:	b500      	push	{lr}
 80049be:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049c0:	2300      	movs	r3, #0
 80049c2:	9302      	str	r3, [sp, #8]
 80049c4:	9303      	str	r3, [sp, #12]
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049ce:	4816      	ldr	r0, [pc, #88]	; (8004a28 <MX_TIM2_Init+0x6c>)
 80049d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049d4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 83;
 80049d6:	2253      	movs	r2, #83	; 0x53
 80049d8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049da:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 499;
 80049dc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80049e0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049e2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049e6:	f7fe fdf5 	bl	80035d4 <HAL_TIM_Base_Init>
 80049ea:	b998      	cbnz	r0, 8004a14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049f2:	a902      	add	r1, sp, #8
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <MX_TIM2_Init+0x6c>)
 80049f6:	f7fe fe25 	bl	8003644 <HAL_TIM_ConfigClockSource>
 80049fa:	b970      	cbnz	r0, 8004a1a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80049fc:	2320      	movs	r3, #32
 80049fe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a04:	4669      	mov	r1, sp
 8004a06:	4808      	ldr	r0, [pc, #32]	; (8004a28 <MX_TIM2_Init+0x6c>)
 8004a08:	f7fe fe9c 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8004a0c:	b940      	cbnz	r0, 8004a20 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a0e:	b007      	add	sp, #28
 8004a10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004a14:	f7ff ff24 	bl	8004860 <Error_Handler>
 8004a18:	e7e8      	b.n	80049ec <MX_TIM2_Init+0x30>
    Error_Handler();
 8004a1a:	f7ff ff21 	bl	8004860 <Error_Handler>
 8004a1e:	e7ed      	b.n	80049fc <MX_TIM2_Init+0x40>
    Error_Handler();
 8004a20:	f7ff ff1e 	bl	8004860 <Error_Handler>
}
 8004a24:	e7f3      	b.n	8004a0e <MX_TIM2_Init+0x52>
 8004a26:	bf00      	nop
 8004a28:	20000244 	.word	0x20000244

08004a2c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004a2c:	b508      	push	{r3, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004a2e:	480a      	ldr	r0, [pc, #40]	; (8004a58 <MX_TIM14_Init+0x2c>)
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <MX_TIM14_Init+0x30>)
 8004a32:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 8399;
 8004a34:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8004a38:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 9999;
 8004a3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004a42:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a44:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004a4a:	f7fe fdc3 	bl	80035d4 <HAL_TIM_Base_Init>
 8004a4e:	b900      	cbnz	r0, 8004a52 <MX_TIM14_Init+0x26>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004a50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a52:	f7ff ff05 	bl	8004860 <Error_Handler>
}
 8004a56:	e7fb      	b.n	8004a50 <MX_TIM14_Init+0x24>
 8004a58:	2000028c 	.word	0x2000028c
 8004a5c:	40002000 	.word	0x40002000

08004a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a60:	b500      	push	{lr}
 8004a62:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 8004a64:	6803      	ldr	r3, [r0, #0]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6a:	d005      	beq.n	8004a78 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_TIM_Base_MspInit+0x6c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d017      	beq.n	8004aa2 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004a72:	b003      	add	sp, #12
 8004a74:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a78:	2100      	movs	r1, #0
 8004a7a:	9100      	str	r1, [sp, #0]
 8004a7c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004a92:	460a      	mov	r2, r1
 8004a94:	201c      	movs	r0, #28
 8004a96:	f7fc f8c7 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a9a:	201c      	movs	r0, #28
 8004a9c:	f7fc f8f8 	bl	8000c90 <HAL_NVIC_EnableIRQ>
 8004aa0:	e7e7      	b.n	8004a72 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	9101      	str	r1, [sp, #4]
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_TIM_Base_MspInit+0x70>)
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004aba:	460a      	mov	r2, r1
 8004abc:	202d      	movs	r0, #45	; 0x2d
 8004abe:	f7fc f8b3 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004ac2:	202d      	movs	r0, #45	; 0x2d
 8004ac4:	f7fc f8e4 	bl	8000c90 <HAL_NVIC_EnableIRQ>
}
 8004ac8:	e7d3      	b.n	8004a72 <HAL_TIM_Base_MspInit+0x12>
 8004aca:	bf00      	nop
 8004acc:	40002000 	.word	0x40002000
 8004ad0:	40023800 	.word	0x40023800

08004ad4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ad4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ad6:	480b      	ldr	r0, [pc, #44]	; (8004b04 <MX_USART1_UART_Init+0x30>)
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <MX_USART1_UART_Init+0x34>)
 8004ada:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 3686400;
 8004adc:	f44f 1361 	mov.w	r3, #3686400	; 0x384000
 8004ae0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ae6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004ae8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004aea:	220c      	movs	r2, #12
 8004aec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8004af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004af6:	f7fe ff67 	bl	80039c8 <HAL_UART_Init>
 8004afa:	b900      	cbnz	r0, 8004afe <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004afc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004afe:	f7ff feaf 	bl	8004860 <Error_Handler>
}
 8004b02:	e7fb      	b.n	8004afc <MX_USART1_UART_Init+0x28>
 8004b04:	20000334 	.word	0x20000334
 8004b08:	40011000 	.word	0x40011000

08004b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b0c:	b530      	push	{r4, r5, lr}
 8004b0e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	2300      	movs	r3, #0
 8004b12:	9303      	str	r3, [sp, #12]
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	9305      	str	r3, [sp, #20]
 8004b18:	9306      	str	r3, [sp, #24]
 8004b1a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8004b1c:	6802      	ldr	r2, [r0, #0]
 8004b1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b22:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004b2a:	b009      	add	sp, #36	; 0x24
 8004b2c:	bd30      	pop	{r4, r5, pc}
 8004b2e:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b30:	2500      	movs	r5, #0
 8004b32:	9501      	str	r5, [sp, #4]
 8004b34:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3a:	f042 0210 	orr.w	r2, r2, #16
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b42:	f002 0210 	and.w	r2, r2, #16
 8004b46:	9201      	str	r2, [sp, #4]
 8004b48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	9502      	str	r5, [sp, #8]
 8004b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	9302      	str	r3, [sp, #8]
 8004b5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b64:	2302      	movs	r3, #2
 8004b66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b6e:	2307      	movs	r3, #7
 8004b70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b72:	a903      	add	r1, sp, #12
 8004b74:	4813      	ldr	r0, [pc, #76]	; (8004bc4 <HAL_UART_MspInit+0xb8>)
 8004b76:	f7fc fb19 	bl	80011ac <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004b7a:	4813      	ldr	r0, [pc, #76]	; (8004bc8 <HAL_UART_MspInit+0xbc>)
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <HAL_UART_MspInit+0xc0>)
 8004b7e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b84:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b86:	2340      	movs	r3, #64	; 0x40
 8004b88:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b8a:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b92:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b94:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004b96:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004b98:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004b9c:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b9e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004ba0:	f7fc f91a 	bl	8000dd8 <HAL_DMA_Init>
 8004ba4:	b958      	cbnz	r0, 8004bbe <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_UART_MspInit+0xbc>)
 8004ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8004baa:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8004bac:	2200      	movs	r2, #0
 8004bae:	2103      	movs	r1, #3
 8004bb0:	2025      	movs	r0, #37	; 0x25
 8004bb2:	f7fc f839 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bb6:	2025      	movs	r0, #37	; 0x25
 8004bb8:	f7fc f86a 	bl	8000c90 <HAL_NVIC_EnableIRQ>
}
 8004bbc:	e7b5      	b.n	8004b2a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8004bbe:	f7ff fe4f 	bl	8004860 <Error_Handler>
 8004bc2:	e7f0      	b.n	8004ba6 <HAL_UART_MspInit+0x9a>
 8004bc4:	40020000 	.word	0x40020000
 8004bc8:	200002d4 	.word	0x200002d4
 8004bcc:	400264b8 	.word	0x400264b8

08004bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bd6:	e003      	b.n	8004be0 <LoopCopyDataInit>

08004bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bde:	3104      	adds	r1, #4

08004be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004be8:	d3f6      	bcc.n	8004bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004bec:	e002      	b.n	8004bf4 <LoopFillZerobss>

08004bee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004bf0:	f842 3b04 	str.w	r3, [r2], #4

08004bf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bf8:	d3f9      	bcc.n	8004bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bfa:	f7ff feb9 	bl	8004970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bfe:	f000 f811 	bl	8004c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c02:	f7ff fdb5 	bl	8004770 <main>
  bx  lr    
 8004c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c0c:	08004cd8 	.word	0x08004cd8
  ldr  r0, =_sdata
 8004c10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c14:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8004c18:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8004c1c:	20000378 	.word	0x20000378

08004c20 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c20:	e7fe      	b.n	8004c20 <CAN1_RX0_IRQHandler>
	...

08004c24 <__libc_init_array>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4d0d      	ldr	r5, [pc, #52]	; (8004c5c <__libc_init_array+0x38>)
 8004c28:	4c0d      	ldr	r4, [pc, #52]	; (8004c60 <__libc_init_array+0x3c>)
 8004c2a:	1b64      	subs	r4, r4, r5
 8004c2c:	10a4      	asrs	r4, r4, #2
 8004c2e:	2600      	movs	r6, #0
 8004c30:	42a6      	cmp	r6, r4
 8004c32:	d109      	bne.n	8004c48 <__libc_init_array+0x24>
 8004c34:	4d0b      	ldr	r5, [pc, #44]	; (8004c64 <__libc_init_array+0x40>)
 8004c36:	4c0c      	ldr	r4, [pc, #48]	; (8004c68 <__libc_init_array+0x44>)
 8004c38:	f000 f820 	bl	8004c7c <_init>
 8004c3c:	1b64      	subs	r4, r4, r5
 8004c3e:	10a4      	asrs	r4, r4, #2
 8004c40:	2600      	movs	r6, #0
 8004c42:	42a6      	cmp	r6, r4
 8004c44:	d105      	bne.n	8004c52 <__libc_init_array+0x2e>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4c:	4798      	blx	r3
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7ee      	b.n	8004c30 <__libc_init_array+0xc>
 8004c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c56:	4798      	blx	r3
 8004c58:	3601      	adds	r6, #1
 8004c5a:	e7f2      	b.n	8004c42 <__libc_init_array+0x1e>
 8004c5c:	08004cd0 	.word	0x08004cd0
 8004c60:	08004cd0 	.word	0x08004cd0
 8004c64:	08004cd0 	.word	0x08004cd0
 8004c68:	08004cd4 	.word	0x08004cd4

08004c6c <memset>:
 8004c6c:	4402      	add	r2, r0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
